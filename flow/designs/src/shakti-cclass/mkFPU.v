//
// Generated by Bluespec Compiler (build 9f4a447f)
//
// On Wed Mar 29 08:58:44 +04 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1
// tx_output_enq_ena              O     1
// tx_output_enq_data             O    70
// RDY_flush                      O     1 const
// fpu_ready                      O     1
// RDY_fpu_ready                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_m                       I   209 reg
// tx_output_notFull_b            I     1 unused
// tx_output_enq_rdy_b            I     1
// EN__start                      I     1
// EN_flush                       I     1
//
// Combinational paths from inputs to outputs:
//   (tx_output_enq_rdy_b, EN_flush) -> tx_output_enq_ena
//   (tx_output_enq_rdy_b, EN_flush) -> tx_output_enq_data
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu(CLK,
	     RST_N,

	     _start_m,
	     EN__start,
	     RDY__start,

	     tx_output_notFull_b,

	     tx_output_enq_rdy_b,

	     tx_output_enq_ena,

	     tx_output_enq_data,

	     EN_flush,
	     RDY_flush,

	     fpu_ready,
	     RDY_fpu_ready);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [208 : 0] _start_m;
  input  EN__start;
  output RDY__start;

  // action method tx_output_notFull
  input  tx_output_notFull_b;

  // action method tx_output_enq_rdy
  input  tx_output_enq_rdy_b;

  // value method tx_output_enq_ena
  output tx_output_enq_ena;

  // value method tx_output_enq_data
  output [69 : 0] tx_output_enq_data;

  // action method flush
  input  EN_flush;
  output RDY_flush;

  // value method fpu_ready
  output fpu_ready;
  output RDY_fpu_ready;

  // signals for module outputs
  reg [69 : 0] tx_output_enq_data;
  wire RDY__start, RDY_flush, RDY_fpu_ready, fpu_ready, tx_output_enq_ena;

  // inlined wires
  reg [171 : 0] inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget;
  reg [84 : 0] inst_spfpu_divider_int_div_wfn_divide_step_arg_wget;
  wire [191 : 0] getMant64_arg_wget, setCanonicalNaN_arg_wget;
  wire [188 : 0] condFlags64_arg_wget;
  wire [169 : 0] inst_dpfpu_divider_int_div_wr_final_out_wget;
  wire [155 : 0] getMant64_res_wget;
  wire [95 : 0] getMant32_arg_wget, setCanonicalNaN_res_wget;
  wire [92 : 0] condFlags32_arg_wget;
  wire [82 : 0] inst_spfpu_divider_int_div_wr_final_out_wget;
  wire [69 : 0] inst_dpfpu_sqrt_ff_final_out_1_wget;
  wire [68 : 0] getMant32_res_wget,
		inst_dpfm_add_sub_ff_final_out_wget,
		inst_dpfpu_divider_wr_final_out_wget;
  wire [67 : 0] inst_fpu_int_to_fp_fcvt_s_llu_arg_wget;
  wire [37 : 0] inst_spfpu_sqrt_ff_final_out_1_wget;
  wire [36 : 0] inst_fpu_int_to_fp_fcvt_s_llu_res_wget,
		inst_fpu_int_to_fp_fcvt_s_wwu_res_wget,
		inst_spfm_add_sub_ff_final_out_wget,
		inst_spfpu_divider_wr_final_out_wget;
  wire [35 : 0] inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget;
  wire [32 : 0] getExp64_res_wget;
  wire [23 : 0] getExp32_res_wget;
  wire [14 : 0] condFlags32_res_wget, condFlags64_res_wget;
  wire inst_dpfpu_sqrt_ff_final_out_1_whas,
       inst_spfpu_sqrt_ff_final_out_1_whas,
       tx_fbox_out_w_ena_whas;

  // register inst_dpfm_add_sub_ff_input_register
  reg [200 : 0] inst_dpfm_add_sub_ff_input_register;
  wire [200 : 0] inst_dpfm_add_sub_ff_input_register_D_IN;
  wire inst_dpfm_add_sub_ff_input_register_EN;

  // register inst_dpfm_add_sub_ff_stage2
  reg [203 : 0] inst_dpfm_add_sub_ff_stage2;
  wire [203 : 0] inst_dpfm_add_sub_ff_stage2_D_IN;
  wire inst_dpfm_add_sub_ff_stage2_EN;

  // register inst_dpfm_add_sub_ff_stage4
  reg [348 : 0] inst_dpfm_add_sub_ff_stage4;
  wire [348 : 0] inst_dpfm_add_sub_ff_stage4_D_IN;
  wire inst_dpfm_add_sub_ff_stage4_EN;

  // register inst_dpfm_add_sub_ff_stage5
  reg [196 : 0] inst_dpfm_add_sub_ff_stage5;
  wire [196 : 0] inst_dpfm_add_sub_ff_stage5_D_IN;
  wire inst_dpfm_add_sub_ff_stage5_EN;

  // register inst_dpfm_add_sub_rg_state_handler
  reg [2 : 0] inst_dpfm_add_sub_rg_state_handler;
  reg [2 : 0] inst_dpfm_add_sub_rg_state_handler_D_IN;
  wire inst_dpfm_add_sub_rg_state_handler_EN;

  // register inst_dpfpu_divider_int_div_rg_inter_stage
  reg [169 : 0] inst_dpfpu_divider_int_div_rg_inter_stage;
  wire [169 : 0] inst_dpfpu_divider_int_div_rg_inter_stage_D_IN;
  wire inst_dpfpu_divider_int_div_rg_inter_stage_EN;

  // register inst_dpfpu_divider_int_div_rg_state
  reg [5 : 0] inst_dpfpu_divider_int_div_rg_state;
  reg [5 : 0] inst_dpfpu_divider_int_div_rg_state_D_IN;
  wire inst_dpfpu_divider_int_div_rg_state_EN;

  // register inst_dpfpu_divider_rg_stage1
  reg [127 : 0] inst_dpfpu_divider_rg_stage1;
  wire [127 : 0] inst_dpfpu_divider_rg_stage1_D_IN;
  wire inst_dpfpu_divider_rg_stage1_EN;

  // register inst_dpfpu_divider_rg_stage2
  reg [21 : 0] inst_dpfpu_divider_rg_stage2;
  wire [21 : 0] inst_dpfpu_divider_rg_stage2_D_IN;
  wire inst_dpfpu_divider_rg_stage2_EN;

  // register inst_dpfpu_divider_rg_stage3
  reg [138 : 0] inst_dpfpu_divider_rg_stage3;
  wire [138 : 0] inst_dpfpu_divider_rg_stage3_D_IN;
  wire inst_dpfpu_divider_rg_stage3_EN;

  // register inst_dpfpu_divider_rg_state_handler
  reg [1 : 0] inst_dpfpu_divider_rg_state_handler;
  reg [1 : 0] inst_dpfpu_divider_rg_state_handler_D_IN;
  wire inst_dpfpu_divider_rg_state_handler_EN;

  // register inst_dpfpu_sqrt_ff_final_out
  reg [69 : 0] inst_dpfpu_sqrt_ff_final_out;
  wire [69 : 0] inst_dpfpu_sqrt_ff_final_out_D_IN;
  wire inst_dpfpu_sqrt_ff_final_out_EN;

  // register inst_dpfpu_sqrt_rg_inter_stage
  reg [293 : 0] inst_dpfpu_sqrt_rg_inter_stage;
  wire [293 : 0] inst_dpfpu_sqrt_rg_inter_stage_D_IN;
  wire inst_dpfpu_sqrt_rg_inter_stage_EN;

  // register inst_dpfpu_sqrt_rg_state
  reg [5 : 0] inst_dpfpu_sqrt_rg_state;
  reg [5 : 0] inst_dpfpu_sqrt_rg_state_D_IN;
  wire inst_dpfpu_sqrt_rg_state_EN;

  // register inst_spfm_add_sub_ff_input_register
  reg [107 : 0] inst_spfm_add_sub_ff_input_register;
  wire [107 : 0] inst_spfm_add_sub_ff_input_register_D_IN;
  wire inst_spfm_add_sub_ff_input_register_EN;

  // register inst_spfm_add_sub_ff_stage2
  reg [110 : 0] inst_spfm_add_sub_ff_stage2;
  wire [110 : 0] inst_spfm_add_sub_ff_stage2_D_IN;
  wire inst_spfm_add_sub_ff_stage2_EN;

  // register inst_spfm_add_sub_ff_stage4
  reg [171 : 0] inst_spfm_add_sub_ff_stage4;
  wire [171 : 0] inst_spfm_add_sub_ff_stage4_D_IN;
  wire inst_spfm_add_sub_ff_stage4_EN;

  // register inst_spfm_add_sub_ff_stage5
  reg [105 : 0] inst_spfm_add_sub_ff_stage5;
  wire [105 : 0] inst_spfm_add_sub_ff_stage5_D_IN;
  wire inst_spfm_add_sub_ff_stage5_EN;

  // register inst_spfm_add_sub_rg_state_handler
  reg [2 : 0] inst_spfm_add_sub_rg_state_handler;
  reg [2 : 0] inst_spfm_add_sub_rg_state_handler_D_IN;
  wire inst_spfm_add_sub_rg_state_handler_EN;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  reg [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage;
  wire [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage_D_IN;
  wire inst_spfpu_divider_int_div_rg_inter_stage_EN;

  // register inst_spfpu_divider_int_div_rg_state
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state;
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state_D_IN;
  wire inst_spfpu_divider_int_div_rg_state_EN;

  // register inst_spfpu_divider_rg_stage1
  reg [66 : 0] inst_spfpu_divider_rg_stage1;
  wire [66 : 0] inst_spfpu_divider_rg_stage1_D_IN;
  wire inst_spfpu_divider_rg_stage1_EN;

  // register inst_spfpu_divider_rg_stage2
  reg [18 : 0] inst_spfpu_divider_rg_stage2;
  wire [18 : 0] inst_spfpu_divider_rg_stage2_D_IN;
  wire inst_spfpu_divider_rg_stage2_EN;

  // register inst_spfpu_divider_rg_stage3
  reg [77 : 0] inst_spfpu_divider_rg_stage3;
  wire [77 : 0] inst_spfpu_divider_rg_stage3_D_IN;
  wire inst_spfpu_divider_rg_stage3_EN;

  // register inst_spfpu_divider_rg_state_handler
  reg [1 : 0] inst_spfpu_divider_rg_state_handler;
  reg [1 : 0] inst_spfpu_divider_rg_state_handler_D_IN;
  wire inst_spfpu_divider_rg_state_handler_EN;

  // register inst_spfpu_sqrt_ff_final_out
  reg [37 : 0] inst_spfpu_sqrt_ff_final_out;
  wire [37 : 0] inst_spfpu_sqrt_ff_final_out_D_IN;
  wire inst_spfpu_sqrt_ff_final_out_EN;

  // register inst_spfpu_sqrt_rg_inter_stage
  reg [145 : 0] inst_spfpu_sqrt_rg_inter_stage;
  wire [145 : 0] inst_spfpu_sqrt_rg_inter_stage_D_IN;
  wire inst_spfpu_sqrt_rg_inter_stage_EN;

  // register inst_spfpu_sqrt_rg_state
  reg [5 : 0] inst_spfpu_sqrt_rg_state;
  reg [5 : 0] inst_spfpu_sqrt_rg_state_D_IN;
  wire inst_spfpu_sqrt_rg_state_EN;

  // register rg_multicycle_op
  reg rg_multicycle_op;
  reg rg_multicycle_op_D_IN;
  wire rg_multicycle_op_EN;

  // ports of submodule ff_input
  wire [208 : 0] ff_input_D_IN, ff_input_D_OUT;
  wire ff_input_CLR,
       ff_input_DEQ,
       ff_input_EMPTY_N,
       ff_input_ENQ,
       ff_input_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_flush_fifo,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_flush,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4,
       CAN_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_flush,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_rl_flush,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       CAN_FIRE_RL_inst_spfpu_divider_rl_flush,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage2,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage3,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage4,
       CAN_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_flush,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt,
       CAN_FIRE_RL_rl_get_output_from_fm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_spfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       CAN_FIRE_RL_start_stage,
       CAN_FIRE___me_check_0,
       CAN_FIRE___me_check_1,
       CAN_FIRE___me_check_10,
       CAN_FIRE___me_check_11,
       CAN_FIRE___me_check_18,
       CAN_FIRE___me_check_19,
       CAN_FIRE___me_check_2,
       CAN_FIRE___me_check_20,
       CAN_FIRE___me_check_22,
       CAN_FIRE___me_check_23,
       CAN_FIRE___me_check_27,
       CAN_FIRE___me_check_28,
       CAN_FIRE___me_check_29,
       CAN_FIRE___me_check_37,
       CAN_FIRE___me_check_38,
       CAN_FIRE___me_check_39,
       CAN_FIRE___me_check_4,
       CAN_FIRE___me_check_40,
       CAN_FIRE___me_check_41,
       CAN_FIRE___me_check_5,
       CAN_FIRE___me_check_9,
       CAN_FIRE__start,
       CAN_FIRE_flush,
       CAN_FIRE_tx_output_enq_rdy,
       CAN_FIRE_tx_output_notFull,
       WILL_FIRE_RL_flush_fifo,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_flush,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4,
       WILL_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_flush,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_rl_flush,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       WILL_FIRE_RL_inst_spfpu_divider_rl_flush,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage2,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage3,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage4,
       WILL_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_flush,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt,
       WILL_FIRE_RL_rl_get_output_from_fm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_spfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       WILL_FIRE_RL_start_stage,
       WILL_FIRE___me_check_0,
       WILL_FIRE___me_check_1,
       WILL_FIRE___me_check_10,
       WILL_FIRE___me_check_11,
       WILL_FIRE___me_check_18,
       WILL_FIRE___me_check_19,
       WILL_FIRE___me_check_2,
       WILL_FIRE___me_check_20,
       WILL_FIRE___me_check_22,
       WILL_FIRE___me_check_23,
       WILL_FIRE___me_check_27,
       WILL_FIRE___me_check_28,
       WILL_FIRE___me_check_29,
       WILL_FIRE___me_check_37,
       WILL_FIRE___me_check_38,
       WILL_FIRE___me_check_39,
       WILL_FIRE___me_check_4,
       WILL_FIRE___me_check_40,
       WILL_FIRE___me_check_41,
       WILL_FIRE___me_check_5,
       WILL_FIRE___me_check_9,
       WILL_FIRE__start,
       WILL_FIRE_flush,
       WILL_FIRE_tx_output_enq_rdy,
       WILL_FIRE_tx_output_notFull;

  // inputs to muxes for submodule ports
  reg [69 : 0] MUX_tx_fbox_out_w_data_wset_1__VAL_1;
  wire [293 : 0] MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1,
		 MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2;
  wire [171 : 0] MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1,
		 MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2,
		 MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
  wire [145 : 0] MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1,
		 MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2;
  wire [84 : 0] MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1,
		MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2,
		MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
  wire [69 : 0] MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1,
		MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2,
		MUX_tx_fbox_out_w_data_wset_1__VAL_2,
		MUX_tx_fbox_out_w_data_wset_1__VAL_3,
		MUX_tx_fbox_out_w_data_wset_1__VAL_4,
		MUX_tx_fbox_out_w_data_wset_1__VAL_5,
		MUX_tx_fbox_out_w_data_wset_1__VAL_6,
		MUX_tx_fbox_out_w_data_wset_1__VAL_7;
  wire [37 : 0] MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1,
		MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2;
  wire [5 : 0] MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2,
	       MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1,
	       MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3,
	       MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
  wire MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1,
       MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1,
       MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1,
       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1,
       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1,
       MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1,
       MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1,
       MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1,
       MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1,
       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1,
       MUX_rg_multicycle_op_write_1__SEL_2,
       MUX_tx_fbox_out_w_data_wset_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d6332;
  reg TASK_testplusargs___d6333;
  reg TASK_testplusargs___d6334;
  reg [63 : 0] v__h298102;
  reg TASK_testplusargs___d6341;
  reg TASK_testplusargs___d6342;
  reg TASK_testplusargs___d6343;
  reg [63 : 0] v__h298248;
  reg TASK_testplusargs___d6269;
  reg TASK_testplusargs___d6270;
  reg TASK_testplusargs___d6271;
  reg [63 : 0] v__h296713;
  reg TASK_testplusargs___d6283;
  reg TASK_testplusargs___d6284;
  reg TASK_testplusargs___d6285;
  reg [63 : 0] v__h296969;
  reg TASK_testplusargs___d6241;
  reg TASK_testplusargs___d6242;
  reg TASK_testplusargs___d6243;
  reg [63 : 0] v__h296220;
  reg TASK_testplusargs___d6295;
  reg TASK_testplusargs___d6296;
  reg TASK_testplusargs___d6297;
  reg [63 : 0] v__h297197;
  reg TASK_testplusargs___d6306;
  reg TASK_testplusargs___d6307;
  reg TASK_testplusargs___d6308;
  reg [63 : 0] v__h297443;
  reg TASK_testplusargs___d6255;
  reg TASK_testplusargs___d6256;
  reg TASK_testplusargs___d6257;
  reg [63 : 0] v__h296457;
  reg TASK_testplusargs___d4867;
  reg TASK_testplusargs___d4868;
  reg TASK_testplusargs___d4869;
  reg [63 : 0] v__h223323;
  reg TASK_testplusargs___d5183;
  reg TASK_testplusargs___d5184;
  reg TASK_testplusargs___d5185;
  reg [63 : 0] v__h223414;
  reg TASK_testplusargs___d5192;
  reg TASK_testplusargs___d5193;
  reg TASK_testplusargs___d5194;
  reg [63 : 0] v__h223545;
  reg TASK_testplusargs___d5199;
  reg TASK_testplusargs___d5200;
  reg TASK_testplusargs___d5201;
  reg [63 : 0] v__h223636;
  reg TASK_testplusargs___d5206;
  reg TASK_testplusargs___d5207;
  reg TASK_testplusargs___d5208;
  reg [63 : 0] v__h223727;
  reg TASK_testplusargs___d5213;
  reg TASK_testplusargs___d5214;
  reg TASK_testplusargs___d5215;
  reg [63 : 0] v__h222786;
  reg TASK_testplusargs___d5239;
  reg TASK_testplusargs___d5240;
  reg TASK_testplusargs___d5241;
  reg [63 : 0] v__h222638;
  reg TASK_testplusargs___d5253;
  reg TASK_testplusargs___d5254;
  reg TASK_testplusargs___d5255;
  reg [63 : 0] v__h222935;
  reg TASK_testplusargs___d5273;
  reg TASK_testplusargs___d5274;
  reg TASK_testplusargs___d5275;
  reg [63 : 0] v__h223083;
  reg TASK_testplusargs___d5460;
  reg TASK_testplusargs___d5461;
  reg TASK_testplusargs___d5462;
  reg [63 : 0] v__h235340;
  reg TASK_testplusargs___d5477;
  reg TASK_testplusargs___d5478;
  reg TASK_testplusargs___d5479;
  reg [63 : 0] v__h235445;
  reg TASK_testplusargs___d5606;
  reg TASK_testplusargs___d5607;
  reg TASK_testplusargs___d5608;
  reg [63 : 0] v__h244570;
  reg TASK_testplusargs___d5876;
  reg TASK_testplusargs___d5877;
  reg TASK_testplusargs___d5878;
  reg [63 : 0] v__h260956;
  reg TASK_testplusargs___d6107;
  reg TASK_testplusargs___d6108;
  reg TASK_testplusargs___d6109;
  reg [63 : 0] v__h287912;
  reg TASK_testplusargs___d6119;
  reg TASK_testplusargs___d6120;
  reg TASK_testplusargs___d6121;
  reg [63 : 0] v__h288013;
  reg TASK_testplusargs___d6128;
  reg TASK_testplusargs___d6129;
  reg TASK_testplusargs___d6130;
  reg [63 : 0] v__h291843;
  reg TASK_testplusargs___d6148;
  reg TASK_testplusargs___d6149;
  reg TASK_testplusargs___d6150;
  reg [63 : 0] v__h291969;
  reg TASK_testplusargs___d6179;
  reg TASK_testplusargs___d6180;
  reg TASK_testplusargs___d6181;
  reg [63 : 0] v__h294159;
  reg TASK_testplusargs___d6211;
  reg TASK_testplusargs___d6212;
  reg TASK_testplusargs___d6213;
  reg [63 : 0] v__h296082;
  reg TASK_testplusargs___d6315;
  reg TASK_testplusargs___d6316;
  reg TASK_testplusargs___d6317;
  reg [63 : 0] v__h297609;
  reg TASK_testplusargs___d6325;
  reg TASK_testplusargs___d6326;
  reg TASK_testplusargs___d6327;
  reg [63 : 0] v__h297830;
  reg ff_input_first__327_BIT_0_359_AND_TASK_testplu_ETC___d5218;
  reg NOT_ff_input_first__327_BIT_0_359_505_AND_TASK_ETC___d5244;
  reg ff_input_first__327_BITS_12_TO_6_340_EQ_0b1110_ETC___d5258;
  reg ff_input_first__327_BITS_12_TO_6_340_EQ_0b1110_ETC___d5278;
  reg NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5281;
  reg ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_51_ETC___d5465;
  reg NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5471;
  reg ff_input_first__327_BIT_0_359_AND_TASK_testplu_ETC___d5482;
  reg NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5484;
  reg ff_input_first__327_BIT_0_359_AND_TASK_testplu_ETC___d5611;
  reg NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5613;
  reg NOT_ff_input_first__327_BIT_0_359_505_AND_TASK_ETC___d5881;
  reg NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5883;
  reg NOT_ff_input_first__327_BIT_0_359_505_AND_TASK_ETC___d6112;
  reg NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6114;
  reg ff_input_first__327_BITS_12_TO_8_328_EQ_0b10_5_ETC___d6124;
  reg ff_input_first__327_BITS_12_TO_8_328_EQ_0b10_5_ETC___d6133;
  reg ff_input_first__327_BIT_0_359_AND_TASK_testplu_ETC___d6153;
  reg NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6165;
  reg NOT_ff_input_first__327_BIT_0_359_505_AND_TASK_ETC___d6184;
  reg NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6196;
  reg ff_input_first__327_BITS_16_TO_13_356_EQ_0b0_5_ETC___d6216;
  reg NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6227;
  reg ff_input_first__327_BITS_12_TO_8_328_EQ_0b1010_ETC___d4872;
  reg ff_input_first__327_BITS_12_TO_8_328_EQ_0b1101_ETC___d5188;
  reg ff_input_first__327_BITS_12_TO_8_328_EQ_0b100__ETC___d5197;
  reg ff_input_first__327_BITS_12_TO_8_328_EQ_0b1100_ETC___d5204;
  reg ff_input_first__327_BITS_12_TO_8_328_EQ_0b1110_ETC___d5211;
  reg NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6126;
  reg NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6135;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b10_ETC___d3519;
  reg [31 : 0] CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2,
	       IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b10_ETC___d3442;
  reg CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8,
      CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44,
      IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5046,
      IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5170,
      IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d3720,
      IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d3952,
      IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d4120,
      IF_inst_dpfm_add_sub_ff_stage5_read__171_BITS__ETC___d3235,
      IF_inst_dpfpu_divider_rg_stage3_680_BITS_4_TO__ETC___d1722,
      IF_inst_dpfpu_sqrt_rg_inter_stage_read__794_BI_ETC___d1848,
      IF_inst_spfm_add_sub_ff_stage5_read__178_BITS__ETC___d1242,
      IF_inst_spfpu_divider_rg_stage3_67_BITS_4_TO_2_ETC___d309,
      IF_inst_spfpu_sqrt_rg_inter_stage_read__81_BIT_ETC___d435,
      _theResult_____4___1__h230715;
  wire [211 : 0] _0_CONCAT_INV_IF_condFlags64_res_whas__446_THEN_ETC___d5398;
  wire [169 : 0] inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16,
		 x__h63265;
  wire [159 : 0] IF_IF_inst_dpfm_add_sub_ff_stage2_read__388_BI_ETC___d2429,
		 IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3214,
		 _theResult____h102239,
		 _theResult____h148460,
		 _theResult___snd_fst__h171603,
		 _theResult___snd_fst__h171605,
		 add_mantissa__h148456,
		 mantissa2__h102226,
		 mantissa2__h102248,
		 mantissa2__h102269,
		 mantissa3___1__h121959,
		 mantissa3__h102270,
		 mantissa_to_shift___1__h102267,
		 mantissa_to_shift__h102262,
		 resultant_mantissa___1__h171358,
		 resultant_mantissa_norm_expo__h171052,
		 resultant_mantissa_norm_zerosMSB__h171053,
		 sub_mantissa1__h148457,
		 sub_mantissa2__h148458,
		 sub_mantissa__h148459;
  wire [125 : 0] IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d4802,
		 IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d4801,
		 IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d4804;
  wire [115 : 0] _1_CONCAT_IF_getMant64_res_whas__038_THEN_getMa_ETC___d4045,
		 final_man__h218055;
  wire [113 : 0] IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1406,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1384,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1407,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q21,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q22,
		 inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q17,
		 inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q18;
  wire [112 : 0] IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1389,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1357;
  wire [109 : 0] IF_IF_IF_condFlags64_res_whas__446_THEN_condFl_ETC___d6087,
		 mantissa___1__h287538,
		 mantissa__h271454,
		 mantissa__h271456,
		 mantissa__h271466,
		 mantissa__h78214;
  wire [106 : 0] IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2124,
		 _theResult_____1_snd__h94581,
		 _theResult_____1_snd__h94584,
		 _theResult___snd_fst__h94621,
		 lv_product_mantissa___1__h94552,
		 lv_product_mantissa___1__h94567,
		 lv_product_mantissa__h79436,
		 lv_product_mantissa__h94522,
		 lv_product_mantissa_shiftL_expo__h94530,
		 lv_product_mantissa_shiftL_zerosMSB__h94532,
		 x_lv_product_mantissa__h79504;
  wire [95 : 0] _0_CONCAT_INV_IF_condFlags32_res_whas__361_THEN_ETC___d5318;
  wire [86 : 0] _1_CONCAT_IF_getMant32_res_whas__869_THEN_getMa_ETC___d3876,
		final_man__h215268;
  wire [82 : 0] inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9,
		x__h4812;
  wire [72 : 0] IF_IF_inst_spfm_add_sub_ff_stage2_read__43_BIT_ETC___d784,
		IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1221,
		_theResult____h25898,
		_theResult____h47498,
		_theResult___snd_fst__h58461,
		_theResult___snd_fst__h58463,
		add_mantissa__h47494,
		mantissa2__h25885,
		mantissa2__h25907,
		mantissa2__h25928,
		mantissa3___1__h35120,
		mantissa3__h25929,
		mantissa_to_shift___1__h25926,
		mantissa_to_shift__h25921,
		resultant_mantissa___1__h58216,
		resultant_mantissa_norm_expo__h57910,
		resultant_mantissa_norm_zerosMSB__h57911,
		sub_mantissa1__h47495,
		sub_mantissa2__h47496,
		sub_mantissa__h47497;
  wire [69 : 0] IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d4476,
		IF_ff_input_first__327_BIT_0_359_THEN_0xFFFFFF_ETC___d4468,
		IF_ff_input_first__327_BIT_0_359_THEN_42949672_ETC___d3820,
		IF_ff_input_first__327_BIT_0_359_THEN_IF_NOT_I_ETC___d4272,
		IF_ff_input_first__327_BIT_0_359_THEN_IF_ff_in_ETC___d3539;
  wire [68 : 0] IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d4461,
		IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d4462,
		IF_inst_dpfpu_divider_rg_stage3_680_BIT_10_687_ETC___d1773;
  wire [63 : 0] IF_0b0_CONCAT_IF_getExp64_res_whas__004_THEN_g_ETC___d4071,
		IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d3501,
		IF_IF_getExp32_res_whas__836_THEN_getExp32_res_ETC___d3903,
		IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5021,
		IF_NOT_ff_input_first__327_BIT_1_552_566_AND_f_ETC___d3700,
		IF_NOT_ff_input_first__327_BIT_3_380_381_AND_I_ETC___d3499,
		IF_ff_input_first__327_BIT_1_552_THEN_0_ELSE_1_ETC___d3901,
		IF_ff_input_first__327_BIT_3_380_AND_IF_condFl_ETC___d3498,
		_theResult_____1_fst__h76611,
		_theResult_____1_snd__h216979,
		_theResult_____1_snd__h219765,
		_theResult_____2_snd__h216654,
		_theResult_____2_snd__h216761,
		_theResult_____2_snd__h216813,
		_theResult_____2_snd__h216864,
		_theResult_____2_snd__h216867,
		_theResult_____2_snd__h219442,
		_theResult_____2_snd__h219547,
		_theResult_____2_snd__h219599,
		_theResult_____2_snd__h219650,
		_theResult_____2_snd__h219653,
		_theResult_____3_snd__h177915,
		_theResult_____3_snd__h178467,
		_theResult_____3_snd_snd__h171255,
		_theResult_____3_snd_snd__h171305,
		_theResult_____3_snd_snd__h171846,
		_theResult_____3_snd_snd_fst__h215882,
		_theResult_____3_snd_snd_fst__h218672,
		_theResult_____3_snd_snd_snd__h171198,
		_theResult____h189212,
		_theResult____h198987,
		_theResult___snd__h216361,
		_theResult___snd__h216365,
		_theResult___snd__h216435,
		_theResult___snd__h216505,
		_theResult___snd__h216509,
		_theResult___snd__h216580,
		_theResult___snd__h219149,
		_theResult___snd__h219153,
		_theResult___snd__h219223,
		_theResult___snd__h219293,
		_theResult___snd__h219297,
		_theResult___snd__h219368,
		_theResult___snd_final_result__h198995,
		_theResult___snd_snd__h216246,
		_theResult___snd_snd__h219036,
		_theResult___snd_snd_snd_fst__h216296,
		_theResult___snd_snd_snd_fst__h216298,
		_theResult___snd_snd_snd_fst__h216302,
		_theResult___snd_snd_snd_fst__h216330,
		_theResult___snd_snd_snd_fst__h216379,
		_theResult___snd_snd_snd_fst__h216404,
		_theResult___snd_snd_snd_fst__h216442,
		_theResult___snd_snd_snd_fst__h216446,
		_theResult___snd_snd_snd_fst__h216473,
		_theResult___snd_snd_snd_fst__h216523,
		_theResult___snd_snd_snd_fst__h216548,
		_theResult___snd_snd_snd_fst__h219084,
		_theResult___snd_snd_snd_fst__h219086,
		_theResult___snd_snd_snd_fst__h219090,
		_theResult___snd_snd_snd_fst__h219118,
		_theResult___snd_snd_snd_fst__h219167,
		_theResult___snd_snd_snd_fst__h219192,
		_theResult___snd_snd_snd_fst__h219230,
		_theResult___snd_snd_snd_fst__h219234,
		_theResult___snd_snd_snd_fst__h219261,
		_theResult___snd_snd_snd_fst__h219311,
		_theResult___snd_snd_snd_fst__h219336,
		_theResult___snd_snd_snd_snd_fst__h216240,
		_theResult___snd_snd_snd_snd_fst__h219030,
		final_result___1__h215643,
		final_result___1__h215675,
		final_result___1__h215764,
		final_result___1__h216306,
		final_result___1__h216905,
		final_result___1__h216935,
		final_result___1__h218433,
		final_result___1__h218465,
		final_result___1__h218554,
		final_result___1__h219094,
		final_result___1__h219691,
		final_result___1__h219721,
		final_result___2__h215925,
		final_result___2__h216866,
		final_result___2__h218714,
		final_result___2__h219652,
		final_result___3__h215877,
		final_result___3__h218667,
		final_result__h215276,
		final_result__h218063,
		final_result__h231448,
		final_result__h231471,
		final_result__h271899,
		final_result__h78552,
		getMant64_argwget_BITS_127_TO_64__q26,
		getMant64_argwget_BITS_191_TO_128__q25,
		getMant64_argwget_BITS_63_TO_0__q27,
		inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24,
		lv_final_output__h171199,
		lv_final_output__h171256,
		lv_final_output__h171306,
		lv_final_output__h76589,
		lv_result__h178511,
		lv_result__h178552,
		new_value_final_result__h171104,
		res__h198979,
		setCanonicalNaN_argwget_BITS_127_TO_64__q40,
		setCanonicalNaN_argwget_BITS_191_TO_128__q39,
		setCanonicalNaN_argwget_BITS_63_TO_0__q41,
		wr_final_out_final_result__h198993,
		x_data__h175667,
		x_data__h177884,
		x_data__h198720,
		x_data__h199050,
		x_data__h213455,
		x_data__h213765,
		x_data__h215341,
		x_data__h218128,
		x_data__h231339,
		x_data__h231444,
		x_data__h296356,
		x_data__h296849,
		y_data__h297333;
  wire [62 : 0] IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d4458,
		IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__17_ETC___d3262,
		IF_NOT_inst_dpfpu_divider_rg_stage3_680_BITS_8_ETC___d1763,
		IF_inst_dpfpu_divider_rg_stage3_680_BIT_7_743__ETC___d1762;
  wire [61 : 0] IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d4663,
		IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d4665;
  wire [57 : 0] IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20,
		_remainder___1__h61617,
		_remainder__h61445,
		_theResult_____3__h271464,
		_theResult____h78212,
		lv_remainder__h78319,
		lv_remainder__h78409,
		lv_remainder__h78964,
		lv_remainder_temp__h78209,
		lv_root_rem__h78540,
		lv_root_temp_1__h78210,
		lv_root_temp_2__h78211,
		x__h78942;
  wire [55 : 0] IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d80,
		IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__794_ETC__q7,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d58,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d81,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q14,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q15,
		_denominator__h63203,
		_dividend___1__h61618,
		_dividend__h60858,
		_dividend__h60954,
		_dividend__h61447,
		_dividend__h61448,
		_numerator__h63204,
		_theResult___fst__h64591,
		_theResult___fst__h64610,
		_theResult___fst__h76277,
		_theResult___fst__h76281,
		inst_dpfpu_divider_int_div_wr_final_out_wget___ETC___d1579,
		inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10,
		inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q11,
		lv_extended_mantissa___1__h79029,
		lv_extended_mantissa__h78548,
		lv_quotient___1__h64627,
		lv_quotient_shiftL_expo__h64603,
		lv_quotient_shiftL_zerosMSB__h64605,
		x_lv_quotient__h64493;
  wire [54 : 0] IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__446_ETC___d6094,
		IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q38,
		IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d63,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d31,
		result_mantissa__h78539,
		x__h287567,
		x__h78249,
		x__h78512;
  wire [53 : 0] IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3259,
		IF_IF_IF_inst_dpfpu_divider_rg_stage3_680_BITS_ETC___d1730,
		IF_IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0_ETC___d3724,
		_theResult_____5__h171074,
		_theResult_____5__h76494,
		lv_man___1__h213006,
		lv_man__h203756,
		lv_rounded_mantissa___1__h171758,
		lv_rounded_mantissa__h171788,
		lv_rounded_quotient___1__h76872,
		lv_rounded_quotient__h76493,
		lv_rounded_quotient__h76907;
  wire [52 : 0] man1__h245717,
		man2__h245718,
		x__h234622,
		x__h234686,
		x__h260632,
		x__h260660;
  wire [51 : 0] IF_IF_IF_condFlags32_res_whas__361_THEN_condFl_ETC___d5963,
		IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4058,
		_theResult___fst__h218327,
		_theResult___fst__h218337,
		_theResult___fst__h218384,
		_theResult___fst__h218425,
		_theResult___fst__h218444,
		_theResult___fst__h218486,
		_theResult___fst__h218505,
		_theResult___fst__h218533,
		_theResult___fst__h218575,
		_theResult___fst__h218593,
		_theResult___fst__h218635,
		condFlags64_argwget_BITS_125_TO_74__q31,
		condFlags64_argwget_BITS_188_TO_137__q30,
		condFlags64_argwget_BITS_62_TO_11__q32,
		getMant64_reswget_BITS_103_TO_52__q35,
		getMant64_reswget_BITS_155_TO_104__q28,
		man__h225376,
		mant__h225316,
		mantissa___1__h270401,
		mantissa__h13817,
		mantissa__h198978,
		mantissa__h262442,
		mantissa__h262444,
		mantissa__h262454;
  wire [48 : 0] IF_IF_getExp64_res_whas__004_THEN_getExp64_res_ETC___d4328,
		IF_inst_spfm_add_sub_ff_input_register_read__6_ETC___d595,
		_theResult_____1_snd__h22126,
		_theResult_____1_snd__h22129,
		_theResult___snd_fst__h22166,
		lv_product_mantissa___1__h22097,
		lv_product_mantissa___1__h22112,
		lv_product_mantissa__h15043,
		lv_product_mantissa__h22067,
		lv_product_mantissa_shiftL_expo__h22075,
		lv_product_mantissa_shiftL_zerosMSB__h22077,
		man__h230345,
		man__h230444,
		x_lv_product_mantissa__h15111,
		y_avValue_snd_snd_fst__h230773;
  wire [36 : 0] IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4394,
		IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4396,
		IF_inst_spfpu_divider_rg_stage3_67_BIT_10_74_T_ETC___d360,
		y_avValue__h230111,
		y_avValue__h230260;
  wire [31 : 0] IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d3422,
		IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5145,
		IF_NOT_ff_input_first__327_BIT_3_380_381_AND_I_ETC___d3418,
		IF_NOT_ff_input_first__327_BIT_3_380_381_AND_I_ETC___d3420,
		IF_ff_input_first__327_BIT_3_380_AND_IF_condFl_ETC___d3419,
		_1_CONCAT_IF_getMant32_res_whas__869_THEN_getMa_ETC__q49,
		_1_CONCAT_IF_getMant64_res_whas__038_THEN_getMa_ETC__q29,
		_theResult_____1_fst__h12213,
		_theResult_____3_snd__h175723,
		_theResult_____3_snd__h176281,
		_theResult_____3_snd_snd__h58113,
		_theResult_____3_snd_snd__h58163,
		_theResult_____3_snd_snd__h58704,
		_theResult_____3_snd_snd_snd__h58056,
		_theResult____h184172,
		_theResult____h198974,
		_theResult___snd_fst__h231224,
		ff_inputD_OUT_BITS_176_TO_145__q1,
		final_result___215925_BITS_31_TO_0__q57,
		final_result___216866_BITS_31_TO_0__q56,
		final_result___218714_BITS_31_TO_0__q37,
		final_result___219652_BITS_31_TO_0__q36,
		final_result__h14155,
		final_result__h262888,
		getMant32_argwget_BITS_31_TO_0__q47,
		getMant32_argwget_BITS_63_TO_32__q46,
		getMant32_argwget_BITS_95_TO_64__q45,
		inp32___1__h199502,
		inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23,
		lv_final_output__h12191,
		lv_final_output__h58057,
		lv_final_output__h58114,
		lv_final_output__h58164,
		lv_result__h176325,
		lv_result__h176366,
		new_value_final_result__h57962,
		res___1__h231226,
		res__h184077,
		res__h230585,
		setCanonicalNaN_reswget_BITS_31_TO_0__q59,
		setCanonicalNaN_reswget_BITS_63_TO_32__q43,
		setCanonicalNaN_reswget_BITS_95_TO_64__q42,
		theResult__98974_SL_x99122_BITS_4_TO_0__q3,
		x1_avValue_final_result__h184082,
		x1_avValue_final_result__h189109,
		x1_avValue_final_result__h198653,
		x1_avValue_final_result__h198661,
		x1_avValue_final_result__h213402,
		x1_avValue_snd_fst__h231221,
		x__h213206,
		x__h213275,
		x__h213315,
		y_avValue_snd_fst__h231218;
  wire [30 : 0] IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1269,
		IF_NOT_inst_spfpu_divider_rg_stage3_67_BITS_50_ETC___d350,
		IF_inst_spfpu_divider_rg_stage3_67_BIT_7_30_OR_ETC___d349;
  wire [28 : 0] IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13,
		_remainder___1__h3158,
		_remainder__h2986,
		_theResult_____3__h262452,
		_theResult____h13815,
		lv_remainder__h13922,
		lv_remainder__h14012,
		lv_remainder__h14567,
		lv_remainder_temp__h13812,
		lv_root_rem__h14143,
		lv_root_temp_1__h13813,
		lv_root_temp_2__h13814,
		x__h14545;
  wire [26 : 0] IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__81__ETC__q5,
		_denominator__h4750,
		_dividend___1__h3159,
		_dividend__h2399,
		_dividend__h2495,
		_dividend__h2988,
		_dividend__h2989,
		_numerator__h4751,
		_theResult___fst__h11879,
		_theResult___fst__h11883,
		_theResult___fst__h6138,
		_theResult___fst__h6157,
		inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d195,
		lv_extended_mantissa___1__h14632,
		lv_extended_mantissa__h14151,
		lv_quotient___1__h6174,
		lv_quotient_shiftL_expo__h6150,
		lv_quotient_shiftL_zerosMSB__h6152,
		x_lv_quotient__h6040;
  wire [25 : 0] IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__361_ETC___d5970,
		IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58,
		result_mantissa__h14142,
		x__h13852,
		x__h14115,
		x__h270430;
  wire [24 : 0] IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5050,
		IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5174,
		IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1266,
		IF_IF_IF_inst_spfpu_divider_rg_stage3_67_BITS__ETC___d317,
		_theResult_____5__h12096,
		_theResult_____5__h57932,
		lv_man___1__h189015,
		lv_man___1__h198554,
		lv_man__h184187,
		lv_man__h189227,
		lv_rounded_mantissa___1__h58616,
		lv_rounded_mantissa__h58646,
		lv_rounded_quotient___1__h12474,
		lv_rounded_quotient__h12095,
		lv_rounded_quotient__h12509;
  wire [23 : 0] IF_IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0_ETC___d4373,
		fman___1__h231247,
		fman__h230914,
		man1__h237381,
		man2__h237382,
		x__h232905,
		x__h232969,
		x__h244234,
		x__h244262;
  wire [22 : 0] IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d3889,
		_theResult___fst__h215537,
		_theResult___fst__h215547,
		_theResult___fst__h215594,
		_theResult___fst__h215635,
		_theResult___fst__h215654,
		_theResult___fst__h215696,
		_theResult___fst__h215715,
		_theResult___fst__h215743,
		_theResult___fst__h215785,
		_theResult___fst__h215803,
		_theResult___fst__h215845,
		condFlags32_argwget_BITS_30_TO_8__q52,
		condFlags32_argwget_BITS_61_TO_39__q51,
		condFlags32_argwget_BITS_92_TO_70__q50,
		getMant32_reswget_BITS_45_TO_23__q55,
		getMant32_reswget_BITS_68_TO_46__q48,
		value__h228628;
  wire [12 : 0] IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3246,
		IF_NOT_inst_dpfpu_divider_rg_stage3_680_BIT_13_ETC___d1750,
		_0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3189,
		_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1886,
		_1_MINUS_inst_dpfpu_divider_rg_stage2_450_BITS__ETC___d1455,
		_theResult_____1_fst__h94580,
		_theResult_____1_fst__h94583,
		_theResult_____4_snd_fst__h102468,
		_theResult___fst__h171386,
		_theResult___fst__h171390,
		_theResult___fst__h94536,
		_theResult___snd_fst__h76361,
		_theResult___snd_fst__h76371,
		_theResult___snd_fst__h76379,
		_theResult___snd_fst__h76389,
		_theResult___snd_fst__h76391,
		exp1__h245725,
		exp1_temp__h234572,
		exp2__h245726,
		exp2_temp__h234573,
		exponent2__h102249,
		exponent3__h102228,
		exponent3__h102240,
		exponent_difference__h102263,
		inst_dpfm_add_sub_ff_input_register_read__873__ETC___d1877,
		inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1452,
		lv_exponent___1__h76997,
		lv_exponent___1__h77000,
		lv_exponent__h245727,
		lv_exponent__h76496,
		lv_exponent_inc_shift__h64601,
		lv_exponent_sub_shift__h64604,
		lv_exponent_sub_zerosMSB__h64606,
		lv_minuend__h102259,
		lv_product_exponent___1__h94553,
		lv_product_exponent__h94520,
		lv_product_exponent_inc_shift__h94528,
		lv_product_exponent_sub_shift__h94531,
		lv_product_exponent_sub_zerosMSB__h94533,
		lv_summed_exponent__h234574,
		resultant_exponent___1__h171787,
		resultant_exponent__h171056,
		resultant_exponent_inc__h171051,
		resultant_exponent_sub__h171049,
		resultant_exponent_sub_zerosMSB__h171054,
		shift_neg__h64602,
		shift_neg__h94529,
		x__h234759,
		x__h234761,
		x__h234763,
		x__h245786,
		x__h94616,
		x_lv_exponent__h64494,
		x_lv_product_exponent__h79503,
		y__h234760,
		y__h234762,
		y__h245785,
		y__h245787,
		y__h245788,
		y__h253213,
		y__h94615;
  wire [11 : 0] IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d6080,
		IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__794_ETC__q6,
		_theResult_____1_fst__h79030,
		exponent___1__h272098,
		lv_exp__h218052,
		result_exponent___1__h79052,
		result_exponent__h271463,
		x__h218208,
		x__h272069,
		x__h272100,
		x__h287811,
		x__h287813,
		y__h272070,
		y__h287812;
  wire [10 : 0] expo__h198977,
		expo__h198990,
		expo__h225315,
		expo__h225374,
		local_expo___1__h213029,
		shiftDist__h230344,
		x__h230465;
  wire [9 : 0] IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1253,
	       IF_NOT_inst_spfpu_divider_rg_stage3_67_BIT_77__ETC___d337,
	       _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1196,
	       _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473,
	       _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d129,
	       _theResult_____1_fst__h22125,
	       _theResult_____1_fst__h22128,
	       _theResult_____4_snd_fst__h26127,
	       _theResult___fst__h22081,
	       _theResult___fst__h58244,
	       _theResult___fst__h58248,
	       _theResult___snd_fst__h11963,
	       _theResult___snd_fst__h11973,
	       _theResult___snd_fst__h11981,
	       _theResult___snd_fst__h11991,
	       _theResult___snd_fst__h11993,
	       exp1__h237389,
	       exp1_temp__h232855,
	       exp2__h237390,
	       exp2_temp__h232856,
	       exponent2__h25908,
	       exponent3__h25887,
	       exponent3__h25899,
	       exponent_difference__h25922,
	       inst_spfm_add_sub_ff_input_register_read__60_B_ETC___d464,
	       inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d126,
	       lv_exponent___1__h12599,
	       lv_exponent___1__h12602,
	       lv_exponent__h12098,
	       lv_exponent__h237391,
	       lv_exponent_inc_shift__h6148,
	       lv_exponent_sub_shift__h6151,
	       lv_exponent_sub_zerosMSB__h6153,
	       lv_minuend__h25918,
	       lv_product_exponent___1__h22098,
	       lv_product_exponent__h22065,
	       lv_product_exponent_inc_shift__h22073,
	       lv_product_exponent_sub_shift__h22076,
	       lv_product_exponent_sub_zerosMSB__h22078,
	       lv_summed_exponent__h232857,
	       resultant_exponent___1__h58645,
	       resultant_exponent__h57914,
	       resultant_exponent_inc__h57909,
	       resultant_exponent_sub__h57907,
	       resultant_exponent_sub_zerosMSB__h57912,
	       shift_neg__h22074,
	       shift_neg__h6149,
	       x__h221191,
	       x__h22161,
	       x__h222383,
	       x__h233042,
	       x__h233044,
	       x__h233046,
	       x__h237450,
	       x_lv_exponent__h6041,
	       x_lv_product_exponent__h15110,
	       y__h22160,
	       y__h233043,
	       y__h233045,
	       y__h237449,
	       y__h237451,
	       y__h237452,
	       y__h240846;
  wire [8 : 0] IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d5956,
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__81__ETC__q4,
	       IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d5373,
	       IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d5447,
	       _theResult_____1_fst__h14633,
	       exponent___1__h263081,
	       exponent__h262438,
	       result_exponent___1__h14655,
	       result_exponent__h262451,
	       x__h263052,
	       x__h263083,
	       x__h270674,
	       x__h270676,
	       y__h263053,
	       y__h270675;
  wire [7 : 0] IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3840,
	       _theResult_____2__h230961,
	       expo___1__h231250,
	       expo__h184174,
	       expo__h189214,
	       expo__h230580,
	       local_expo___1__h189040,
	       local_expo___1__h198579,
	       lv_zeros_on_left__h148462,
	       x__h137335,
	       x__h171635;
  wire [6 : 0] lsb_zeros__h94526,
	       lv_leading_zeros__h271455,
	       lv_zeros_on_left__h47500,
	       msb_zeros___1__h94555,
	       msb_zeros__h79455,
	       msb_zeros__h94524,
	       x__h189392,
	       x__h203852,
	       x__h287541,
	       x__h42202,
	       x__h58493,
	       x__h94590;
  wire [5 : 0] IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d5371,
	       IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d5445,
	       lsb_zeros__h22071,
	       lsb_zeros__h64599,
	       lv_leading_zeros__h262443,
	       msb_zeros___1__h22100,
	       msb_zeros__h15062,
	       msb_zeros__h22069,
	       msb_zeros__h64451,
	       x__h184334,
	       x__h199122,
	       x__h22135,
	       x__h245793,
	       x__h253214,
	       x__h270404;
  wire [4 : 0] IF_NOT_IF_getExp64_res_whas__004_THEN_getExp64_ETC___d4346,
	       IF_ff_input_first__327_BIT_0_359_THEN_IF_NOT_I_ETC___d4271,
	       _theResult_____1_snd__h12192,
	       _theResult_____1_snd__h12203,
	       _theResult_____1_snd__h12214,
	       _theResult_____1_snd__h12231,
	       _theResult_____1_snd__h12552,
	       _theResult_____1_snd__h12614,
	       _theResult_____1_snd__h12632,
	       _theResult_____1_snd__h76590,
	       _theResult_____1_snd__h76601,
	       _theResult_____1_snd__h76612,
	       _theResult_____1_snd__h76629,
	       _theResult_____1_snd__h76950,
	       _theResult_____1_snd__h77012,
	       _theResult_____1_snd__h77030,
	       _theResult_____3_fst__h175722,
	       _theResult_____3_fst__h175863,
	       _theResult_____3_fst__h176280,
	       _theResult_____3_fst__h177914,
	       _theResult_____3_fst__h178055,
	       _theResult_____3_fst__h178466,
	       condFlags32_reswget_BITS_14_TO_10__q53,
	       condFlags32_reswget_BITS_9_TO_5__q54,
	       condFlags64_reswget_BITS_14_TO_10__q33,
	       condFlags64_reswget_BITS_9_TO_5__q34,
	       exception__h230578,
	       fflags__h14190,
	       fflags__h171095,
	       fflags__h184189,
	       fflags__h189229,
	       fflags__h262687,
	       fflags__h271698,
	       fflags__h57953,
	       fflags__h78587,
	       lsb_zeros__h6146,
	       msb_zeros__h5998,
	       result__h225187,
	       result__h229982,
	       result__h230988,
	       result__h231019,
	       wr_final_out_fflags__h198994,
	       x1_avValue_fflags__h184083,
	       x1_avValue_fflags__h189110,
	       x1_avValue_fflags__h198654,
	       x__h214852,
	       x__h215012,
	       x__h215109,
	       x__h217638,
	       x__h217798,
	       x__h217895,
	       x__h225379,
	       x__h237457,
	       x__h240847,
	       x_fflags__h175669,
	       x_fflags__h177886,
	       x_fflags__h198722,
	       x_fflags__h199052;
  wire [1 : 0] IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d5926,
	       IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d6021,
	       IF_inst_dpfm_add_sub_ff_stage2_read__388_BITS__ETC___d2804,
	       IF_inst_spfm_add_sub_ff_stage2_read__43_BITS_9_ETC___d985,
	       _theResult_____6_snd_snd__h148203,
	       _theResult_____6_snd_snd__h47241,
	       _theResult_____6_snd_snd_snd__h148250,
	       _theResult_____6_snd_snd_snd__h47288,
	       _theResult____h175880,
	       _theResult____h178072,
	       lv_compare_result__h175603,
	       lv_compare_result__h177827,
	       lv_result_is_infinity___1__h148204,
	       lv_result_is_infinity___1__h148266,
	       lv_result_is_infinity___1__h47242,
	       lv_result_is_infinity___1__h47304,
	       lv_result_is_zero___1__h148299,
	       lv_result_is_zero___1__h148303,
	       lv_result_is_zero___1__h47337,
	       lv_result_is_zero___1__h47341,
	       x__h148246,
	       x__h148287,
	       x__h148537,
	       x__h47284,
	       x__h47325,
	       x__h47575;
  wire IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_BI_ETC___d3292,
       IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_BI_ETC___d3308,
       IF_IF_inst_spfm_add_sub_ff_stage5_read__178_BI_ETC___d1299,
       IF_IF_inst_spfm_add_sub_ff_stage5_read__178_BI_ETC___d1315,
       IF_NOT_IF_condFlags32_res_whas__361_THEN_condF_ETC___d4202,
       IF_NOT_IF_condFlags32_res_whas__361_THEN_condF_ETC___d4254,
       IF_NOT_IF_condFlags64_res_whas__446_THEN_condF_ETC___d4238,
       IF_NOT_IF_condFlags64_res_whas__446_THEN_condF_ETC___d4268,
       IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3367,
       IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3845,
       IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d4251,
       IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d5335,
       IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d3452,
       IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d4014,
       IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d4265,
       IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d5413,
       IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d5328,
       IF_ff_input_first__327_BIT_1_552_THEN_NOT_IF_c_ETC___d3855,
       IF_ff_input_first__327_BIT_1_552_THEN_NOT_IF_c_ETC___d3860,
       IF_ff_input_first__327_BIT_1_552_THEN_NOT_IF_c_ETC___d4025,
       IF_ff_input_first__327_BIT_1_552_THEN_NOT_IF_c_ETC___d4030,
       IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3851,
       IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3853,
       IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3856,
       IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3858,
       IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d4172,
       IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4317,
       IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4318,
       IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4320,
       IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2345,
       IF_inst_dpfm_add_sub_ff_stage2_read__388_BIT_5_ETC___d2405,
       IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3197,
       IF_inst_spfm_add_sub_ff_input_register_read__6_ETC___d700,
       IF_inst_spfm_add_sub_ff_stage2_read__43_BIT_5__ETC___d760,
       IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1204,
       INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2106,
       INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d577,
       INV_1_MINUS_inst_dpfpu_divider_rg_stage2_450_B_ETC___d1574,
       INV_1_MINUS_inst_spfpu_divider_rg_stage2_24_BI_ETC___d190,
       NOT_0b0_CONCAT_IF_getExp64_res_whas__004_THEN__ETC___d4263,
       NOT_IF_condFlags32_res_whas__361_THEN_condFlag_ETC___d3862,
       NOT_IF_condFlags64_res_whas__446_THEN_condFlag_ETC___d4032,
       NOT_IF_condFlags64_res_whas__446_THEN_condFlag_ETC___d5226,
       NOT_IF_condFlags64_res_whas__446_THEN_condFlag_ETC___d5232,
       NOT_IF_getExp32_res_whas__836_THEN_getExp32_re_ETC___d4249,
       NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5267,
       NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5475,
       NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5495,
       NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5624,
       NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5626,
       NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5894,
       NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5919,
       NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5921,
       NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5990,
       NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6015,
       NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6017,
       NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6117,
       NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d4551,
       NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d4737,
       NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5248,
       NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5296,
       NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5307,
       NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5387,
       NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5457,
       NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6146,
       NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6177,
       NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6209,
       NOT_ff_input_first__327_BIT_2_541_545_AND_NOT__ETC___d3959,
       NOT_ff_input_first__327_BIT_2_541_545_AND_NOT__ETC___d4126,
       NOT_ff_input_first__327_BIT_2_541_545_AND_ff_i_ETC___d3966,
       NOT_ff_input_first__327_BIT_2_541_545_AND_ff_i_ETC___d4132,
       NOT_inst_dpfpu_divider_rg_stage2_450_BITS_21_T_ETC___d1654,
       NOT_inst_dpfpu_divider_rg_stage3_680_BITS_82_T_ETC___d1703,
       NOT_inst_dpfpu_divider_rg_stage3_680_BITS_82_T_ETC___d1738,
       NOT_inst_spfpu_divider_rg_stage2_24_BITS_18_TO_ETC___d241,
       NOT_inst_spfpu_divider_rg_stage3_67_BITS_50_TO_ETC___d290,
       NOT_inst_spfpu_divider_rg_stage3_67_BITS_50_TO_ETC___d325,
       _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2757,
       _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d938,
       _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3191,
       _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1198,
       _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4021,
       _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4023,
       _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4026,
       _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4028,
       _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4208,
       _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1887,
       _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d474,
       _1_MINUS_inst_dpfpu_divider_rg_stage2_450_BITS__ETC___d1456,
       _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d130,
       _theResult_____1__h102273,
       _theResult_____1__h25932,
       _theResult_____1_fst__h171922,
       _theResult_____1_fst__h216978,
       _theResult_____1_fst__h219764,
       _theResult_____1_fst__h58780,
       _theResult_____1_snd__h217046,
       _theResult_____1_snd__h219832,
       _theResult_____1_snd_snd_fst__h171950,
       _theResult_____1_snd_snd_fst__h58808,
       _theResult_____1_snd_snd_snd__h171951,
       _theResult_____1_snd_snd_snd__h58809,
       _theResult_____2_fst__h216653,
       _theResult_____2_fst__h219441,
       _theResult_____3_fst__h171193,
       _theResult_____3_fst__h171843,
       _theResult_____3_fst__h215879,
       _theResult_____3_fst__h218669,
       _theResult_____3_fst__h58051,
       _theResult_____3_fst__h58701,
       _theResult_____3_snd_fst__h171195,
       _theResult_____3_snd_fst__h171845,
       _theResult_____3_snd_fst__h58053,
       _theResult_____3_snd_fst__h58703,
       _theResult_____3_snd_snd_fst__h171197,
       _theResult_____3_snd_snd_fst__h58055,
       _theResult_____6__h171073,
       _theResult_____6__h57931,
       _theResult_____6_fst__h148200,
       _theResult_____6_fst__h47238,
       _theResult____h12093,
       _theResult____h184184,
       _theResult____h189224,
       _theResult____h203753,
       _theResult____h76491,
       _theResult___fst__h216243,
       _theResult___fst__h216364,
       _theResult___fst__h216434,
       _theResult___fst__h216508,
       _theResult___fst__h216579,
       _theResult___fst__h219033,
       _theResult___fst__h219152,
       _theResult___fst__h219222,
       _theResult___fst__h219296,
       _theResult___fst__h219367,
       _theResult___fst__h233283,
       _theResult___fst__h233291,
       _theResult___fst__h234996,
       _theResult___fst__h235004,
       _theResult___snd_fst__h215501,
       _theResult___snd_fst__h215539,
       _theResult___snd_fst__h215549,
       _theResult___snd_fst__h215596,
       _theResult___snd_fst__h215656,
       _theResult___snd_fst__h215717,
       _theResult___snd_fst__h215745,
       _theResult___snd_fst__h215805,
       _theResult___snd_fst__h218291,
       _theResult___snd_fst__h218329,
       _theResult___snd_fst__h218339,
       _theResult___snd_fst__h218386,
       _theResult___snd_fst__h218446,
       _theResult___snd_fst__h218507,
       _theResult___snd_fst__h218535,
       _theResult___snd_fst__h218595,
       and_sign__h175601,
       and_sign__h177825,
       ex_overflow__h171064,
       ex_overflow__h57922,
       expo3_zero__h102237,
       expo3_zero__h25896,
       ff_input_first__327_BITS_12_TO_8_328_EQ_0b100__ETC___d3353,
       ff_input_first__327_BITS_12_TO_8_328_EQ_0b10_5_ETC___d4552,
       ff_input_first__327_BITS_12_TO_8_328_EQ_0b10_5_ETC___d4738,
       ff_input_first__327_BITS_12_TO_8_328_EQ_0b1100_ETC___d4615,
       ff_input_first__327_BIT_0_359_AND_NOT_IF_condF_ETC___d5223,
       ff_input_first__327_BIT_208_465_XOR_ff_input_f_ETC___d3828,
       ff_input_first__327_BIT_2_541_AND_NOT_ff_input_ETC___d3973,
       ff_input_first__327_BIT_2_541_AND_NOT_ff_input_ETC___d4138,
       ff_input_first__327_BIT_2_541_AND_ff_input_fir_ETC___d3979,
       ff_input_first__327_BIT_2_541_AND_ff_input_fir_ETC___d4143,
       inexact__h184185,
       inexact__h189225,
       inexact__h203754,
       inst_dpfm_add_sub_ff_input_register_read__873__ETC___d1878,
       inst_dpfm_add_sub_ff_stage2_read__388_BIT_15_4_ETC___d2413,
       inst_dpfm_add_sub_ff_stage5_read__171_BIT_15_1_ETC___d3298,
       inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1453,
       inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1454,
       inst_spfm_add_sub_ff_input_register_read__60_B_ETC___d465,
       inst_spfm_add_sub_ff_stage2_read__43_BIT_15_66_ETC___d768,
       inst_spfm_add_sub_ff_stage5_read__178_BIT_14_1_ETC___d1305,
       inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127,
       inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d128,
       lv_inexact1__h215281,
       lv_inexact1__h218068,
       lv_inexact___1__h215874,
       lv_inexact___1__h218664,
       lv_inexact__h14150,
       lv_inexact__h171072,
       lv_inexact__h215274,
       lv_inexact__h218061,
       lv_inexact__h57930,
       lv_inexact__h78547,
       lv_invalid___2__h215876,
       lv_invalid___2__h218666,
       lv_invalid__h215256,
       lv_invalid__h215272,
       lv_invalid__h215283,
       lv_invalid__h218042,
       lv_invalid__h218059,
       lv_invalid__h218070,
       lv_op1_subnormal__h232846,
       lv_op1_subnormal__h234563,
       lv_op2_Nan__h175599,
       lv_op2_Nan__h177823,
       lv_op2_subnormal__h232847,
       lv_op2_subnormal__h234564,
       lv_round_up___1__h12403,
       lv_round_up___1__h12439,
       lv_round_up___1__h171504,
       lv_round_up___1__h171726,
       lv_round_up___1__h215959,
       lv_round_up___1__h216616,
       lv_round_up___1__h218749,
       lv_round_up___1__h219404,
       lv_round_up___1__h230735,
       lv_round_up___1__h230874,
       lv_round_up___1__h58362,
       lv_round_up___1__h58584,
       lv_round_up___1__h76801,
       lv_round_up___1__h76837,
       lv_roundup___1__h14213,
       lv_roundup___1__h14595,
       lv_roundup___1__h188943,
       lv_roundup___1__h188980,
       lv_roundup___1__h198482,
       lv_roundup___1__h198519,
       lv_roundup___1__h212935,
       lv_roundup___1__h212971,
       lv_roundup___1__h78610,
       lv_roundup___1__h78992,
       lv_sign__h198970,
       lv_sticky___1__h6175,
       lv_sticky___1__h64628,
       lv_sticky__h14148,
       lv_sticky__h171070,
       lv_sticky__h215279,
       lv_sticky__h218066,
       lv_sticky__h230241,
       lv_sticky__h230587,
       lv_sticky__h57928,
       lv_sticky__h78545,
       op_xor_sign3__h102238,
       op_xor_sign3__h25897,
       or_sign__h175600,
       or_sign__h177824,
       quiet_nan_two__h232851,
       quiet_nan_two__h234568,
       sign2__h102225,
       sign2__h25884,
       sign3__h102227,
       sign3__h25886,
       sign__h203751,
       x__h101979,
       x__h102010,
       x__h102040,
       x__h102379,
       x__h102391,
       x__h12021,
       x__h12026,
       x__h12248,
       x__h12416,
       x__h12451,
       x__h12453,
       x__h14504,
       x__h14619,
       x__h148123,
       x__h148130,
       x__h148238,
       x__h148278,
       x__h148280,
       x__h148282,
       x__h148283,
       x__h148311,
       x__h148323,
       x__h148353,
       x__h171656,
       x__h171738,
       x__h184203,
       x__h188956,
       x__h189243,
       x__h198495,
       x__h203772,
       x__h212948,
       x__h216217,
       x__h216628,
       x__h219007,
       x__h219416,
       x__h230785,
       x__h230886,
       x__h230888,
       x__h233097,
       x__h233360,
       x__h233366,
       x__h233415,
       x__h233428,
       x__h233518,
       x__h234810,
       x__h235073,
       x__h235079,
       x__h235127,
       x__h235140,
       x__h235230,
       x__h244292,
       x__h244356,
       x__h244370,
       x__h244375,
       x__h25638,
       x__h25669,
       x__h25699,
       x__h26038,
       x__h26050,
       x__h260742,
       x__h260756,
       x__h260761,
       x__h293893,
       x__h47161,
       x__h47168,
       x__h47276,
       x__h47316,
       x__h47318,
       x__h47320,
       x__h47321,
       x__h47349,
       x__h47361,
       x__h47391,
       x__h58514,
       x__h58596,
       x__h76419,
       x__h76424,
       x__h76646,
       x__h76814,
       x__h76849,
       x__h76851,
       x__h78901,
       x__h79016,
       y__h102392,
       y__h12415,
       y__h12452,
       y__h14225,
       y__h14607,
       y__h148279,
       y__h148281,
       y__h148324,
       y__h171516,
       y__h171752,
       y__h188955,
       y__h188993,
       y__h198494,
       y__h198532,
       y__h212947,
       y__h212984,
       y__h215971,
       y__h216641,
       y__h218761,
       y__h219429,
       y__h230747,
       y__h233429,
       y__h233431,
       y__h233475,
       y__h235141,
       y__h235143,
       y__h235187,
       y__h26051,
       y__h262701,
       y__h262722,
       y__h271712,
       y__h271733,
       y__h47317,
       y__h47319,
       y__h47362,
       y__h58374,
       y__h58610,
       y__h76813,
       y__h76850,
       y__h78622,
       y__h79004,
       y_avValue_snd_snd_snd__h230821,
       y_avValue_snd_snd_snd_snd_snd_snd__h230817;

  // action method _start
  assign RDY__start = !rg_multicycle_op && ff_input_FULL_N ;
  assign CAN_FIRE__start = !rg_multicycle_op && ff_input_FULL_N ;
  assign WILL_FIRE__start = EN__start ;

  // action method tx_output_notFull
  assign CAN_FIRE_tx_output_notFull = 1'd1 ;
  assign WILL_FIRE_tx_output_notFull = 1'd1 ;

  // action method tx_output_enq_rdy
  assign CAN_FIRE_tx_output_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_output_enq_rdy = 1'd1 ;

  // value method tx_output_enq_ena
  assign tx_output_enq_ena = tx_fbox_out_w_ena_whas ;

  // value method tx_output_enq_data
  always@(MUX_tx_fbox_out_w_data_wset_1__SEL_1 or
	  MUX_tx_fbox_out_w_data_wset_1__VAL_1 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_divider or
	  MUX_tx_fbox_out_w_data_wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider or
	  MUX_tx_fbox_out_w_data_wset_1__VAL_3 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt or
	  MUX_tx_fbox_out_w_data_wset_1__VAL_4 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt or
	  MUX_tx_fbox_out_w_data_wset_1__VAL_5 or
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub or
	  MUX_tx_fbox_out_w_data_wset_1__VAL_6 or
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub or
	  MUX_tx_fbox_out_w_data_wset_1__VAL_7)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tx_fbox_out_w_data_wset_1__SEL_1:
	  tx_output_enq_data = MUX_tx_fbox_out_w_data_wset_1__VAL_1;
      WILL_FIRE_RL_rl_get_output_from_spfpu_divider:
	  tx_output_enq_data = MUX_tx_fbox_out_w_data_wset_1__VAL_2;
      WILL_FIRE_RL_rl_get_output_from_dpfpu_divider:
	  tx_output_enq_data = MUX_tx_fbox_out_w_data_wset_1__VAL_3;
      WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt:
	  tx_output_enq_data = MUX_tx_fbox_out_w_data_wset_1__VAL_4;
      WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt:
	  tx_output_enq_data = MUX_tx_fbox_out_w_data_wset_1__VAL_5;
      WILL_FIRE_RL_rl_get_output_from_fm_add_sub:
	  tx_output_enq_data = MUX_tx_fbox_out_w_data_wset_1__VAL_6;
      WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub:
	  tx_output_enq_data = MUX_tx_fbox_out_w_data_wset_1__VAL_7;
      default: tx_output_enq_data =
		   70'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // action method flush
  assign RDY_flush = 1'd1 ;
  assign CAN_FIRE_flush = 1'd1 ;
  assign WILL_FIRE_flush = EN_flush ;

  // value method fpu_ready
  assign fpu_ready = !rg_multicycle_op && !ff_input_EMPTY_N ;
  assign RDY_fpu_ready = 1'd1 ;

  // submodule ff_input
  FIFO1 #(.width(32'd209), .guarded(32'd1)) ff_input(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ff_input_D_IN),
						     .ENQ(ff_input_ENQ),
						     .DEQ(ff_input_DEQ),
						     .CLR(ff_input_CLR),
						     .D_OUT(ff_input_D_OUT),
						     .FULL_N(ff_input_FULL_N),
						     .EMPTY_N(ff_input_EMPTY_N));

  // rule RL_rl_get_output_from_spfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     tx_output_enq_rdy_b && inst_spfpu_sqrt_ff_final_out[37] &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	     !WILL_FIRE_RL_start_stage ;

  // rule RL_rl_get_output_from_dpfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt =
	     tx_output_enq_rdy_b && inst_dpfpu_sqrt_ff_final_out[69] &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	     !WILL_FIRE_RL_start_stage ;

  // rule RL_flush_fifo
  assign CAN_FIRE_RL_flush_fifo = EN_flush ;
  assign WILL_FIRE_RL_flush_fifo = EN_flush ;

  // rule RL_inst_spfpu_divider_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_divider_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     inst_spfpu_divider_int_div_rg_state == 6'd0 &&
	     inst_spfpu_divider_rg_state_handler == 2'd1 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // rule RL_inst_spfpu_divider_rl_stage4
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 =
	     inst_spfpu_divider_rg_state_handler == 2'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 ;

  // rule RL_rl_get_output_from_spfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_divider =
	     tx_output_enq_rdy_b &&
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_divider &&
	     !WILL_FIRE_RL_start_stage ;

  // rule RL_inst_spfpu_divider_int_div_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_divider_int_div_stage_1
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     inst_spfpu_divider_int_div_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // rule RL_inst_spfpu_divider_int_div_recursive_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     inst_spfpu_divider_int_div_rg_state > 6'd1 &&
	     inst_spfpu_divider_int_div_rg_state <= 6'd12 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ;

  // rule RL_inst_spfpu_divider_int_div_end_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     inst_spfpu_divider_int_div_rg_state == 6'd13 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage ;

  // rule __me_check_0
  assign CAN_FIRE___me_check_0 = 1'b1 ;
  assign WILL_FIRE___me_check_0 = 1'b1 ;

  // rule __me_check_1
  assign CAN_FIRE___me_check_1 = 1'b1 ;
  assign WILL_FIRE___me_check_1 = 1'b1 ;

  // rule __me_check_2
  assign CAN_FIRE___me_check_2 = 1'b1 ;
  assign WILL_FIRE___me_check_2 = 1'b1 ;

  // rule RL_inst_spfpu_divider_rl_stage3
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage &&
	     inst_spfpu_divider_rg_state_handler == 2'd2 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // rule __me_check_4
  assign CAN_FIRE___me_check_4 = 1'b1 ;
  assign WILL_FIRE___me_check_4 = 1'b1 ;

  // rule __me_check_5
  assign CAN_FIRE___me_check_5 = 1'b1 ;
  assign WILL_FIRE___me_check_5 = 1'b1 ;

  // rule RL_inst_spfpu_sqrt_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_sqrt_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     inst_spfpu_sqrt_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;

  // rule RL_inst_spfpu_sqrt_rl_inter_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     inst_spfpu_sqrt_rg_state > 6'd1 &&
	     inst_spfpu_sqrt_rg_state < 6'd25 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ;

  // rule RL_inst_spfpu_sqrt_rl_final_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     inst_spfpu_sqrt_rg_state == 6'd25 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;

  // rule __me_check_9
  assign CAN_FIRE___me_check_9 = 1'b1 ;
  assign WILL_FIRE___me_check_9 = 1'b1 ;

  // rule __me_check_10
  assign CAN_FIRE___me_check_10 = 1'b1 ;
  assign WILL_FIRE___me_check_10 = 1'b1 ;

  // rule __me_check_11
  assign CAN_FIRE___me_check_11 = 1'b1 ;
  assign WILL_FIRE___me_check_11 = 1'b1 ;

  // rule RL_inst_spfm_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_flush = EN_flush ;

  // rule RL_inst_spfm_add_sub_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     inst_spfm_add_sub_rg_state_handler == 3'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // rule RL_inst_spfm_add_sub_rl_stage_3
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 =
	     inst_spfm_add_sub_rg_state_handler == 3'd2 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ;

  // rule RL_inst_spfm_add_sub_rl_stage4
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 =
	     inst_spfm_add_sub_rg_state_handler == 3'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // rule RL_inst_spfm_add_sub_rl_stage_5_final_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     inst_spfm_add_sub_rg_state_handler == 3'd4 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_rl_get_output_from_fm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_fm_add_sub =
	     tx_output_enq_rdy_b &&
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_fm_add_sub &&
	     !WILL_FIRE_RL_start_stage ;

  // rule RL_inst_dpfpu_divider_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_divider_rl_stage2
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 =
	     inst_dpfpu_divider_int_div_rg_state == 6'd0 &&
	     inst_dpfpu_divider_rg_state_handler == 2'd1 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 ;

  // rule RL_inst_dpfpu_divider_rl_stage4
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 =
	     inst_dpfpu_divider_rg_state_handler == 2'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 ;

  // rule RL_rl_get_output_from_dpfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_divider =
	     tx_output_enq_rdy_b &&
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	     !WILL_FIRE_RL_start_stage ;

  // rule RL_inst_dpfpu_divider_int_div_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_divider_int_div_stage_1
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 =
	     inst_dpfpu_divider_int_div_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;

  // rule RL_inst_dpfpu_divider_int_div_recursive_stage
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage =
	     inst_dpfpu_divider_int_div_rg_state > 6'd1 &&
	     inst_dpfpu_divider_int_div_rg_state <= 6'd26 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ;

  // rule RL_inst_dpfpu_divider_int_div_end_stage
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage =
	     inst_dpfpu_divider_int_div_rg_state == 6'd27 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage ;

  // rule __me_check_18
  assign CAN_FIRE___me_check_18 = 1'b1 ;
  assign WILL_FIRE___me_check_18 = 1'b1 ;

  // rule __me_check_19
  assign CAN_FIRE___me_check_19 = 1'b1 ;
  assign WILL_FIRE___me_check_19 = 1'b1 ;

  // rule __me_check_20
  assign CAN_FIRE___me_check_20 = 1'b1 ;
  assign WILL_FIRE___me_check_20 = 1'b1 ;

  // rule RL_inst_dpfpu_divider_rl_stage3
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage &&
	     inst_dpfpu_divider_rg_state_handler == 2'd2 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // rule __me_check_22
  assign CAN_FIRE___me_check_22 = 1'b1 ;
  assign WILL_FIRE___me_check_22 = 1'b1 ;

  // rule __me_check_23
  assign CAN_FIRE___me_check_23 = 1'b1 ;
  assign WILL_FIRE___me_check_23 = 1'b1 ;

  // rule RL_inst_dpfpu_sqrt_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_sqrt_rl_stage2
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 =
	     inst_dpfpu_sqrt_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ;

  // rule RL_inst_dpfpu_sqrt_rl_inter_stage
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage =
	     inst_dpfpu_sqrt_rg_state > 6'd1 &&
	     inst_dpfpu_sqrt_rg_state < 6'd54 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ;

  // rule RL_inst_dpfpu_sqrt_rl_final_stage
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage =
	     inst_dpfpu_sqrt_rg_state == 6'd54 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ;

  // rule __me_check_27
  assign CAN_FIRE___me_check_27 = 1'b1 ;
  assign WILL_FIRE___me_check_27 = 1'b1 ;

  // rule __me_check_28
  assign CAN_FIRE___me_check_28 = 1'b1 ;
  assign WILL_FIRE___me_check_28 = 1'b1 ;

  // rule __me_check_29
  assign CAN_FIRE___me_check_29 = 1'b1 ;
  assign WILL_FIRE___me_check_29 = 1'b1 ;

  // rule RL_inst_dpfm_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_flush = EN_flush ;

  // rule RL_inst_dpfm_add_sub_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage =
	     inst_dpfm_add_sub_rg_state_handler == 3'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ;

  // rule RL_inst_dpfm_add_sub_rl_stage_3
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 =
	     inst_dpfm_add_sub_rg_state_handler == 3'd2 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ;

  // rule RL_inst_dpfm_add_sub_rl_stage4
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 =
	     inst_dpfm_add_sub_rg_state_handler == 3'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // rule RL_inst_dpfm_add_sub_rl_stage_5_final_stage
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage =
	     inst_dpfm_add_sub_rg_state_handler == 3'd4 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_start_stage
  assign CAN_FIRE_RL_start_stage =
	     ff_input_EMPTY_N && tx_output_enq_rdy_b &&
	     inst_spfpu_sqrt_rg_state == 6'd0 &&
	     inst_dpfpu_sqrt_rg_state == 6'd0 ;
  assign WILL_FIRE_RL_start_stage = CAN_FIRE_RL_start_stage ;

  // rule RL_rl_get_output_from_dpfm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub =
	     tx_output_enq_rdy_b &&
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub &&
	     !WILL_FIRE_RL_start_stage ;

  // rule __me_check_37
  assign CAN_FIRE___me_check_37 = 1'b1 ;
  assign WILL_FIRE___me_check_37 = 1'b1 ;

  // rule __me_check_38
  assign CAN_FIRE___me_check_38 = 1'b1 ;
  assign WILL_FIRE___me_check_38 = 1'b1 ;

  // rule __me_check_39
  assign CAN_FIRE___me_check_39 = 1'b1 ;
  assign WILL_FIRE___me_check_39 = 1'b1 ;

  // rule __me_check_40
  assign CAN_FIRE___me_check_40 = 1'b1 ;
  assign WILL_FIRE___me_check_40 = 1'b1 ;

  // rule __me_check_41
  assign CAN_FIRE___me_check_41 = 1'b1 ;
  assign WILL_FIRE___me_check_41 = 1'b1 ;

  // rule RL_inst_spfpu_sqrt_ff_final_out__dreg_update
  assign CAN_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;

  // rule RL_inst_dpfpu_sqrt_ff_final_out__dreg_update
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5387 ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 =
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;
  assign MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5626 ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5990 ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6017 ;
  assign MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6015 ;
  assign MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5307 ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 =
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;
  assign MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5475 ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5894 ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5921 ;
  assign MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5919 ;
  assign MUX_rg_multicycle_op_write_1__SEL_2 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5296 ;
  assign MUX_tx_fbox_out_w_data_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] == 5'b10100 ||
	      ff_input_D_OUT[12:8] == 5'b00101 ||
	      ff_input_D_OUT[12:8] == 5'b11010 ||
	      ff_input_first__327_BITS_12_TO_8_328_EQ_0b100__ETC___d3353) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ;
  assign MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2 =
	     inst_dpfpu_divider_int_div_rg_state + 6'd1 ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 =
	     { inst_dpfpu_divider_int_div_rg_inter_stage, 2'd0 } ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 =
	     { inst_dpfpu_divider_int_div_rg_inter_stage, 2'd2 } ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3 =
	     { x__h63265, 2'd0 } ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1 =
	     (IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d3452 ||
	      ff_input_D_OUT[208] &&
	      (IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d3452 ||
	       condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	       !condFlags64_reswget_BITS_14_TO_10__q33[3])) ?
	       { 65'h17FF8000000000000, fflags__h271698 } :
	       ((condFlags64_reswget_BITS_14_TO_10__q33[1] &&
		 !ff_input_D_OUT[208]) ?
		  70'h2FFE00000000000000 :
		  { 1'd1, final_result__h271899, 5'd0 }) ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2 =
	     { 1'd1, final_result__h78552, fflags__h78587 } ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1 =
	     { mantissa__h271466,
	       x__h287567,
	       result_exponent__h271463,
	       ff_input_D_OUT[208],
	       _theResult_____3__h271464,
	       IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__446_ETC___d6094,
	       ff_input_D_OUT[5:3] } ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2 =
	     { mantissa__h78214,
	       x__h78249,
	       inst_dpfpu_sqrt_rg_inter_stage[128:116],
	       _theResult____h78212,
	       x__h78512,
	       inst_dpfpu_sqrt_rg_inter_stage[2:0] } ;
  assign MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1 =
	     inst_dpfpu_sqrt_rg_state + 6'd1 ;
  assign MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3 =
	     inst_spfpu_divider_int_div_rg_state + 6'd1 ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 =
	     { inst_spfpu_divider_int_div_rg_inter_stage, 2'd0 } ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 =
	     { inst_spfpu_divider_int_div_rg_inter_stage, 2'd3 } ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3 =
	     { x__h4812, 2'd0 } ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1 =
	     (IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3367 ||
	      ff_input_D_OUT[176] &&
	      (IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3367 ||
	       condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	       !condFlags32_reswget_BITS_14_TO_10__q53[3])) ?
	       { 33'h17FC00000, fflags__h262687 } :
	       ((condFlags32_reswget_BITS_14_TO_10__q53[1] &&
		 !ff_input_D_OUT[176]) ?
		  38'h2FF0000000 :
		  { 1'd1, final_result__h262888, 5'd0 }) ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2 =
	     { 1'd1, final_result__h14155, fflags__h14190 } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1 =
	     { mantissa__h262454,
	       x__h270430,
	       result_exponent__h262451,
	       ff_input_D_OUT[176],
	       _theResult_____3__h262452,
	       IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__361_ETC___d5970,
	       ff_input_D_OUT[5:3] } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2 =
	     { mantissa__h13817,
	       x__h13852,
	       inst_spfpu_sqrt_rg_inter_stage[67:58],
	       _theResult____h13815,
	       x__h14115,
	       inst_spfpu_sqrt_rg_inter_stage[2:0] } ;
  assign MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1 =
	     inst_spfpu_sqrt_rg_state + 6'd1 ;
  always@(ff_input_D_OUT or
	  IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d4476 or
	  x_data__h213455 or
	  x_data__h213765 or
	  IF_ff_input_first__327_BIT_0_359_THEN_IF_ff_in_ETC___d3539 or
	  IF_ff_input_first__327_BIT_0_359_THEN_IF_NOT_I_ETC___d4272 or
	  IF_ff_input_first__327_BIT_0_359_THEN_42949672_ETC___d3820)
  begin
    case (ff_input_D_OUT[12:8])
      5'b00100:
	  MUX_tx_fbox_out_w_data_wset_1__VAL_1 =
	      { ff_input_D_OUT[0] ? x_data__h213455 : x_data__h213765,
		6'd32 };
      5'b00101, 5'b10100:
	  MUX_tx_fbox_out_w_data_wset_1__VAL_1 =
	      IF_ff_input_first__327_BIT_0_359_THEN_IF_ff_in_ETC___d3539;
      5'b11000:
	  MUX_tx_fbox_out_w_data_wset_1__VAL_1 =
	      IF_ff_input_first__327_BIT_0_359_THEN_IF_NOT_I_ETC___d4272;
      5'b11010:
	  MUX_tx_fbox_out_w_data_wset_1__VAL_1 =
	      IF_ff_input_first__327_BIT_0_359_THEN_42949672_ETC___d3820;
      default: MUX_tx_fbox_out_w_data_wset_1__VAL_1 =
		   IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d4476;
    endcase
  end
  assign MUX_tx_fbox_out_w_data_wset_1__VAL_2 =
	     { x_data__h296356,
	       1'd1,
	       inst_spfpu_divider_wr_final_out_wget[4:0] } ;
  assign MUX_tx_fbox_out_w_data_wset_1__VAL_3 =
	     { inst_dpfpu_divider_wr_final_out_wget[68:5],
	       1'd1,
	       inst_dpfpu_divider_wr_final_out_wget[4:0] } ;
  assign MUX_tx_fbox_out_w_data_wset_1__VAL_4 =
	     { x_data__h296849, 1'd1, inst_spfpu_sqrt_ff_final_out[4:0] } ;
  assign MUX_tx_fbox_out_w_data_wset_1__VAL_5 =
	     { inst_dpfpu_sqrt_ff_final_out[68:5],
	       1'd1,
	       inst_dpfpu_sqrt_ff_final_out[4:0] } ;
  assign MUX_tx_fbox_out_w_data_wset_1__VAL_6 =
	     { y_data__h297333,
	       1'd1,
	       inst_spfm_add_sub_ff_final_out_wget[4:0] } ;
  assign MUX_tx_fbox_out_w_data_wset_1__VAL_7 =
	     { inst_dpfm_add_sub_ff_final_out_wget[68:5],
	       1'd1,
	       inst_dpfm_add_sub_ff_final_out_wget[4:0] } ;

  // inlined wires
  assign tx_fbox_out_w_ena_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] == 5'b10100 ||
	      ff_input_D_OUT[12:8] == 5'b00101 ||
	      ff_input_D_OUT[12:8] == 5'b11010 ||
	      ff_input_first__327_BITS_12_TO_8_328_EQ_0b100__ETC___d3353) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ;
  assign inst_spfpu_divider_int_div_wr_final_out_wget =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d81 } ;
  always@(MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1;
      WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2;
      WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
      default: inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
		   85'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign inst_spfpu_divider_wr_final_out_wget =
	     inst_spfpu_divider_rg_stage3[11] ?
	       { lv_final_output__h12191, _theResult_____1_snd__h12192 } :
	       IF_inst_spfpu_divider_rg_stage3_67_BIT_10_74_T_ETC___d360 ;
  assign inst_spfpu_sqrt_ff_final_out_1_wget =
	     MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2 ;
  assign inst_spfpu_sqrt_ff_final_out_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5894 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;
  assign inst_spfm_add_sub_ff_final_out_wget =
	     { new_value_final_result__h57962, fflags__h57953 } ;
  assign inst_dpfpu_divider_int_div_wr_final_out_wget =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1407 } ;
  always@(MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1;
      WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2;
      WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
      default: inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
		   172'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign inst_dpfpu_divider_wr_final_out_wget =
	     inst_dpfpu_divider_rg_stage3[11] ?
	       { lv_final_output__h76589, _theResult_____1_snd__h76590 } :
	       IF_inst_dpfpu_divider_rg_stage3_680_BIT_10_687_ETC___d1773 ;
  assign inst_dpfpu_sqrt_ff_final_out_1_wget =
	     MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1 ?
	       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1 :
	       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2 ;
  assign inst_dpfpu_sqrt_ff_final_out_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5990 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ;
  assign inst_dpfm_add_sub_ff_final_out_wget =
	     { new_value_final_result__h171104, fflags__h171095 } ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget =
	     { ff_input_D_OUT[176:145],
	       ff_input_D_OUT[1],
	       ff_input_D_OUT[5:3] } ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_res_wget =
	     { fflags__h184189,
	       !inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23[31],
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5174[23] ?
		 local_expo___1__h189040 :
		 expo__h184174,
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5174[22:0] } ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_arg_wget =
	     { ff_input_D_OUT[208:145],
	       ff_input_D_OUT[1],
	       ff_input_D_OUT[5:3] } ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_res_wget =
	     { fflags__h189229,
	       !inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24[63],
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5050[23] ?
		 local_expo___1__h198579 :
		 expo__h189214,
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5050[22:0] } ;
  assign condFlags32_arg_wget =
	     { getMant32_res_wget[68:46],
	       getExp32_res_wget[23:16],
	       IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d4665 } ;
  assign condFlags32_res_wget = { x__h214852, x__h215012, x__h215109 } ;
  assign getMant32_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { setCanonicalNaN_res_wget[95:32], 32'd0 } :
	       (ff_input_first__327_BITS_12_TO_8_328_EQ_0b1100_ETC___d4615 ?
		  { setCanonicalNaN_res_wget[95:64], 64'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b0 ||
		     ff_input_D_OUT[12:8] == 5'b00001) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { 32'h3F800000, setCanonicalNaN_res_wget[95:32] } :
		     ((ff_input_D_OUT[12:8] == 5'b00011 &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			setCanonicalNaN_res_wget :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { setCanonicalNaN_res_wget[95:64], 64'd0 } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { setCanonicalNaN_res_wget[95:32], 32'd0 } :
			      setCanonicalNaN_res_wget))))) ;
  assign getMant32_res_wget =
	     { getMant32_argwget_BITS_95_TO_64__q45[22:0],
	       getMant32_argwget_BITS_63_TO_32__q46[22:0],
	       getMant32_argwget_BITS_31_TO_0__q47[22:0] } ;
  assign getExp32_res_wget =
	     { getMant32_argwget_BITS_95_TO_64__q45[30:23],
	       getMant32_argwget_BITS_63_TO_32__q46[30:23],
	       getMant32_argwget_BITS_31_TO_0__q47[30:23] } ;
  assign condFlags64_arg_wget =
	     { getMant64_res_wget[155:104],
	       getExp64_res_wget[32:22],
	       IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d4804 } ;
  assign condFlags64_res_wget = { x__h217638, x__h217798, x__h217895 } ;
  assign getMant64_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[208:81], 64'd0 } :
	       (ff_input_first__327_BITS_12_TO_8_328_EQ_0b1100_ETC___d4615 ?
		  { ff_input_D_OUT[208:145], 128'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b0 ||
		     ff_input_D_OUT[12:8] == 5'b00001) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { 64'h3FF0000000000000, ff_input_D_OUT[208:81] } :
		     ((ff_input_D_OUT[12:8] == 5'b00011 &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			{ ff_input_D_OUT[208:81], 64'd0 } :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { ff_input_D_OUT[208:145], 128'd0 } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { ff_input_D_OUT[208:81], 64'd0 } :
			      ff_input_D_OUT[208:17]))))) ;
  assign getMant64_res_wget =
	     { getMant64_argwget_BITS_191_TO_128__q25[51:0],
	       getMant64_argwget_BITS_127_TO_64__q26[51:0],
	       getMant64_argwget_BITS_63_TO_0__q27[51:0] } ;
  assign getExp64_res_wget =
	     { getMant64_argwget_BITS_191_TO_128__q25[62:52],
	       getMant64_argwget_BITS_127_TO_64__q26[62:52],
	       getMant64_argwget_BITS_63_TO_0__q27[62:52] } ;
  assign setCanonicalNaN_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101 ||
	       ff_input_D_OUT[12:8] == 5'b00100) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[208:81], 64'hFFFFFFFFFFFFFFFF } :
	       ((ff_input_D_OUT[12:8] == 5'b11000 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  { ff_input_D_OUT[208:145], 128'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b11100 &&
		     ff_input_D_OUT[5:3] == 3'b001 ||
		     ff_input_D_OUT[12:8] == 5'b01000) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { ff_input_D_OUT[208:145],
		       128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } :
		     (((ff_input_D_OUT[12:8] == 5'b0 ||
			ff_input_D_OUT[12:8] == 5'b00001 ||
			ff_input_D_OUT[12:8] == 5'b00011) &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			{ ff_input_D_OUT[208:81], 64'hFFFFFFFFFFFFFFFF } :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { ff_input_D_OUT[208:145],
			     128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { ff_input_D_OUT[208:81],
				64'hFFFFFFFFFFFFFFFF } :
			      ff_input_D_OUT[208:17]))))) ;
  assign setCanonicalNaN_res_wget = { x__h213206, x__h213275, x__h213315 } ;

  // register inst_dpfm_add_sub_ff_input_register
  assign inst_dpfm_add_sub_ff_input_register_D_IN =
	     { _0_CONCAT_INV_IF_condFlags64_res_whas__446_THEN_ETC___d5398[105:0],
	       lv_summed_exponent__h234574,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 ff_input_D_OUT[208] :
		 ff_input_first__327_BIT_208_465_XOR_ff_input_f_ETC___d3828,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 ff_input_D_OUT[144] :
		 (ff_input_D_OUT[12:8] != 5'b00010 ||
		  ff_input_D_OUT[16:13] != 4'b0100) &&
		 ff_input_D_OUT[80],
	       getExp64_res_wget[10:0],
	       getMant64_res_wget[51:0],
	       x__h234810,
	       x__h235073,
	       x__h235079,
	       condFlags64_res_wget[4:0],
	       IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d5447 } ;
  assign inst_dpfm_add_sub_ff_input_register_EN =
	     MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 ;

  // register inst_dpfm_add_sub_ff_stage2
  assign inst_dpfm_add_sub_ff_stage2_D_IN =
	     { inst_dpfm_add_sub_ff_input_register[81],
	       inst_dpfm_add_sub_ff_input_register[4],
	       x_lv_product_exponent__h79503,
	       x_lv_product_mantissa__h79504,
	       inst_dpfm_add_sub_ff_input_register[80:17],
	       inst_dpfm_add_sub_ff_input_register[13:9],
	       inst_dpfm_add_sub_ff_input_register[5],
	       inst_dpfm_add_sub_ff_input_register[3:2],
	       inst_dpfm_add_sub_ff_input_register[8:6],
	       inst_dpfm_add_sub_ff_input_register[16],
	       inst_dpfm_add_sub_ff_input_register[14],
	       inst_dpfm_add_sub_ff_input_register[15],
	       x__h101979,
	       x__h102040,
	       inst_dpfm_add_sub_ff_input_register[1:0] } ;
  assign inst_dpfm_add_sub_ff_stage2_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ;

  // register inst_dpfm_add_sub_ff_stage4
  assign inst_dpfm_add_sub_ff_stage4_D_IN =
	     { x__h148238,
	       x__h102379,
	       _theResult_____1__h102273,
	       lv_minuend__h102259,
	       mantissa2__h102269,
	       mantissa3__h102270,
	       inst_dpfm_add_sub_ff_stage2[9:7],
	       x__h148130,
	       x__h148246,
	       x__h148287,
	       inst_dpfm_add_sub_ff_stage2[3:2],
	       x__h148311,
	       x__h148353,
	       inst_dpfm_add_sub_ff_stage2[5] } ;
  assign inst_dpfm_add_sub_ff_stage4_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ;

  // register inst_dpfm_add_sub_ff_stage5
  assign inst_dpfm_add_sub_ff_stage5_D_IN =
	     { inst_dpfm_add_sub_ff_stage4[345:333],
	       _theResult____h148460,
	       inst_dpfm_add_sub_ff_stage4[347],
	       inst_dpfm_add_sub_ff_stage4[12:10],
	       x__h148537,
	       inst_dpfm_add_sub_ff_stage4[9:0],
	       lv_zeros_on_left__h148462 } ;
  assign inst_dpfm_add_sub_ff_stage5_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // register inst_dpfm_add_sub_rg_state_handler
  always@(MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage or
	  EN_flush)
  case (1'b1)
    MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd1;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd0;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd4;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd3;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd2;
    EN_flush: inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd0;
    default: inst_dpfm_add_sub_rg_state_handler_D_IN =
		 3'bxxx /* unspecified value */ ;
  endcase
  assign inst_dpfm_add_sub_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5387 ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // register inst_dpfpu_divider_int_div_rg_inter_stage
  assign inst_dpfpu_divider_int_div_rg_inter_stage_D_IN =
	     inst_dpfpu_divider_int_div_wr_final_out_wget ;
  assign inst_dpfpu_divider_int_div_rg_inter_stage_EN =
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;

  // register inst_dpfpu_divider_int_div_rg_state
  always@(WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage or
	  MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2 or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 or
	  EN_flush or WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2)
  case (1'b1)
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage:
	inst_dpfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    EN_flush: inst_dpfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_2;
    default: inst_dpfpu_divider_int_div_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_divider_int_div_rg_state_EN =
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage ||
	     EN_flush ;

  // register inst_dpfpu_divider_rg_stage1
  assign inst_dpfpu_divider_rg_stage1_D_IN =
	     { lv_exponent__h245727,
	       x__h260632,
	       x__h260660,
	       ff_input_first__327_BIT_208_465_XOR_ff_input_f_ETC___d3828,
	       IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d3452 ||
	       lv_op2_Nan__h177823 ||
	       condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       condFlags64_reswget_BITS_9_TO_5__q34[1] ||
	       condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q34[3],
	       x__h260742,
	       x__h260756,
	       x__h260761,
	       ff_input_D_OUT[5:3],
	       quiet_nan_two__h234568 } ;
  assign inst_dpfpu_divider_rg_stage1_EN =
	     MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 ;

  // register inst_dpfpu_divider_rg_stage2
  assign inst_dpfpu_divider_rg_stage2_D_IN =
	     { inst_dpfpu_divider_rg_stage1[127:115],
	       inst_dpfpu_divider_rg_stage1[8],
	       inst_dpfpu_divider_rg_stage1[6],
	       inst_dpfpu_divider_rg_stage1[7],
	       inst_dpfpu_divider_rg_stage1[5:0] } ;
  assign inst_dpfpu_divider_rg_stage2_EN =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 ;

  // register inst_dpfpu_divider_rg_stage3
  assign inst_dpfpu_divider_rg_stage3_D_IN =
	     { x_lv_quotient__h64493,
	       inst_dpfpu_divider_int_div_wr_final_out_wget[113:57],
	       x_lv_exponent__h64494,
	       inst_dpfpu_divider_rg_stage2[8:5],
	       x__h76419,
	       !inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1453,
	       x__h76424,
	       inst_dpfpu_divider_rg_stage2[4:1],
	       inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1453 &&
	       NOT_inst_dpfpu_divider_rg_stage2_450_BITS_21_T_ETC___d1654,
	       inst_dpfpu_divider_rg_stage2[0] } ;
  assign inst_dpfpu_divider_rg_stage3_EN =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // register inst_dpfpu_divider_rg_state_handler
  always@(MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd1;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd3;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd2;
    EN_flush: inst_dpfpu_divider_rg_state_handler_D_IN = 2'd0;
    default: inst_dpfpu_divider_rg_state_handler_D_IN =
		 2'bxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_divider_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5626 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // register inst_dpfpu_sqrt_ff_final_out
  assign inst_dpfpu_sqrt_ff_final_out_D_IN =
	     { inst_dpfpu_sqrt_ff_final_out_1_whas &&
	       inst_dpfpu_sqrt_ff_final_out_1_wget[69],
	       inst_dpfpu_sqrt_ff_final_out_1_wget[68:0] } ;
  assign inst_dpfpu_sqrt_ff_final_out_EN = 1'd1 ;

  // register inst_dpfpu_sqrt_rg_inter_stage
  assign inst_dpfpu_sqrt_rg_inter_stage_D_IN =
	     MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1 ?
	       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1 :
	       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2 ;
  assign inst_dpfpu_sqrt_rg_inter_stage_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6017 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ;

  // register inst_dpfpu_sqrt_rg_state
  always@(MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1 or
	  MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage:
	inst_dpfpu_sqrt_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    EN_flush: inst_dpfpu_sqrt_rg_state_D_IN = 6'd0;
    default: inst_dpfpu_sqrt_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_sqrt_rg_state_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6015 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ||
	     EN_flush ;

  // register inst_spfm_add_sub_ff_input_register
  assign inst_spfm_add_sub_ff_input_register_D_IN =
	     { _0_CONCAT_INV_IF_condFlags32_res_whas__361_THEN_ETC___d5318[47:0],
	       lv_summed_exponent__h232857,
	       IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d5328,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] :
		 (ff_input_D_OUT[12:8] != 5'b00010 ||
		  ff_input_D_OUT[16:13] != 4'b0100) &&
		 setCanonicalNaN_reswget_BITS_31_TO_0__q59[31],
	       getExp32_res_wget[7:0],
	       getMant32_res_wget[22:0],
	       x__h233097,
	       x__h233360,
	       x__h233366,
	       condFlags32_res_wget[4:0],
	       IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d5373 } ;
  assign inst_spfm_add_sub_ff_input_register_EN =
	     MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 ;

  // register inst_spfm_add_sub_ff_stage2
  assign inst_spfm_add_sub_ff_stage2_D_IN =
	     { inst_spfm_add_sub_ff_input_register[49],
	       inst_spfm_add_sub_ff_input_register[4],
	       x_lv_product_exponent__h15110,
	       x_lv_product_mantissa__h15111,
	       inst_spfm_add_sub_ff_input_register[48:17],
	       inst_spfm_add_sub_ff_input_register[13:9],
	       inst_spfm_add_sub_ff_input_register[5],
	       inst_spfm_add_sub_ff_input_register[3:2],
	       inst_spfm_add_sub_ff_input_register[8:6],
	       inst_spfm_add_sub_ff_input_register[16],
	       inst_spfm_add_sub_ff_input_register[14],
	       inst_spfm_add_sub_ff_input_register[15],
	       x__h25638,
	       x__h25699,
	       inst_spfm_add_sub_ff_input_register[1:0] } ;
  assign inst_spfm_add_sub_ff_stage2_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // register inst_spfm_add_sub_ff_stage4
  assign inst_spfm_add_sub_ff_stage4_D_IN =
	     { x__h47276,
	       x__h26038,
	       _theResult_____1__h25932,
	       lv_minuend__h25918,
	       mantissa2__h25928,
	       mantissa3__h25929,
	       inst_spfm_add_sub_ff_stage2[9:7],
	       x__h47168,
	       x__h47284,
	       x__h47325,
	       inst_spfm_add_sub_ff_stage2[3:2],
	       x__h47349,
	       x__h47391,
	       inst_spfm_add_sub_ff_stage2[5] } ;
  assign inst_spfm_add_sub_ff_stage4_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ;

  // register inst_spfm_add_sub_ff_stage5
  assign inst_spfm_add_sub_ff_stage5_D_IN =
	     { inst_spfm_add_sub_ff_stage4[168:159],
	       _theResult____h47498,
	       inst_spfm_add_sub_ff_stage4[170],
	       inst_spfm_add_sub_ff_stage4[12:10],
	       x__h47575,
	       inst_spfm_add_sub_ff_stage4[9:0],
	       lv_zeros_on_left__h47500 } ;
  assign inst_spfm_add_sub_ff_stage5_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // register inst_spfm_add_sub_rg_state_handler
  always@(MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage or
	  EN_flush)
  case (1'b1)
    MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd1;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd0;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd4;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd3;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd2;
    EN_flush: inst_spfm_add_sub_rg_state_handler_D_IN = 3'd0;
    default: inst_spfm_add_sub_rg_state_handler_D_IN =
		 3'bxxx /* unspecified value */ ;
  endcase
  assign inst_spfm_add_sub_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5307 ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  assign inst_spfpu_divider_int_div_rg_inter_stage_D_IN =
	     inst_spfpu_divider_int_div_wr_final_out_wget ;
  assign inst_spfpu_divider_int_div_rg_inter_stage_EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // register inst_spfpu_divider_int_div_rg_state
  always@(WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage or
	  MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3 or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 or
	  EN_flush or WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
  case (1'b1)
    WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage:
	inst_spfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3;
    WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3;
    EN_flush: inst_spfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3;
    default: inst_spfpu_divider_int_div_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_divider_int_div_rg_state_EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage ||
	     EN_flush ;

  // register inst_spfpu_divider_rg_stage1
  assign inst_spfpu_divider_rg_stage1_D_IN =
	     { lv_exponent__h237391,
	       x__h244234,
	       x__h244262,
	       x__h244292,
	       IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3367 ||
	       lv_op2_Nan__h175599 ||
	       condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       condFlags32_reswget_BITS_9_TO_5__q54[1] ||
	       condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q54[3],
	       x__h244356,
	       x__h244370,
	       x__h244375,
	       ff_input_D_OUT[5:3],
	       quiet_nan_two__h232851 } ;
  assign inst_spfpu_divider_rg_stage1_EN =
	     MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 ;

  // register inst_spfpu_divider_rg_stage2
  assign inst_spfpu_divider_rg_stage2_D_IN =
	     { inst_spfpu_divider_rg_stage1[66:57],
	       inst_spfpu_divider_rg_stage1[8],
	       inst_spfpu_divider_rg_stage1[6],
	       inst_spfpu_divider_rg_stage1[7],
	       inst_spfpu_divider_rg_stage1[5:0] } ;
  assign inst_spfpu_divider_rg_stage2_EN =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // register inst_spfpu_divider_rg_stage3
  assign inst_spfpu_divider_rg_stage3_D_IN =
	     { x_lv_quotient__h6040,
	       inst_spfpu_divider_int_div_wr_final_out_wget[55:28],
	       x_lv_exponent__h6041,
	       inst_spfpu_divider_rg_stage2[8:5],
	       x__h12021,
	       !inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127,
	       x__h12026,
	       inst_spfpu_divider_rg_stage2[4:1],
	       inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127 &&
	       NOT_inst_spfpu_divider_rg_stage2_24_BITS_18_TO_ETC___d241,
	       inst_spfpu_divider_rg_stage2[0] } ;
  assign inst_spfpu_divider_rg_stage3_EN =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // register inst_spfpu_divider_rg_state_handler
  always@(MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd1;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage3:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd3;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage4:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd0;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd2;
    EN_flush: inst_spfpu_divider_rg_state_handler_D_IN = 2'd0;
    default: inst_spfpu_divider_rg_state_handler_D_IN =
		 2'bxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_divider_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5475 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // register inst_spfpu_sqrt_ff_final_out
  assign inst_spfpu_sqrt_ff_final_out_D_IN =
	     { inst_spfpu_sqrt_ff_final_out_1_whas &&
	       inst_spfpu_sqrt_ff_final_out_1_wget[37],
	       inst_spfpu_sqrt_ff_final_out_1_wget[36:0] } ;
  assign inst_spfpu_sqrt_ff_final_out_EN = 1'd1 ;

  // register inst_spfpu_sqrt_rg_inter_stage
  assign inst_spfpu_sqrt_rg_inter_stage_D_IN =
	     MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2 ;
  assign inst_spfpu_sqrt_rg_inter_stage_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5921 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;

  // register inst_spfpu_sqrt_rg_state
  always@(MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1 or
	  MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage:
	inst_spfpu_sqrt_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    EN_flush: inst_spfpu_sqrt_rg_state_D_IN = 6'd0;
    default: inst_spfpu_sqrt_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_sqrt_rg_state_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5919 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ||
	     EN_flush ;

  // register rg_multicycle_op
  always@(WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub or
	  MUX_rg_multicycle_op_write_1__SEL_2 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider or
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_divider or
	  EN_flush or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
  case (1'b1)
    WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub:
	rg_multicycle_op_D_IN = 1'd0;
    MUX_rg_multicycle_op_write_1__SEL_2: rg_multicycle_op_D_IN = 1'd1;
    WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
    WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
    WILL_FIRE_RL_rl_get_output_from_spfpu_divider ||
    EN_flush ||
    WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt ||
    WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt:
	rg_multicycle_op_D_IN = 1'd0;
    default: rg_multicycle_op_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign rg_multicycle_op_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5296 ||
	     EN_flush ||
	     WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ;

  // submodule ff_input
  assign ff_input_D_IN = _start_m ;
  assign ff_input_ENQ = EN__start ;
  assign ff_input_DEQ = CAN_FIRE_RL_start_stage ;
  assign ff_input_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__361_ETC___d5970 =
	     _theResult_____3__h262452[28] ? 26'd0 : 26'd1 ;
  assign IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__446_ETC___d6094 =
	     _theResult_____3__h271464[57] ? 55'd0 : 55'd1 ;
  assign IF_0b0_CONCAT_IF_getExp64_res_whas__004_THEN_g_ETC___d4071 =
	     (x__h218208[10:0] == 11'd2047 &&
	      (ff_input_D_OUT[5:3] == 3'b100 ||
	       ff_input_D_OUT[5:3] == 3'b0 &&
	       getMant64_res_wget[155:104] != 52'd0)) ?
	       (ff_input_D_OUT[208] ?
		  IF_ff_input_first__327_BIT_1_552_THEN_0_ELSE_1_ETC___d3901 :
		  64'd1) :
	       64'd0 ;
  assign IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58 =
	     IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__361_ETC___d5970[0] ?
	       26'd1 :
	       26'd0 ;
  assign IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q38 =
	     IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__446_ETC___d6094[0] ?
	       55'd1 :
	       55'd0 ;
  assign IF_IF_IF_condFlags32_res_whas__361_THEN_condFl_ETC___d5963 =
	     IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d5956[0] ?
	       mantissa__h262444 :
	       mantissa___1__h270401 ;
  assign IF_IF_IF_condFlags64_res_whas__446_THEN_condFl_ETC___d6087 =
	     IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d6080[0] ?
	       mantissa__h271456 :
	       mantissa___1__h287538 ;
  assign IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3246 =
	     (_theResult_____5__h171074[53] ||
	      IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3214[159:158] ==
	      2'b0 &&
	      _theResult_____5__h171074[52]) ?
	       resultant_exponent___1__h171787 :
	       resultant_exponent__h171056 ;
  assign IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3259 =
	     _theResult_____5__h171074[53] ?
	       lv_rounded_mantissa__h171788 :
	       _theResult_____5__h171074 ;
  assign IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1389 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20[57] ?
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q21[113:1] :
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q22[113:1] ;
  assign IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1406 =
	     _remainder__h61445[57] ?
	       { _remainder___1__h61617, _dividend___1__h61618 } :
	       { _remainder__h61445, _dividend__h61448 } ;
  assign IF_IF_IF_inst_dpfpu_divider_rg_stage3_680_BITS_ETC___d1730 =
	     _theResult_____5__h76494[53] ?
	       lv_rounded_quotient__h76907 :
	       _theResult_____5__h76494 ;
  assign IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5050 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5046 ?
	       lv_man___1__h198554 :
	       lv_man__h189227 ;
  assign IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5174 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5170 ?
	       lv_man___1__h189015 :
	       lv_man__h184187 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1253 =
	     (_theResult_____5__h57932[24] ||
	      IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1221[72:71] ==
	      2'b0 &&
	      _theResult_____5__h57932[23]) ?
	       resultant_exponent___1__h58645 :
	       resultant_exponent__h57914 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1266 =
	     _theResult_____5__h57932[24] ?
	       lv_rounded_mantissa__h58646 :
	       _theResult_____5__h57932 ;
  assign IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d63 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13[28] ?
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q14[55:1] :
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q15[55:1] ;
  assign IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d80 =
	     _remainder__h2986[28] ?
	       { _remainder___1__h3158, _dividend___1__h3159 } :
	       { _remainder__h2986, _dividend__h2989 } ;
  assign IF_IF_IF_inst_spfpu_divider_rg_stage3_67_BITS__ETC___d317 =
	     _theResult_____5__h12096[24] ?
	       lv_rounded_quotient__h12509 :
	       _theResult_____5__h12096 ;
  assign IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d3422 =
	     IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3367 ?
	       setCanonicalNaN_res_wget[63:32] :
	       (lv_op2_Nan__h175599 ?
		  setCanonicalNaN_res_wget[95:64] :
		  IF_NOT_ff_input_first__327_BIT_3_380_381_AND_I_ETC___d3420) ;
  assign IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d3889 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[4] ||
	      IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3840[7] &&
	      !IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3845) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h215537 ;
  assign IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d4458 =
	     condFlags32_reswget_BITS_14_TO_10__q53[4] ?
	       { expo__h225374, man__h225376 } :
	       { expo__h225315, mant__h225316 } ;
  assign IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d4461 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[0]) ?
	       { result__h225187, 64'h7FF8000000000000 } :
	       { 5'd0,
		 setCanonicalNaN_reswget_BITS_95_TO_64__q42[31],
		 condFlags32_reswget_BITS_14_TO_10__q53[1] ?
		   63'h7FF0000000000000 :
		   IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d4458 } ;
  assign IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d4462 =
	     condFlags32_reswget_BITS_14_TO_10__q53[3] ?
	       { 5'b0,
		 setCanonicalNaN_reswget_BITS_95_TO_64__q42[31],
		 63'b0 } :
	       IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d4461 ;
  assign IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d5926 =
	     condFlags32_reswget_BITS_14_TO_10__q53[4] ? 2'd0 : 2'd1 ;
  assign IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d5956 =
	     x__h263052 - y__h263053 ;
  assign IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d3501 =
	     IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d3452 ?
	       ff_input_D_OUT[144:81] :
	       (lv_op2_Nan__h177823 ?
		  ff_input_D_OUT[208:145] :
		  IF_NOT_ff_input_first__327_BIT_3_380_381_AND_I_ETC___d3499) ;
  assign IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4058 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[4] ||
	      x__h218208[10] &&
	      !IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d4014) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h218327 ;
  assign IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4394 =
	     condFlags64_reswget_BITS_14_TO_10__q33[1] ?
	       { 5'd0, ff_input_D_OUT[208], 31'h7F800000 } :
	       (IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4317 ?
		  y_avValue__h230260 :
		  y_avValue__h230111) ;
  assign IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4396 =
	     condFlags64_reswget_BITS_14_TO_10__q33[3] ?
	       { 5'b0, ff_input_D_OUT[208], 31'b0 } :
	       ((condFlags64_reswget_BITS_14_TO_10__q33[2] ||
		 condFlags64_reswget_BITS_14_TO_10__q33[0]) ?
		  { result__h229982, 32'h7FC00000 } :
		  IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4394) ;
  assign IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d6021 =
	     condFlags64_reswget_BITS_14_TO_10__q33[4] ? 2'd0 : 2'd1 ;
  assign IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d6080 =
	     x__h272069 - y__h272070 ;
  assign IF_IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0_ETC___d3724 =
	     IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d3720 ?
	       lv_man___1__h213006 :
	       lv_man__h203756 ;
  assign IF_IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0_ETC___d4373 =
	     _theResult_____4___1__h230715 ?
	       fman___1__h231247 :
	       fman__h230914 ;
  assign IF_IF_getExp32_res_whas__836_THEN_getExp32_res_ETC___d3903 =
	     (getExp32_res_wget[23:16] == 8'd126 &&
	      (ff_input_D_OUT[5:3] == 3'b100 ||
	       ff_input_D_OUT[5:3] == 3'b0 &&
	       getMant32_res_wget[68:46] != 23'd0)) ?
	       (setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
		  IF_ff_input_first__327_BIT_1_552_THEN_0_ELSE_1_ETC___d3901 :
		  64'd1) :
	       64'd0 ;
  assign IF_IF_getExp64_res_whas__004_THEN_getExp64_res_ETC___d4328 =
	     IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4318 ?
	       49'd0 :
	       y_avValue_snd_snd_fst__h230773 ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage2_read__388_BI_ETC___d2429 =
	     mantissa_to_shift__h102262 >> exponent_difference__h102263 ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_BI_ETC___d3292 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3197 ?
	       (!resultant_exponent__h171056[12] ||
		inst_dpfm_add_sub_ff_stage5[8]) &&
	       !inst_dpfm_add_sub_ff_stage5[11] :
	       !inst_dpfm_add_sub_ff_stage5[11] ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_BI_ETC___d3308 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3197 ?
	       resultant_exponent__h171056[12] &&
	       !inst_dpfm_add_sub_ff_stage5[8] ||
	       inst_dpfm_add_sub_ff_stage5[11] :
	       inst_dpfm_add_sub_ff_stage5[11] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1357 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[113] ?
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q17[113:1] :
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q18[113:1] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1384 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19[112:0],
	       1'd0 } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1407 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[1] ?
	       IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1406 :
	       { IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1389,
		 !IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20[57] } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1357,
	       !inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[113] } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1357[112:55] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q21 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1384 +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       57'd0 } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q22 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1384 -
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       57'd0 } ;
  assign IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__794_ETC__q6 =
	     IF_inst_dpfpu_sqrt_rg_inter_stage_read__794_BI_ETC___d1848 ?
	       _theResult_____1_fst__h79030 :
	       inst_dpfpu_sqrt_rg_inter_stage[128:117] ;
  assign IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__794_ETC__q7 =
	     IF_inst_dpfpu_sqrt_rg_inter_stage_read__794_BI_ETC___d1848 ?
	       lv_extended_mantissa___1__h79029 :
	       lv_extended_mantissa__h78548 ;
  assign IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5021 =
	     _theResult____h189212 << x__h189392[5:0] ;
  assign IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5145 =
	     _theResult____h184172 << x__h184334[4:0] ;
  assign IF_IF_inst_spfm_add_sub_ff_stage2_read__43_BIT_ETC___d784 =
	     mantissa_to_shift__h25921 >> exponent_difference__h25922 ;
  assign IF_IF_inst_spfm_add_sub_ff_stage5_read__178_BI_ETC___d1299 =
	     IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1204 ?
	       (!resultant_exponent__h57914[9] ||
		inst_spfm_add_sub_ff_stage5[7]) &&
	       !inst_spfm_add_sub_ff_stage5[10] :
	       !inst_spfm_add_sub_ff_stage5[10] ;
  assign IF_IF_inst_spfm_add_sub_ff_stage5_read__178_BI_ETC___d1315 =
	     IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1204 ?
	       resultant_exponent__h57914[9] &&
	       !inst_spfm_add_sub_ff_stage5[7] ||
	       inst_spfm_add_sub_ff_stage5[10] :
	       inst_spfm_add_sub_ff_stage5[10] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d31 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[55] ?
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10[55:1] :
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q11[55:1] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d58 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12[54:0],
	       1'd0 } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d81 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[1] ?
	       IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d80 :
	       { IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d63,
		 !IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13[28] } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d31,
	       !inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[55] } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d31[54:26] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q14 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d58 +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       28'd0 } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q15 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d58 -
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       28'd0 } ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__81__ETC__q4 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_read__81_BIT_ETC___d435 ?
	       _theResult_____1_fst__h14633 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__81__ETC__q5 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_read__81_BIT_ETC___d435 ?
	       lv_extended_mantissa___1__h14632 :
	       lv_extended_mantissa__h14151 ;
  assign IF_NOT_IF_condFlags32_res_whas__361_THEN_condF_ETC___d4202 =
	     lv_invalid__h215283 | condFlags32_reswget_BITS_14_TO_10__q53[1] ;
  assign IF_NOT_IF_condFlags32_res_whas__361_THEN_condF_ETC___d4254 =
	     (!condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      NOT_IF_condFlags32_res_whas__361_THEN_condFlag_ETC___d3862) ?
	       lv_inexact___1__h215874 :
	       lv_inexact__h215274 ;
  assign IF_NOT_IF_condFlags64_res_whas__446_THEN_condF_ETC___d4238 =
	     lv_invalid__h218070 | condFlags64_reswget_BITS_14_TO_10__q33[1] ;
  assign IF_NOT_IF_condFlags64_res_whas__446_THEN_condF_ETC___d4268 =
	     (!condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      NOT_IF_condFlags64_res_whas__446_THEN_condFlag_ETC___d4032) ?
	       lv_inexact___1__h218664 :
	       lv_inexact__h218061 ;
  assign IF_NOT_IF_getExp64_res_whas__004_THEN_getExp64_ETC___d4346 =
	     (!IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4318 &&
	      IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4320 &&
	      x__h230886) ?
	       result__h231019 :
	       exception__h230578 ;
  assign IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__17_ETC___d3262 =
	     (ex_overflow__h171064 || inst_dpfm_add_sub_ff_stage5[12] ||
	      IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3246[10:0] ==
	      11'd2047) ?
	       ((inst_dpfm_add_sub_ff_stage5[22:20] == 3'b001 ||
		 inst_dpfm_add_sub_ff_stage5[22:20] == 3'b010 &&
		 !inst_dpfm_add_sub_ff_stage5[23] ||
		 inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 &&
		 inst_dpfm_add_sub_ff_stage5[23]) ?
		  63'h7FEFFFFFFFFFFFFF :
		  63'h7FF0000000000000) :
	       { IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3246[10:0],
		 IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3259[51:0] } ;
  assign IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1269 =
	     (ex_overflow__h57922 || inst_spfm_add_sub_ff_stage5[11] ||
	      IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1253[7:0] ==
	      8'd255) ?
	       ((inst_spfm_add_sub_ff_stage5[21:19] == 3'b001 ||
		 inst_spfm_add_sub_ff_stage5[21:19] == 3'b010 &&
		 !inst_spfm_add_sub_ff_stage5[22] ||
		 inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 &&
		 inst_spfm_add_sub_ff_stage5[22]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1253[7:0],
		 IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1266[22:0] } ;
  assign IF_NOT_ff_input_first__327_BIT_1_552_566_AND_f_ETC___d3700 =
	     _theResult____h198987 << x__h203852[5:0] ;
  assign IF_NOT_ff_input_first__327_BIT_3_380_381_AND_I_ETC___d3418 =
	     (!ff_input_D_OUT[3] && lv_compare_result__h175603 == 2'b01 ||
	      ff_input_D_OUT[3] && lv_compare_result__h175603 == 2'b10) ?
	       setCanonicalNaN_res_wget[95:64] :
	       setCanonicalNaN_res_wget[63:32] ;
  assign IF_NOT_ff_input_first__327_BIT_3_380_381_AND_I_ETC___d3420 =
	     (!ff_input_D_OUT[3] &&
	      condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ?
	       lv_result__h176325 :
	       IF_ff_input_first__327_BIT_3_380_AND_IF_condFl_ETC___d3419 ;
  assign IF_NOT_ff_input_first__327_BIT_3_380_381_AND_I_ETC___d3499 =
	     (!ff_input_D_OUT[3] &&
	      condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ?
	       lv_result__h178511 :
	       IF_ff_input_first__327_BIT_3_380_AND_IF_condFl_ETC___d3498 ;
  assign IF_NOT_inst_dpfpu_divider_rg_stage3_680_BITS_8_ETC___d1763 =
	     (NOT_inst_dpfpu_divider_rg_stage3_680_BITS_82_T_ETC___d1738 ||
	      inst_dpfpu_divider_rg_stage3[8]) ?
	       { 11'd0,
		 IF_IF_IF_inst_dpfpu_divider_rg_stage3_680_BITS_ETC___d1730[51:0] } :
	       IF_inst_dpfpu_divider_rg_stage3_680_BIT_7_743__ETC___d1762 ;
  assign IF_NOT_inst_dpfpu_divider_rg_stage3_680_BIT_13_ETC___d1750 =
	     (!inst_dpfpu_divider_rg_stage3[138] &&
	      IF_IF_IF_inst_dpfpu_divider_rg_stage3_680_BITS_ETC___d1730[52]) ?
	       lv_exponent___1__h76997 :
	       lv_exponent__h76496 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage3_67_BITS_50_ETC___d350 =
	     (NOT_inst_spfpu_divider_rg_stage3_67_BITS_50_TO_ETC___d325 ||
	      inst_spfpu_divider_rg_stage3[8]) ?
	       { 8'd0,
		 IF_IF_IF_inst_spfpu_divider_rg_stage3_67_BITS__ETC___d317[22:0] } :
	       IF_inst_spfpu_divider_rg_stage3_67_BIT_7_30_OR_ETC___d349 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage3_67_BIT_77__ETC___d337 =
	     (!inst_spfpu_divider_rg_stage3[77] &&
	      IF_IF_IF_inst_spfpu_divider_rg_stage3_67_BITS__ETC___d317[23]) ?
	       lv_exponent___1__h12599 :
	       lv_exponent__h12098 ;
  assign IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3367 =
	     condFlags32_reswget_BITS_14_TO_10__q53[2] |
	     condFlags32_reswget_BITS_14_TO_10__q53[0] ;
  assign IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3845 =
	     condFlags32_reswget_BITS_14_TO_10__q53[1] | lv_invalid__h215256 ;
  assign IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d4251 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[4] ||
	      IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3840[7] &&
	      !IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3845) &&
	     (!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ||
	      !ff_input_D_OUT[1] ||
	      NOT_IF_getExp32_res_whas__836_THEN_getExp32_re_ETC___d4249) ;
  assign IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d5335 =
	     condFlags32_reswget_BITS_9_TO_5__q54[0] |
	     condFlags32_reswget_BITS_9_TO_5__q54[2] ;
  assign IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d3452 =
	     condFlags64_reswget_BITS_14_TO_10__q33[2] |
	     condFlags64_reswget_BITS_14_TO_10__q33[0] ;
  assign IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d4014 =
	     condFlags64_reswget_BITS_14_TO_10__q33[1] | lv_invalid__h218042 ;
  assign IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d4265 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[4] ||
	      x__h218208[10] &&
	      !IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d4014) &&
	     (!ff_input_D_OUT[208] || !ff_input_D_OUT[1] ||
	      NOT_0b0_CONCAT_IF_getExp64_res_whas__004_THEN__ETC___d4263) ;
  assign IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d5413 =
	     condFlags64_reswget_BITS_9_TO_5__q34[0] |
	     condFlags64_reswget_BITS_9_TO_5__q34[2] ;
  assign IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d4663 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001 ||
	       ff_input_D_OUT[12:8] == 5'b00011) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant32_res_wget[45:23],
		 getExp32_res_wget[15:8],
		 getMant32_res_wget[22:0],
		 getExp32_res_wget[7:0] } :
	       ((ff_input_D_OUT[12:8] == 5'b01011 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  62'd0 :
		  { getMant32_res_wget[45:23],
		    getExp32_res_wget[15:8],
		    getMant32_res_wget[22:0],
		    getExp32_res_wget[7:0] }) ;
  assign IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d4802 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 getMant64_res_wget[51:0],
		 getExp64_res_wget[10:0] } :
	       IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d4801 ;
  assign IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d5328 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] :
	       x__h244292 ;
  assign IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d5373 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[5:3],
		 ff_input_D_OUT[8],
		 3'd0,
		 x__h233415,
		 x__h233518 } :
	       { ff_input_D_OUT[5:3],
		 IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d5371 } ;
  assign IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d5447 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[5:3],
		 ff_input_D_OUT[8],
		 3'd0,
		 x__h235127,
		 x__h235230 } :
	       { ff_input_D_OUT[5:3],
		 IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d5445 } ;
  assign IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d4476 =
	     (ff_input_D_OUT[12:8] == 5'b11100 &&
	      ff_input_D_OUT[5:3] == 3'b001) ?
	       { 54'd0, ff_input_D_OUT[0] ? x__h221191 : x__h222383, 6'd32 } :
	       ((ff_input_D_OUT[12:8] == 5'b01000) ?
		  IF_ff_input_first__327_BIT_0_359_THEN_0xFFFFFF_ETC___d4468 :
		  { ((ff_input_D_OUT[12:6] == 7'b1110000 ||
		      ff_input_D_OUT[12:6] == 7'b1111000) &&
		     ff_input_D_OUT[5:3] == 3'b0) ?
		      x_data__h231444 :
		      ff_input_D_OUT[208:145],
		    6'd32 }) ;
  assign IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d4665 =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant32_res_wget[45:23], getExp32_res_wget[15:8], 31'd0 } :
	       (ff_input_first__327_BITS_12_TO_8_328_EQ_0b1100_ETC___d4615 ?
		  62'd0 :
		  IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d4663) ;
  assign IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d4801 =
	     (ff_input_D_OUT[12:8] == 5'b00011 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 63'd0 } :
	       ((ff_input_D_OUT[12:8] == 5'b01011 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  126'd0 :
		  { getMant64_res_wget[103:52],
		    getExp64_res_wget[21:11],
		    getMant64_res_wget[51:0],
		    getExp64_res_wget[10:0] }) ;
  assign IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d4804 =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 63'd0 } :
	       (ff_input_first__327_BITS_12_TO_8_328_EQ_0b1100_ETC___d4615 ?
		  126'd0 :
		  IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_ETC___d4802) ;
  assign IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d5371 =
	     (ff_input_D_OUT[12:8] == 5'b00010 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { 4'd10, x__h233415, x__h233518 } :
	       { x__h293893,
		 ff_input_D_OUT[14],
		 2'd1,
		 x__h233415,
		 x__h233518 } ;
  assign IF_ff_input_first__327_BITS_12_TO_8_328_EQ_0b1_ETC___d5445 =
	     (ff_input_D_OUT[12:8] == 5'b00010 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { 4'd10, x__h235127, x__h235230 } :
	       { x__h293893,
		 ff_input_D_OUT[14],
		 2'd1,
		 x__h235127,
		 x__h235230 } ;
  assign IF_ff_input_first__327_BIT_0_359_THEN_0xFFFFFF_ETC___d4468 =
	     { ff_input_D_OUT[0] ?
		 x_data__h231339 :
		 IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d4462[63:0],
	       1'd1,
	       ff_input_D_OUT[0] ?
		 IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4396[36:32] :
		 IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d4462[68:64] } ;
  assign IF_ff_input_first__327_BIT_0_359_THEN_42949672_ETC___d3820 =
	     { ff_input_D_OUT[0] ? x_data__h198720 : x_data__h199050,
	       1'd1,
	       ff_input_D_OUT[0] ? x_fflags__h198722 : x_fflags__h199052 } ;
  assign IF_ff_input_first__327_BIT_0_359_THEN_IF_NOT_I_ETC___d4271 =
	     { ff_input_D_OUT[0] ?
		 IF_NOT_IF_condFlags32_res_whas__361_THEN_condF_ETC___d4202 :
		 IF_NOT_IF_condFlags64_res_whas__446_THEN_condF_ETC___d4238,
	       3'd0,
	       ff_input_D_OUT[0] ?
		 _theResult_____1_snd__h217046 :
		 _theResult_____1_snd__h219832 } ;
  assign IF_ff_input_first__327_BIT_0_359_THEN_IF_NOT_I_ETC___d4272 =
	     { ff_input_D_OUT[0] ? x_data__h215341 : x_data__h218128,
	       1'd1,
	       IF_ff_input_first__327_BIT_0_359_THEN_IF_NOT_I_ETC___d4271 } ;
  assign IF_ff_input_first__327_BIT_0_359_THEN_IF_ff_in_ETC___d3539 =
	     { ff_input_D_OUT[0] ? x_data__h175667 : x_data__h177884,
	       1'd1,
	       ff_input_D_OUT[0] ? x_fflags__h175669 : x_fflags__h177886 } ;
  assign IF_ff_input_first__327_BIT_1_552_THEN_0_ELSE_1_ETC___d3901 =
	     ff_input_D_OUT[1] ? 64'd0 : 64'hFFFFFFFFFFFFFFFF ;
  assign IF_ff_input_first__327_BIT_1_552_THEN_NOT_IF_c_ETC___d3855 =
	     ff_input_D_OUT[1] ?
	       !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       !lv_invalid__h215256 &&
	       IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3851 :
	       !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       !lv_invalid__h215256 &&
	       IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3853 ;
  assign IF_ff_input_first__327_BIT_1_552_THEN_NOT_IF_c_ETC___d3860 =
	     ff_input_D_OUT[1] ?
	       !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       !lv_invalid__h215256 &&
	       IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3856 :
	       !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       !lv_invalid__h215256 &&
	       IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3858 ;
  assign IF_ff_input_first__327_BIT_1_552_THEN_NOT_IF_c_ETC___d4025 =
	     ff_input_D_OUT[1] ?
	       !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       !lv_invalid__h218042 &&
	       _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4021 :
	       !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       !lv_invalid__h218042 &&
	       _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4023 ;
  assign IF_ff_input_first__327_BIT_1_552_THEN_NOT_IF_c_ETC___d4030 =
	     ff_input_D_OUT[1] ?
	       !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       !lv_invalid__h218042 &&
	       _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4026 :
	       !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       !lv_invalid__h218042 &&
	       _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4028 ;
  assign IF_ff_input_first__327_BIT_3_380_AND_IF_condFl_ETC___d3419 =
	     (ff_input_D_OUT[3] &&
	      condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ?
	       lv_result__h176366 :
	       IF_NOT_ff_input_first__327_BIT_3_380_381_AND_I_ETC___d3418 ;
  assign IF_ff_input_first__327_BIT_3_380_AND_IF_condFl_ETC___d3498 =
	     (ff_input_D_OUT[3] &&
	      condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ?
	       lv_result__h178552 :
	       ((!ff_input_D_OUT[3] && lv_compare_result__h177827 == 2'b01 ||
		 ff_input_D_OUT[3] && lv_compare_result__h177827 == 2'b10) ?
		  ff_input_D_OUT[208:145] :
		  ff_input_D_OUT[144:81]) ;
  assign IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3840 =
	     getExp32_res_wget[23:16] - 8'd127 ;
  assign IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3851 =
	     (IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3840 ^
	      8'h80) <
	     8'd192 ;
  assign IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3853 =
	     (IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3840 ^
	      8'h80) <
	     8'd191 ;
  assign IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3856 =
	     (IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3840 ^
	      8'h80) <
	     8'd160 ;
  assign IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3858 =
	     (IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3840 ^
	      8'h80) <
	     8'd159 ;
  assign IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d4172 =
	     getExp32_res_wget[23:16] == 8'd126 &&
	     (ff_input_D_OUT[5:3] == 3'b100 ||
	      ff_input_D_OUT[5:3] == 3'b0 &&
	      getMant32_res_wget[68:46] != 23'd0) ||
	     IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3840[7] &&
	     ff_input_D_OUT[5:3] == 3'b010 ;
  assign IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4317 =
	     getExp64_res_wget[32:22] <= 11'd1150 ;
  assign IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4318 =
	     getExp64_res_wget[32:22] <= 11'd872 ;
  assign IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4320 =
	     getExp64_res_wget[32:22] <= 11'd896 ;
  assign IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2124 =
	     lv_product_mantissa__h94522 >>
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1886 ;
  assign IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2345 =
	     IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2124[0] |
	     ((_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1886 ^
	       13'h1000) >
	      ({ 6'd0, lsb_zeros__h94526 } ^ 13'h1000) ||
	      lv_product_mantissa__h94522[0]) ;
  assign IF_inst_dpfm_add_sub_ff_stage2_read__388_BITS__ETC___d2804 =
	     (inst_dpfm_add_sub_ff_stage2[9:7] == 3'b010 &&
	      sign2__h102225 | op_xor_sign3__h102238 ||
	      inst_dpfm_add_sub_ff_stage2[9:7] != 3'b010 &&
	      sign2__h102225 & op_xor_sign3__h102238) ?
	       2'b11 :
	       (sign2__h102225 ? lv_result_is_zero___1__h148299 : 2'b01) ;
  assign IF_inst_dpfm_add_sub_ff_stage2_read__388_BIT_5_ETC___d2405 =
	     exponent2__h102249 <= exponent3__h102240 ;
  assign IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3197 =
	     (resultant_exponent__h171056 - 13'd1023 ^ 13'h1000) <= 13'd5119 ;
  assign IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3214 =
	     inst_dpfm_add_sub_ff_stage5[183] ?
	       resultant_mantissa___1__h171358 :
	       _theResult___snd_fst__h171603 ;
  assign IF_inst_dpfpu_divider_rg_stage3_680_BIT_10_687_ETC___d1773 =
	     inst_dpfpu_divider_rg_stage3[10] ?
	       { 64'h7FF8000000000000, _theResult_____1_snd__h76601 } :
	       { _theResult_____1_fst__h76611,
		 _theResult_____1_snd__h76612 } ;
  assign IF_inst_dpfpu_divider_rg_stage3_680_BIT_7_743__ETC___d1762 =
	     (inst_dpfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_dpfpu_divider_rg_stage3_680_BIT_13_ETC___d1750[10:0] ==
	      11'd2047) ?
	       ((inst_dpfpu_divider_rg_stage3[4:2] == 3'b001 ||
		 inst_dpfpu_divider_rg_stage3[4:2] == 3'b010 &&
		 !inst_dpfpu_divider_rg_stage3[12] ||
		 inst_dpfpu_divider_rg_stage3[4:2] == 3'b011 &&
		 inst_dpfpu_divider_rg_stage3[12]) ?
		  63'h7FEFFFFFFFFFFFFF :
		  63'h7FF0000000000000) :
	       { IF_NOT_inst_dpfpu_divider_rg_stage3_680_BIT_13_ETC___d1750[10:0],
		 IF_IF_IF_inst_dpfpu_divider_rg_stage3_680_BITS_ETC___d1730[51:0] } ;
  assign IF_inst_spfm_add_sub_ff_input_register_read__6_ETC___d595 =
	     lv_product_mantissa__h22067 >>
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473 ;
  assign IF_inst_spfm_add_sub_ff_input_register_read__6_ETC___d700 =
	     IF_inst_spfm_add_sub_ff_input_register_read__6_ETC___d595[0] |
	     ((_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473 ^
	       10'h200) >
	      ({ 4'd0, lsb_zeros__h22071 } ^ 10'h200) ||
	      lv_product_mantissa__h22067[0]) ;
  assign IF_inst_spfm_add_sub_ff_stage2_read__43_BITS_9_ETC___d985 =
	     (inst_spfm_add_sub_ff_stage2[9:7] == 3'b010 &&
	      sign2__h25884 | op_xor_sign3__h25897 ||
	      inst_spfm_add_sub_ff_stage2[9:7] != 3'b010 &&
	      sign2__h25884 & op_xor_sign3__h25897) ?
	       2'b11 :
	       (sign2__h25884 ? lv_result_is_zero___1__h47337 : 2'b01) ;
  assign IF_inst_spfm_add_sub_ff_stage2_read__43_BIT_5__ETC___d760 =
	     exponent2__h25908 <= exponent3__h25899 ;
  assign IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1204 =
	     (resultant_exponent__h57914 - 10'd127 ^ 10'h200) <= 10'd639 ;
  assign IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1221 =
	     inst_spfm_add_sub_ff_stage5[95] ?
	       resultant_mantissa___1__h58216 :
	       _theResult___snd_fst__h58461 ;
  assign IF_inst_spfpu_divider_rg_stage3_67_BIT_10_74_T_ETC___d360 =
	     inst_spfpu_divider_rg_stage3[10] ?
	       { 32'h7FC00000, _theResult_____1_snd__h12203 } :
	       { _theResult_____1_fst__h12213,
		 _theResult_____1_snd__h12214 } ;
  assign IF_inst_spfpu_divider_rg_stage3_67_BIT_7_30_OR_ETC___d349 =
	     (inst_spfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_spfpu_divider_rg_stage3_67_BIT_77__ETC___d337[7:0] ==
	      8'd255) ?
	       ((inst_spfpu_divider_rg_stage3[4:2] == 3'b001 ||
		 inst_spfpu_divider_rg_stage3[4:2] == 3'b010 &&
		 !inst_spfpu_divider_rg_stage3[12] ||
		 inst_spfpu_divider_rg_stage3[4:2] == 3'b011 &&
		 inst_spfpu_divider_rg_stage3[12]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_NOT_inst_spfpu_divider_rg_stage3_67_BIT_77__ETC___d337[7:0],
		 IF_IF_IF_inst_spfpu_divider_rg_stage3_67_BITS__ETC___d317[22:0] } ;
  assign INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2106 =
	     shift_neg__h94529 < { 6'd0, x__h94590 } ;
  assign INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d577 =
	     shift_neg__h22074 < { 4'd0, x__h22135 } ;
  assign INV_1_MINUS_inst_dpfpu_divider_rg_stage2_450_B_ETC___d1574 =
	     shift_neg__h64602 < { 7'd0, msb_zeros__h64451 } ;
  assign INV_1_MINUS_inst_spfpu_divider_rg_stage2_24_BI_ETC___d190 =
	     shift_neg__h6149 < { 5'd0, msb_zeros__h5998 } ;
  assign NOT_0b0_CONCAT_IF_getExp64_res_whas__004_THEN__ETC___d4263 =
	     (x__h218208[10:0] != 11'd2047 ||
	      ff_input_D_OUT[5:3] != 3'b100 &&
	      (ff_input_D_OUT[5:3] != 3'b0 ||
	       getMant64_res_wget[155:104] == 52'd0)) &&
	     (!x__h218208[10] || ff_input_D_OUT[5:3] != 3'b010) ;
  assign NOT_IF_condFlags32_res_whas__361_THEN_condFlag_ETC___d3862 =
	     !condFlags32_reswget_BITS_14_TO_10__q53[4] &&
	     (!IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3840[7] ||
	      IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3845) &&
	     (ff_input_D_OUT[2] ?
		IF_ff_input_first__327_BIT_1_552_THEN_NOT_IF_c_ETC___d3855 :
		IF_ff_input_first__327_BIT_1_552_THEN_NOT_IF_c_ETC___d3860) ;
  assign NOT_IF_condFlags64_res_whas__446_THEN_condFlag_ETC___d4032 =
	     !condFlags64_reswget_BITS_14_TO_10__q33[4] &&
	     (!x__h218208[10] ||
	      IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d4014) &&
	     (ff_input_D_OUT[2] ?
		IF_ff_input_first__327_BIT_1_552_THEN_NOT_IF_c_ETC___d4025 :
		IF_ff_input_first__327_BIT_1_552_THEN_NOT_IF_c_ETC___d4030) ;
  assign NOT_IF_condFlags64_res_whas__446_THEN_condFlag_ETC___d5226 =
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4317 &&
	     !IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4318 &&
	     IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4320 ;
  assign NOT_IF_condFlags64_res_whas__446_THEN_condFlag_ETC___d5232 =
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4317 &&
	     !IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4318 &&
	     !IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4320 ;
  assign NOT_IF_getExp32_res_whas__836_THEN_getExp32_re_ETC___d4249 =
	     (getExp32_res_wget[23:16] != 8'd126 ||
	      ff_input_D_OUT[5:3] != 3'b100 &&
	      (ff_input_D_OUT[5:3] != 3'b0 ||
	       getMant32_res_wget[68:46] == 23'd0)) &&
	     (!IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3840[7] ||
	      ff_input_D_OUT[5:3] != 3'b010) ;
  assign NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5267 =
	     (ff_input_D_OUT[12:6] == 7'b1110001 ||
	      ff_input_D_OUT[12:6] == 7'b1111001) &&
	     ff_input_D_OUT[5:3] == 3'b0 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ;
  assign NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5475 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5495 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     !IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3367 &&
	     !lv_op2_Nan__h175599 &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     condFlags32_reswget_BITS_9_TO_5__q54[3] ;
  assign NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5624 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     !IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d3452 &&
	     !lv_op2_Nan__h177823 &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     condFlags64_reswget_BITS_9_TO_5__q34[3] ;
  assign NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5626 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5894 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     (IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3367 ||
	      ff_input_D_OUT[176] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[3]) ;
  assign NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5919 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     !IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3367 &&
	     !ff_input_D_OUT[176] &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      !condFlags32_reswget_BITS_14_TO_10__q53[3]) ;
  assign NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5921 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5990 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     (IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d3452 ||
	      ff_input_D_OUT[208] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[3]) ;
  assign NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6015 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     !IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d3452 &&
	     !ff_input_D_OUT[208] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      !condFlags64_reswget_BITS_14_TO_10__q33[3]) ;
  assign NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6017 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6117 =
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ;
  assign NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d4551 =
	     (ff_input_D_OUT[16:13] == 4'b0 ||
	      ff_input_D_OUT[16:13] == 4'b0001 ||
	      ff_input_D_OUT[16:13] == 4'b0010 ||
	      ff_input_D_OUT[16:13] == 4'b0011) &&
	     ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d4737 =
	     (ff_input_D_OUT[16:13] == 4'b0 ||
	      ff_input_D_OUT[16:13] == 4'b0001 ||
	      ff_input_D_OUT[16:13] == 4'b0010 ||
	      ff_input_D_OUT[16:13] == 4'b0011) &&
	     !ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5248 =
	     (ff_input_D_OUT[12:6] == 7'b1110000 ||
	      ff_input_D_OUT[12:6] == 7'b1111000) &&
	     ff_input_D_OUT[5:3] == 3'b0 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ;
  assign NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5296 =
	     (ff_input_D_OUT[12:8] == 5'b0 ||
	      ff_input_D_OUT[12:8] == 5'b00001) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[16:13] == 4'b0 ||
	     ff_input_D_OUT[16:13] == 4'b0001 ||
	     ff_input_D_OUT[16:13] == 4'b0010 ||
	     ff_input_D_OUT[16:13] == 4'b0011 ;
  assign NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5307 =
	     (ff_input_D_OUT[12:8] != 5'b11010 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00100 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11100 ||
	      ff_input_D_OUT[5:3] != 3'b001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b01000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110001 &&
	      ff_input_D_OUT[12:6] != 7'b1111001 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100 &&
	      ff_input_D_OUT[0] ||
	      (ff_input_D_OUT[12:8] != 5'b0 &&
	       ff_input_D_OUT[12:8] != 5'b00001 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b00011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b01011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      ff_input_first__327_BITS_12_TO_8_328_EQ_0b10_5_ETC___d4552) ;
  assign NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5387 =
	     (ff_input_D_OUT[12:8] != 5'b11010 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00100 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11100 ||
	      ff_input_D_OUT[5:3] != 3'b001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b01000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110001 &&
	      ff_input_D_OUT[12:6] != 7'b1111001 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100 &&
	      !ff_input_D_OUT[0] ||
	      (ff_input_D_OUT[12:8] != 5'b0 &&
	       ff_input_D_OUT[12:8] != 5'b00001 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b00011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b01011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      ff_input_first__327_BITS_12_TO_8_328_EQ_0b10_5_ETC___d4738) ;
  assign NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5457 =
	     (ff_input_D_OUT[12:8] == 5'b0 ||
	      ff_input_D_OUT[12:8] == 5'b00001) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ;
  assign NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6146 =
	     (ff_input_D_OUT[12:8] != 5'b11010 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00100 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11100 ||
	      ff_input_D_OUT[5:3] != 3'b001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b01000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110001 &&
	      ff_input_D_OUT[12:6] != 7'b1111001 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b0 &&
	      ff_input_D_OUT[12:8] != 5'b00001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00011 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b01011 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d4551 ;
  assign NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6177 =
	     (ff_input_D_OUT[12:8] != 5'b11010 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00100 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11100 ||
	      ff_input_D_OUT[5:3] != 3'b001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b01000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110001 &&
	      ff_input_D_OUT[12:6] != 7'b1111001 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b0 &&
	      ff_input_D_OUT[12:8] != 5'b00001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00011 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b01011 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d4737 ;
  assign NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6209 =
	     ff_input_D_OUT[16:13] == 4'b0 ||
	     ff_input_D_OUT[16:13] == 4'b0001 ||
	     ff_input_D_OUT[16:13] == 4'b0010 ||
	     ff_input_D_OUT[16:13] == 4'b0011 ;
  assign NOT_ff_input_first__327_BIT_2_541_545_AND_NOT__ETC___d3959 =
	     !ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd157 &&
	     final_result__h215276[30:0] == 31'h7FFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign NOT_ff_input_first__327_BIT_2_541_545_AND_NOT__ETC___d4126 =
	     !ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     x__h218208[10:0] == 11'd30 &&
	     final_result__h218063[30:0] == 31'h7FFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign NOT_ff_input_first__327_BIT_2_541_545_AND_ff_i_ETC___d3966 =
	     !ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd158 &&
	     final_result__h215276[31:0] == 32'hFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign NOT_ff_input_first__327_BIT_2_541_545_AND_ff_i_ETC___d4132 =
	     !ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     x__h218208[10:0] == 11'd31 &&
	     final_result__h218063[31:0] == 32'hFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign NOT_inst_dpfpu_divider_rg_stage2_450_BITS_21_T_ETC___d1654 =
	     !inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1454 &&
	     (!_1_MINUS_inst_dpfpu_divider_rg_stage2_450_BITS__ETC___d1456 ||
	      !inst_dpfpu_divider_int_div_wr_final_out_wget[55] &&
	      INV_1_MINUS_inst_dpfpu_divider_rg_stage2_450_B_ETC___d1574) ;
  assign NOT_inst_dpfpu_divider_rg_stage3_680_BITS_82_T_ETC___d1703 =
	     x__h76646 | inst_dpfpu_divider_rg_stage3[84] ;
  assign NOT_inst_dpfpu_divider_rg_stage3_680_BITS_82_T_ETC___d1738 =
	     NOT_inst_dpfpu_divider_rg_stage3_680_BITS_82_T_ETC___d1703 &&
	     (inst_dpfpu_divider_rg_stage3[138] ||
	      !IF_IF_IF_inst_dpfpu_divider_rg_stage3_680_BITS_ETC___d1730[52]) &&
	     !_theResult_____5__h76494[53] &&
	     inst_dpfpu_divider_rg_stage3[1] ;
  assign NOT_inst_spfpu_divider_rg_stage2_24_BITS_18_TO_ETC___d241 =
	     !inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d128 &&
	     (!_1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d130 ||
	      !inst_spfpu_divider_int_div_wr_final_out_wget[26] &&
	      INV_1_MINUS_inst_spfpu_divider_rg_stage2_24_BI_ETC___d190) ;
  assign NOT_inst_spfpu_divider_rg_stage3_67_BITS_50_TO_ETC___d290 =
	     x__h12248 | inst_spfpu_divider_rg_stage3[52] ;
  assign NOT_inst_spfpu_divider_rg_stage3_67_BITS_50_TO_ETC___d325 =
	     NOT_inst_spfpu_divider_rg_stage3_67_BITS_50_TO_ETC___d290 &&
	     (inst_spfpu_divider_rg_stage3[77] ||
	      !IF_IF_IF_inst_spfpu_divider_rg_stage3_67_BITS__ETC___d317[23]) &&
	     !_theResult_____5__h12096[24] &&
	     inst_spfpu_divider_rg_stage3[1] ;
  assign _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2757 =
	     ({ 5'd0, x__h137335 } < exponent_difference__h102263 ||
	      IF_IF_inst_dpfm_add_sub_ff_stage2_read__388_BI_ETC___d2429[0]) &&
	     mantissa_to_shift__h102262 != 160'd0 ;
  assign _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d938 =
	     ({ 3'd0, x__h42202 } < exponent_difference__h25922 ||
	      IF_IF_inst_spfm_add_sub_ff_stage2_read__43_BIT_ETC___d784[0]) &&
	     mantissa_to_shift__h25921 != 73'd0 ;
  assign _0_CONCAT_INV_IF_condFlags32_res_whas__361_THEN_ETC___d5318 =
	     { 24'd0, x__h232905 } * { 24'd0, x__h232969 } ;
  assign _0_CONCAT_INV_IF_condFlags64_res_whas__446_THEN_ETC___d5398 =
	     { 53'd0, x__h234622 } * { 53'd0, x__h234686 } ;
  assign _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3189 =
	     { 5'd0, inst_dpfm_add_sub_ff_stage5[7:0] } - 13'd1 ;
  assign _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3191 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3189 <=
	     resultant_exponent_sub__h171049 ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1196 =
	     { 3'd0, inst_spfm_add_sub_ff_stage5[6:0] } - 10'd1 ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1198 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1196 <=
	     resultant_exponent_sub__h57907 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4021 =
	     (x__h218208[10:0] ^ 11'h400) < 11'd1088 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4023 =
	     (x__h218208[10:0] ^ 11'h400) < 11'd1087 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4026 =
	     (x__h218208[10:0] ^ 11'h400) < 11'd1056 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4028 =
	     (x__h218208[10:0] ^ 11'h400) < 11'd1055 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4208 =
	     x__h218208[10:0] == 11'd2047 &&
	     (ff_input_D_OUT[5:3] == 3'b100 ||
	      ff_input_D_OUT[5:3] == 3'b0 &&
	      getMant64_res_wget[155:104] != 52'd0) ||
	     x__h218208[10] && ff_input_D_OUT[5:3] == 3'b010 ;
  assign _1_CONCAT_IF_getMant32_res_whas__869_THEN_getMa_ETC___d3876 =
	     final_man__h215268 <<
	     IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3840 ;
  assign _1_CONCAT_IF_getMant32_res_whas__869_THEN_getMa_ETC__q49 =
	     _1_CONCAT_IF_getMant32_res_whas__869_THEN_getMa_ETC___d3876[54:23] ;
  assign _1_CONCAT_IF_getMant64_res_whas__038_THEN_getMa_ETC___d4045 =
	     final_man__h218055 << x__h218208[10:0] ;
  assign _1_CONCAT_IF_getMant64_res_whas__038_THEN_getMa_ETC__q29 =
	     _1_CONCAT_IF_getMant64_res_whas__038_THEN_getMa_ETC___d4045[83:52] ;
  assign _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1886 =
	     13'd1 - lv_product_exponent__h94520 ;
  assign _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1887 =
	     (_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1886 ^
	      13'h1000) <=
	     13'd4096 ;
  assign _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473 =
	     10'd1 - lv_product_exponent__h22065 ;
  assign _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d474 =
	     (_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473 ^
	      10'h200) <=
	     10'd512 ;
  assign _1_MINUS_inst_dpfpu_divider_rg_stage2_450_BITS__ETC___d1455 =
	     13'd1 - inst_dpfpu_divider_rg_stage2[21:9] ;
  assign _1_MINUS_inst_dpfpu_divider_rg_stage2_450_BITS__ETC___d1456 =
	     (_1_MINUS_inst_dpfpu_divider_rg_stage2_450_BITS__ETC___d1455 ^
	      13'h1000) <=
	     13'd4096 ;
  assign _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d129 =
	     10'd1 - inst_spfpu_divider_rg_stage2[18:9] ;
  assign _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d130 =
	     (_1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d129 ^
	      10'h200) <=
	     10'd512 ;
  assign _denominator__h4750 = { inst_spfpu_divider_rg_stage1[32:9], 3'd0 } ;
  assign _denominator__h63203 = { inst_dpfpu_divider_rg_stage1[61:9], 3'd0 } ;
  assign _dividend___1__h3159 = _dividend__h2989 - 27'd1 ;
  assign _dividend___1__h61618 = _dividend__h61448 - 56'd1 ;
  assign _dividend__h2399 =
	     { IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d63[25:0],
	       !IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13[28] } ;
  assign _dividend__h2495 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d31[25:0],
	       !inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[55] } ;
  assign _dividend__h2988 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       _dividend__h2495 :
	       _dividend__h2399 ;
  assign _dividend__h2989 = _dividend__h2988 - ~_dividend__h2988 ;
  assign _dividend__h60858 =
	     { IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1389[54:0],
	       !IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20[57] } ;
  assign _dividend__h60954 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1357[54:0],
	       !inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[113] } ;
  assign _dividend__h61447 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       _dividend__h60954 :
	       _dividend__h60858 ;
  assign _dividend__h61448 = _dividend__h61447 - ~_dividend__h61447 ;
  assign _numerator__h4751 = { inst_spfpu_divider_rg_stage1[56:33], 3'd0 } ;
  assign _numerator__h63204 = { inst_dpfpu_divider_rg_stage1[114:62], 3'd0 } ;
  assign _remainder___1__h3158 =
	     _remainder__h2986 +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       1'b0 } ;
  assign _remainder___1__h61617 =
	     _remainder__h61445 +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       1'b0 } ;
  assign _remainder__h2986 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d31[54:26] :
	       IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d63[54:26] ;
  assign _remainder__h61445 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1357[112:55] :
	       IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1389[112:55] ;
  assign _theResult_____1__h102273 = mantissa2__h102269 > mantissa3__h102270 ;
  assign _theResult_____1__h25932 = mantissa2__h25928 > mantissa3__h25929 ;
  assign _theResult_____1_fst__h12213 =
	     { inst_spfpu_divider_rg_stage3[12],
	       inst_spfpu_divider_rg_stage3[9] ?
		 31'h7F800000 :
		 (inst_spfpu_divider_rg_stage3[5] ?
		    31'd0 :
		    IF_NOT_inst_spfpu_divider_rg_stage3_67_BITS_50_ETC___d350) } ;
  assign _theResult_____1_fst__h14633 =
	     lv_extended_mantissa___1__h14632[26] ?
	       result_exponent___1__h14655 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign _theResult_____1_fst__h171922 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     inst_dpfm_add_sub_ff_stage5_read__171_BIT_15_1_ETC___d3298 &&
	     _theResult_____3_fst__h171193 ;
  assign _theResult_____1_fst__h216978 =
	     ff_input_D_OUT[1] &&
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ||
	     lv_invalid___2__h215876 ;
  assign _theResult_____1_fst__h219764 =
	     ff_input_D_OUT[1] && ff_input_D_OUT[208] ||
	     lv_invalid___2__h218666 ;
  assign _theResult_____1_fst__h22125 =
	     (msb_zeros__h22069 == 6'b000001) ?
	       lv_product_exponent__h22065 :
	       _theResult_____1_fst__h22128 ;
  assign _theResult_____1_fst__h22128 =
	     INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d577 ?
	       lv_product_exponent_sub_shift__h22076 :
	       lv_product_exponent_sub_zerosMSB__h22078 ;
  assign _theResult_____1_fst__h58780 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     inst_spfm_add_sub_ff_stage5_read__178_BIT_14_1_ETC___d1305 &&
	     _theResult_____3_fst__h58051 ;
  assign _theResult_____1_fst__h76611 =
	     { inst_dpfpu_divider_rg_stage3[12],
	       inst_dpfpu_divider_rg_stage3[9] ?
		 63'h7FF0000000000000 :
		 (inst_dpfpu_divider_rg_stage3[5] ?
		    63'd0 :
		    IF_NOT_inst_dpfpu_divider_rg_stage3_680_BITS_8_ETC___d1763) } ;
  assign _theResult_____1_fst__h79030 =
	     lv_extended_mantissa___1__h79029[55] ?
	       result_exponent___1__h79052 :
	       inst_dpfpu_sqrt_rg_inter_stage[128:117] ;
  assign _theResult_____1_fst__h94580 =
	     (msb_zeros__h94524 == 7'b0000001) ?
	       lv_product_exponent__h94520 :
	       _theResult_____1_fst__h94583 ;
  assign _theResult_____1_fst__h94583 =
	     INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2106 ?
	       lv_product_exponent_sub_shift__h94531 :
	       lv_product_exponent_sub_zerosMSB__h94533 ;
  assign _theResult_____1_snd__h12192 =
	     inst_spfpu_divider_rg_stage3[9] ? 5'd8 : 5'd0 ;
  assign _theResult_____1_snd__h12203 =
	     (~inst_spfpu_divider_rg_stage3[0]) ? 5'd16 : 5'd0 ;
  assign _theResult_____1_snd__h12214 =
	     inst_spfpu_divider_rg_stage3[9] ?
	       5'd8 :
	       _theResult_____1_snd__h12231 ;
  assign _theResult_____1_snd__h12231 =
	     inst_spfpu_divider_rg_stage3[5] ?
	       5'd0 :
	       _theResult_____1_snd__h12552 ;
  assign _theResult_____1_snd__h12552 =
	     (NOT_inst_spfpu_divider_rg_stage3_67_BITS_50_TO_ETC___d325 ||
	      inst_spfpu_divider_rg_stage3[8]) ?
	       5'd3 :
	       _theResult_____1_snd__h12614 ;
  assign _theResult_____1_snd__h12614 =
	     (inst_spfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_spfpu_divider_rg_stage3_67_BIT_77__ETC___d337[7:0] ==
	      8'd255) ?
	       5'd5 :
	       _theResult_____1_snd__h12632 ;
  assign _theResult_____1_snd__h12632 =
	     NOT_inst_spfpu_divider_rg_stage3_67_BITS_50_TO_ETC___d290 ?
	       5'd1 :
	       5'd0 ;
  assign _theResult_____1_snd__h216979 =
	     (ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       64'd0 :
	       final_result___3__h215877 ;
  assign _theResult_____1_snd__h217046 =
	     !IF_NOT_IF_condFlags32_res_whas__361_THEN_condF_ETC___d4202 &&
	     IF_NOT_IF_condFlags32_res_whas__361_THEN_condF_ETC___d4254 ;
  assign _theResult_____1_snd__h219765 =
	     (ff_input_D_OUT[1] && ff_input_D_OUT[208]) ?
	       64'd0 :
	       final_result___3__h218667 ;
  assign _theResult_____1_snd__h219832 =
	     !IF_NOT_IF_condFlags64_res_whas__446_THEN_condF_ETC___d4238 &&
	     IF_NOT_IF_condFlags64_res_whas__446_THEN_condF_ETC___d4268 ;
  assign _theResult_____1_snd__h22126 =
	     (msb_zeros__h22069 == 6'b000001) ?
	       lv_product_mantissa__h22067 :
	       _theResult_____1_snd__h22129 ;
  assign _theResult_____1_snd__h22129 =
	     INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d577 ?
	       lv_product_mantissa_shiftL_expo__h22075 :
	       lv_product_mantissa_shiftL_zerosMSB__h22077 ;
  assign _theResult_____1_snd__h76590 =
	     inst_dpfpu_divider_rg_stage3[9] ? 5'd8 : 5'd0 ;
  assign _theResult_____1_snd__h76601 =
	     (~inst_dpfpu_divider_rg_stage3[0]) ? 5'd16 : 5'd0 ;
  assign _theResult_____1_snd__h76612 =
	     inst_dpfpu_divider_rg_stage3[9] ?
	       5'd8 :
	       _theResult_____1_snd__h76629 ;
  assign _theResult_____1_snd__h76629 =
	     inst_dpfpu_divider_rg_stage3[5] ?
	       5'd0 :
	       _theResult_____1_snd__h76950 ;
  assign _theResult_____1_snd__h76950 =
	     (NOT_inst_dpfpu_divider_rg_stage3_680_BITS_82_T_ETC___d1738 ||
	      inst_dpfpu_divider_rg_stage3[8]) ?
	       5'd3 :
	       _theResult_____1_snd__h77012 ;
  assign _theResult_____1_snd__h77012 =
	     (inst_dpfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_dpfpu_divider_rg_stage3_680_BIT_13_ETC___d1750[10:0] ==
	      11'd2047) ?
	       5'd5 :
	       _theResult_____1_snd__h77030 ;
  assign _theResult_____1_snd__h77030 =
	     NOT_inst_dpfpu_divider_rg_stage3_680_BITS_82_T_ETC___d1703 ?
	       5'd1 :
	       5'd0 ;
  assign _theResult_____1_snd__h94581 =
	     (msb_zeros__h94524 == 7'b0000001) ?
	       lv_product_mantissa__h94522 :
	       _theResult_____1_snd__h94584 ;
  assign _theResult_____1_snd__h94584 =
	     INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2106 ?
	       lv_product_mantissa_shiftL_expo__h94530 :
	       lv_product_mantissa_shiftL_zerosMSB__h94532 ;
  assign _theResult_____1_snd_snd_fst__h171950 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     _theResult_____3_snd_fst__h171195 ;
  assign _theResult_____1_snd_snd_fst__h58808 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     _theResult_____3_snd_fst__h58053 ;
  assign _theResult_____1_snd_snd_snd__h171951 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     _theResult_____3_snd_snd_fst__h171197 ;
  assign _theResult_____1_snd_snd_snd__h58809 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     _theResult_____3_snd_snd_fst__h58055 ;
  assign _theResult_____2__h230961 =
	     IF_IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0_ETC___d4373[23] ?
	       expo___1__h231250 :
	       expo__h230580 ;
  assign _theResult_____2_fst__h216653 =
	     NOT_ff_input_first__327_BIT_2_541_545_AND_NOT__ETC___d3959 ||
	     NOT_ff_input_first__327_BIT_2_541_545_AND_ff_i_ETC___d3966 ||
	     ff_input_first__327_BIT_2_541_AND_NOT_ff_input_ETC___d3973 ||
	     ff_input_first__327_BIT_2_541_AND_ff_input_fir_ETC___d3979 ;
  assign _theResult_____2_fst__h219441 =
	     NOT_ff_input_first__327_BIT_2_541_545_AND_NOT__ETC___d4126 ||
	     NOT_ff_input_first__327_BIT_2_541_545_AND_ff_i_ETC___d4132 ||
	     ff_input_first__327_BIT_2_541_AND_NOT_ff_input_ETC___d4138 ||
	     ff_input_first__327_BIT_2_541_AND_ff_input_fir_ETC___d4143 ;
  assign _theResult_____2_snd__h216654 =
	     NOT_ff_input_first__327_BIT_2_541_545_AND_NOT__ETC___d3959 ?
	       64'h000000007FFFFFFF :
	       _theResult_____2_snd__h216761 ;
  assign _theResult_____2_snd__h216761 =
	     NOT_ff_input_first__327_BIT_2_541_545_AND_ff_i_ETC___d3966 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h216813 ;
  assign _theResult_____2_snd__h216813 =
	     ff_input_first__327_BIT_2_541_AND_NOT_ff_input_ETC___d3973 ?
	       64'h7FFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h216864 ;
  assign _theResult_____2_snd__h216864 =
	     ff_input_first__327_BIT_2_541_AND_ff_input_fir_ETC___d3979 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h216867 ;
  assign _theResult_____2_snd__h216867 =
	     (!ff_input_D_OUT[2] && final_result___2__h216866[31]) ?
	       final_result___1__h216905 :
	       final_result___2__h216866 ;
  assign _theResult_____2_snd__h219442 =
	     NOT_ff_input_first__327_BIT_2_541_545_AND_NOT__ETC___d4126 ?
	       64'h000000007FFFFFFF :
	       _theResult_____2_snd__h219547 ;
  assign _theResult_____2_snd__h219547 =
	     NOT_ff_input_first__327_BIT_2_541_545_AND_ff_i_ETC___d4132 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h219599 ;
  assign _theResult_____2_snd__h219599 =
	     ff_input_first__327_BIT_2_541_AND_NOT_ff_input_ETC___d4138 ?
	       64'h7FFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h219650 ;
  assign _theResult_____2_snd__h219650 =
	     ff_input_first__327_BIT_2_541_AND_ff_input_fir_ETC___d4143 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h219653 ;
  assign _theResult_____2_snd__h219653 =
	     (!ff_input_D_OUT[2] && final_result___2__h219652[31]) ?
	       final_result___1__h219691 :
	       final_result___2__h219652 ;
  assign _theResult_____3__h262452 =
	     { 27'd0,
	       IF_IF_IF_condFlags32_res_whas__361_THEN_condFl_ETC___d5963[51:50] } -
	     29'd1 ;
  assign _theResult_____3__h271464 =
	     { 56'd0,
	       IF_IF_IF_condFlags64_res_whas__446_THEN_condFl_ETC___d6087[109:108] } -
	     58'd1 ;
  assign _theResult_____3_fst__h171193 =
	     !inst_dpfm_add_sub_ff_stage5[15] && _theResult_____6__h171073 ;
  assign _theResult_____3_fst__h171843 =
	     ex_overflow__h171064 || inst_dpfm_add_sub_ff_stage5[12] ||
	     IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3246[10:0] ==
	     11'd2047 ;
  assign _theResult_____3_fst__h175722 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[2] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[0]) ?
	       _theResult_____3_fst__h175863 :
	       5'd0 ;
  assign _theResult_____3_fst__h175863 =
	     (ff_input_D_OUT[5:3] != 3'b010 ||
	      condFlags32_reswget_BITS_14_TO_10__q53[0] |
	      condFlags32_reswget_BITS_9_TO_5__q54[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h176280 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h177914 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[2] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[0]) ?
	       _theResult_____3_fst__h178055 :
	       5'd0 ;
  assign _theResult_____3_fst__h178055 =
	     (ff_input_D_OUT[5:3] != 3'b010 ||
	      condFlags64_reswget_BITS_14_TO_10__q33[0] |
	      condFlags64_reswget_BITS_9_TO_5__q34[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h178466 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h215879 =
	     (!ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       lv_invalid___2__h215876 :
	       _theResult_____1_fst__h216978 ;
  assign _theResult_____3_fst__h218669 =
	     sign__h203751 ?
	       lv_invalid___2__h218666 :
	       _theResult_____1_fst__h219764 ;
  assign _theResult_____3_fst__h58051 =
	     !inst_spfm_add_sub_ff_stage5[14] && _theResult_____6__h57931 ;
  assign _theResult_____3_fst__h58701 =
	     ex_overflow__h57922 || inst_spfm_add_sub_ff_stage5[11] ||
	     IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1253[7:0] ==
	     8'd255 ;
  assign _theResult_____3_snd__h175723 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[2] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[0]) ?
	       32'd0 :
	       IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b10_ETC___d3442 ;
  assign _theResult_____3_snd__h176281 =
	     (IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3367 &
	      lv_op2_Nan__h175599) ?
	       32'h7FC00000 :
	       IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d3422 ;
  assign _theResult_____3_snd__h177915 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[2] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[0]) ?
	       64'd0 :
	       IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b10_ETC___d3519 ;
  assign _theResult_____3_snd__h178467 =
	     (IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d3452 &
	      lv_op2_Nan__h177823) ?
	       64'h7FF8000000000000 :
	       IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d3501 ;
  assign _theResult_____3_snd_fst__h171195 =
	     !inst_dpfm_add_sub_ff_stage5[15] &&
	     ((inst_dpfm_add_sub_ff_stage5[13] ||
	       inst_dpfm_add_sub_ff_stage5[18]) ?
		ex_overflow__h171064 :
		_theResult_____3_fst__h171843) ;
  assign _theResult_____3_snd_fst__h171845 =
	     ex_overflow__h171064 || inst_dpfm_add_sub_ff_stage5[12] ||
	     IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3246[10:0] ==
	     11'd2047 ||
	     lv_inexact__h171072 ;
  assign _theResult_____3_snd_fst__h58053 =
	     !inst_spfm_add_sub_ff_stage5[14] &&
	     ((inst_spfm_add_sub_ff_stage5[12] ||
	       inst_spfm_add_sub_ff_stage5[17]) ?
		ex_overflow__h57922 :
		_theResult_____3_fst__h58701) ;
  assign _theResult_____3_snd_fst__h58703 =
	     ex_overflow__h57922 || inst_spfm_add_sub_ff_stage5[11] ||
	     IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1253[7:0] ==
	     8'd255 ||
	     lv_inexact__h57930 ;
  assign _theResult_____3_snd_snd__h171255 =
	     inst_dpfm_add_sub_ff_stage5[13] ?
	       lv_final_output__h171256 :
	       _theResult_____3_snd_snd__h171305 ;
  assign _theResult_____3_snd_snd__h171305 =
	     inst_dpfm_add_sub_ff_stage5[18] ?
	       lv_final_output__h171306 :
	       _theResult_____3_snd_snd__h171846 ;
  assign _theResult_____3_snd_snd__h171846 =
	     { inst_dpfm_add_sub_ff_stage5[23],
	       IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__17_ETC___d3262 } ;
  assign _theResult_____3_snd_snd__h58113 =
	     inst_spfm_add_sub_ff_stage5[12] ?
	       lv_final_output__h58114 :
	       _theResult_____3_snd_snd__h58163 ;
  assign _theResult_____3_snd_snd__h58163 =
	     inst_spfm_add_sub_ff_stage5[17] ?
	       lv_final_output__h58164 :
	       _theResult_____3_snd_snd__h58704 ;
  assign _theResult_____3_snd_snd__h58704 =
	     { inst_spfm_add_sub_ff_stage5[22],
	       IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1269 } ;
  assign _theResult_____3_snd_snd_fst__h171197 =
	     !inst_dpfm_add_sub_ff_stage5[15] &&
	     ((inst_dpfm_add_sub_ff_stage5[13] ||
	       inst_dpfm_add_sub_ff_stage5[18]) ?
		lv_inexact__h171072 :
		_theResult_____3_snd_fst__h171845) ;
  assign _theResult_____3_snd_snd_fst__h215882 =
	     (!ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       ((!ff_input_D_OUT[2] && final_result___2__h215925[31]) ?
		  final_result___1__h216935 :
		  final_result___2__h215925) :
	       _theResult_____1_snd__h216979 ;
  assign _theResult_____3_snd_snd_fst__h218672 =
	     sign__h203751 ?
	       ((!ff_input_D_OUT[2] && final_result___2__h218714[31]) ?
		  final_result___1__h219721 :
		  final_result___2__h218714) :
	       _theResult_____1_snd__h219765 ;
  assign _theResult_____3_snd_snd_fst__h58055 =
	     !inst_spfm_add_sub_ff_stage5[14] &&
	     ((inst_spfm_add_sub_ff_stage5[12] ||
	       inst_spfm_add_sub_ff_stage5[17]) ?
		lv_inexact__h57930 :
		_theResult_____3_snd_fst__h58703) ;
  assign _theResult_____3_snd_snd_snd__h171198 =
	     inst_dpfm_add_sub_ff_stage5[15] ?
	       lv_final_output__h171199 :
	       _theResult_____3_snd_snd__h171255 ;
  assign _theResult_____3_snd_snd_snd__h58056 =
	     inst_spfm_add_sub_ff_stage5[14] ?
	       lv_final_output__h58057 :
	       _theResult_____3_snd_snd__h58113 ;
  assign _theResult_____4_snd_fst__h102468 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__388_BIT_5_ETC___d2405 ?
	       exponent2__h102249 :
	       exponent3__h102240 ;
  assign _theResult_____4_snd_fst__h26127 =
	     IF_inst_spfm_add_sub_ff_stage2_read__43_BIT_5__ETC___d760 ?
	       exponent2__h25908 :
	       exponent3__h25899 ;
  assign _theResult_____5__h12096 =
	     IF_inst_spfpu_divider_rg_stage3_67_BITS_4_TO_2_ETC___d309 ?
	       lv_rounded_quotient___1__h12474 :
	       lv_rounded_quotient__h12095 ;
  assign _theResult_____5__h171074 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__171_BITS__ETC___d3235 ?
	       lv_rounded_mantissa___1__h171758 :
	       IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3214[159:106] ;
  assign _theResult_____5__h57932 =
	     IF_inst_spfm_add_sub_ff_stage5_read__178_BITS__ETC___d1242 ?
	       lv_rounded_mantissa___1__h58616 :
	       IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1221[72:48] ;
  assign _theResult_____5__h76494 =
	     IF_inst_dpfpu_divider_rg_stage3_680_BITS_4_TO__ETC___d1722 ?
	       lv_rounded_quotient___1__h76872 :
	       lv_rounded_quotient__h76493 ;
  assign _theResult_____6__h171073 =
	     !inst_dpfm_add_sub_ff_stage5[183] &&
	     !inst_dpfm_add_sub_ff_stage5[182] &&
	     !_0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3191 &&
	     lv_inexact__h171072 ||
	     IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_BI_ETC___d3308 ;
  assign _theResult_____6__h57931 =
	     !inst_spfm_add_sub_ff_stage5[95] &&
	     !inst_spfm_add_sub_ff_stage5[94] &&
	     !_0_CONCAT_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1198 &&
	     lv_inexact__h57930 ||
	     IF_IF_inst_spfm_add_sub_ff_stage5_read__178_BI_ETC___d1315 ;
  assign _theResult_____6_fst__h148200 =
	     (!inst_dpfm_add_sub_ff_stage2[4] ||
	      !inst_dpfm_add_sub_ff_stage2[14]) &&
	     inst_dpfm_add_sub_ff_stage2[1] ;
  assign _theResult_____6_fst__h47238 =
	     (!inst_spfm_add_sub_ff_stage2[4] ||
	      !inst_spfm_add_sub_ff_stage2[14]) &&
	     inst_spfm_add_sub_ff_stage2[1] ;
  assign _theResult_____6_snd_snd__h148203 =
	     (inst_dpfm_add_sub_ff_stage2[4] &&
	      inst_dpfm_add_sub_ff_stage2[14]) ?
	       lv_result_is_infinity___1__h148204 :
	       ((inst_dpfm_add_sub_ff_stage2[4] ||
		 inst_dpfm_add_sub_ff_stage2[14]) ?
		  lv_result_is_infinity___1__h148266 :
		  2'd0) ;
  assign _theResult_____6_snd_snd__h47241 =
	     (inst_spfm_add_sub_ff_stage2[4] &&
	      inst_spfm_add_sub_ff_stage2[14]) ?
	       lv_result_is_infinity___1__h47242 :
	       ((inst_spfm_add_sub_ff_stage2[4] ||
		 inst_spfm_add_sub_ff_stage2[14]) ?
		  lv_result_is_infinity___1__h47304 :
		  2'd0) ;
  assign _theResult_____6_snd_snd_snd__h148250 =
	     (inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       (inst_dpfm_add_sub_ff_stage2[11] ?
		  lv_result_is_zero___1__h148303 :
		  IF_inst_dpfm_add_sub_ff_stage2_read__388_BITS__ETC___d2804) :
	       2'd0 ;
  assign _theResult_____6_snd_snd_snd__h47288 =
	     (inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       (inst_spfm_add_sub_ff_stage2[11] ?
		  lv_result_is_zero___1__h47341 :
		  IF_inst_spfm_add_sub_ff_stage2_read__43_BITS_9_ETC___d985) :
	       2'd0 ;
  assign _theResult____h102239 =
	     (!inst_dpfm_add_sub_ff_stage2[14] &&
	      !inst_dpfm_add_sub_ff_stage2_read__388_BIT_15_4_ETC___d2413 &&
	      !inst_dpfm_add_sub_ff_stage2[16]) ?
	       mantissa3___1__h121959 :
	       160'd0 ;
  assign _theResult____h12093 =
	     inst_spfpu_divider_rg_stage3[50:23] != 28'd0 ||
	     inst_spfpu_divider_rg_stage3[51] ||
	     inst_spfpu_divider_rg_stage3[6] ;
  assign _theResult____h13815 =
	     inst_spfpu_sqrt_rg_inter_stage[57] ?
	       lv_remainder__h13922 :
	       lv_remainder__h14012 ;
  assign _theResult____h148460 =
	     inst_dpfm_add_sub_ff_stage4[348] ?
	       sub_mantissa__h148459 :
	       add_mantissa__h148456 ;
  assign _theResult____h175880 =
	     (setCanonicalNaN_reswget_BITS_95_TO_64__q42[30:23] <
	      setCanonicalNaN_reswget_BITS_63_TO_32__q43[30:23]) ?
	       2'b01 :
	       ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[30:23] ==
		 setCanonicalNaN_reswget_BITS_63_TO_32__q43[30:23]) ?
		  ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[22:0] <
		    setCanonicalNaN_reswget_BITS_63_TO_32__q43[22:0]) ?
		     2'b01 :
		     ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[22:0] ==
		       setCanonicalNaN_reswget_BITS_63_TO_32__q43[22:0]) ?
			2'b11 :
			2'b10)) :
		  2'b10) ;
  assign _theResult____h178072 =
	     (ff_input_D_OUT[207:197] < ff_input_D_OUT[143:133]) ?
	       2'b01 :
	       ((ff_input_D_OUT[207:197] == ff_input_D_OUT[143:133]) ?
		  ((ff_input_D_OUT[196:145] < ff_input_D_OUT[132:81]) ?
		     2'b01 :
		     ((ff_input_D_OUT[196:145] == ff_input_D_OUT[132:81]) ?
			2'b11 :
			2'b10)) :
		  2'b10) ;
  assign _theResult____h184172 =
	     (!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	      inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23[31]) ?
	       ~inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] + 32'd1 :
	       inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] ;
  assign _theResult____h184184 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5145[5:0] !=
	     6'd0 ;
  assign _theResult____h189212 =
	     (!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	      inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24[63]) ?
	       ~inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] + 64'd1 :
	       inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] ;
  assign _theResult____h189224 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5021[37:0] !=
	     38'd0 ;
  assign _theResult____h198974 =
	     lv_sign__h198970 ? inp32___1__h199502 : ff_input_D_OUT[176:145] ;
  assign _theResult____h198987 =
	     sign__h203751 ?
	       ~ff_input_D_OUT[208:145] + 64'd1 :
	       ff_input_D_OUT[208:145] ;
  assign _theResult____h203753 =
	     IF_NOT_ff_input_first__327_BIT_1_552_566_AND_f_ETC___d3700[8:0] !=
	     9'd0 ;
  assign _theResult____h25898 =
	     (!inst_spfm_add_sub_ff_stage2[14] &&
	      !inst_spfm_add_sub_ff_stage2_read__43_BIT_15_66_ETC___d768 &&
	      !inst_spfm_add_sub_ff_stage2[16]) ?
	       mantissa3___1__h35120 :
	       73'd0 ;
  assign _theResult____h47498 =
	     inst_spfm_add_sub_ff_stage4[171] ?
	       sub_mantissa__h47497 :
	       add_mantissa__h47494 ;
  assign _theResult____h76491 =
	     inst_dpfpu_divider_rg_stage3[82:26] != 57'd0 ||
	     inst_dpfpu_divider_rg_stage3[83] ||
	     inst_dpfpu_divider_rg_stage3[6] ;
  assign _theResult____h78212 =
	     inst_dpfpu_sqrt_rg_inter_stage[115] ?
	       lv_remainder__h78319 :
	       lv_remainder__h78409 ;
  assign _theResult___fst__h11879 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26] ?
	       inst_spfpu_divider_int_div_wr_final_out_wget[26:0] :
	       _theResult___fst__h11883 ;
  assign _theResult___fst__h11883 =
	     INV_1_MINUS_inst_spfpu_divider_rg_stage2_24_BI_ETC___d190 ?
	       lv_quotient_shiftL_expo__h6150 :
	       lv_quotient_shiftL_zerosMSB__h6152 ;
  assign _theResult___fst__h171386 =
	     inst_dpfm_add_sub_ff_stage5[182] ?
	       inst_dpfm_add_sub_ff_stage5[196:184] :
	       _theResult___fst__h171390 ;
  assign _theResult___fst__h171390 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3191 ?
	       resultant_exponent_sub_zerosMSB__h171054 :
	       13'd0 ;
  assign _theResult___fst__h215537 =
	     ff_input_D_OUT[2] ?
	       _theResult___fst__h215715 :
	       _theResult___fst__h215547 ;
  assign _theResult___fst__h215547 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h215654 :
	       _theResult___fst__h215594 ;
  assign _theResult___fst__h215594 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215256) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h215635 ;
  assign _theResult___fst__h215635 =
	     IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3858 ?
	       _1_CONCAT_IF_getMant32_res_whas__869_THEN_getMa_ETC___d3876[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h215654 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215256) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h215696 ;
  assign _theResult___fst__h215696 =
	     IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3856 ?
	       _1_CONCAT_IF_getMant32_res_whas__869_THEN_getMa_ETC___d3876[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h215715 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h215803 :
	       _theResult___fst__h215743 ;
  assign _theResult___fst__h215743 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215256) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h215785 ;
  assign _theResult___fst__h215785 =
	     IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3853 ?
	       _1_CONCAT_IF_getMant32_res_whas__869_THEN_getMa_ETC___d3876[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h215803 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215256) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h215845 ;
  assign _theResult___fst__h215845 =
	     IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3851 ?
	       _1_CONCAT_IF_getMant32_res_whas__869_THEN_getMa_ETC___d3876[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h216243 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
	     ff_input_D_OUT[1] &&
	     IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d4172 ||
	     lv_invalid__h215256 ;
  assign _theResult___fst__h216364 =
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ||
	     getExp32_res_wget[23:16] != 8'd158 ||
	     getMant32_res_wget[68:46] != 23'd0 ;
  assign _theResult___fst__h216434 =
	     !IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3856 ||
	     lv_invalid__h215256 ;
  assign _theResult___fst__h216508 =
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ||
	     getExp32_res_wget[23:16] != 8'd190 ||
	     getMant32_res_wget[68:46] != 23'd0 ;
  assign _theResult___fst__h216579 =
	     !IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3851 ||
	     lv_invalid__h215256 ;
  assign _theResult___fst__h218327 =
	     ff_input_D_OUT[2] ?
	       _theResult___fst__h218505 :
	       _theResult___fst__h218337 ;
  assign _theResult___fst__h218337 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h218444 :
	       _theResult___fst__h218384 ;
  assign _theResult___fst__h218384 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218042) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h218425 ;
  assign _theResult___fst__h218425 =
	     _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4028 ?
	       _1_CONCAT_IF_getMant64_res_whas__038_THEN_getMa_ETC___d4045[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h218444 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218042) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h218486 ;
  assign _theResult___fst__h218486 =
	     _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4026 ?
	       _1_CONCAT_IF_getMant64_res_whas__038_THEN_getMa_ETC___d4045[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h218505 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h218593 :
	       _theResult___fst__h218533 ;
  assign _theResult___fst__h218533 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218042) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h218575 ;
  assign _theResult___fst__h218575 =
	     _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4023 ?
	       _1_CONCAT_IF_getMant64_res_whas__038_THEN_getMa_ETC___d4045[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h218593 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218042) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h218635 ;
  assign _theResult___fst__h218635 =
	     _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4021 ?
	       _1_CONCAT_IF_getMant64_res_whas__038_THEN_getMa_ETC___d4045[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h219033 =
	     ff_input_D_OUT[208] && ff_input_D_OUT[1] &&
	     _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4208 ||
	     lv_invalid__h218042 ;
  assign _theResult___fst__h219152 =
	     !ff_input_D_OUT[208] || x__h218208[10:0] != 11'd31 ||
	     getMant64_res_wget[155:104] != 52'd0 ;
  assign _theResult___fst__h219222 =
	     !_0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4026 ||
	     lv_invalid__h218042 ;
  assign _theResult___fst__h219296 =
	     !ff_input_D_OUT[208] || x__h218208[10:0] != 11'd63 ||
	     getMant64_res_wget[155:104] != 52'd0 ;
  assign _theResult___fst__h219367 =
	     !_0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4021 ||
	     lv_invalid__h218042 ;
  assign _theResult___fst__h22081 =
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d474 ?
	       _theResult_____1_fst__h22125 :
	       lv_product_exponent_inc_shift__h22073 ;
  assign _theResult___fst__h233283 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[1]) ?
	       _theResult___fst__h233291 :
	       quiet_nan_two__h232851 ;
  assign _theResult___fst__h233291 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) &&
	     quiet_nan_two__h232851 ;
  assign _theResult___fst__h234996 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[1]) ?
	       _theResult___fst__h235004 :
	       quiet_nan_two__h234568 ;
  assign _theResult___fst__h235004 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) &&
	     quiet_nan_two__h234568 ;
  assign _theResult___fst__h58244 =
	     inst_spfm_add_sub_ff_stage5[94] ?
	       inst_spfm_add_sub_ff_stage5[105:96] :
	       _theResult___fst__h58248 ;
  assign _theResult___fst__h58248 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1198 ?
	       resultant_exponent_sub_zerosMSB__h57912 :
	       10'd0 ;
  assign _theResult___fst__h6138 =
	     inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d128 ?
	       27'd1 :
	       _theResult___fst__h6157 ;
  assign _theResult___fst__h6157 =
	     _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d130 ?
	       _theResult___fst__h11879 :
	       lv_quotient___1__h6174 ;
  assign _theResult___fst__h64591 =
	     inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1454 ?
	       56'd1 :
	       _theResult___fst__h64610 ;
  assign _theResult___fst__h64610 =
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_450_BITS__ETC___d1456 ?
	       _theResult___fst__h76277 :
	       lv_quotient___1__h64627 ;
  assign _theResult___fst__h76277 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55] ?
	       inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] :
	       _theResult___fst__h76281 ;
  assign _theResult___fst__h76281 =
	     INV_1_MINUS_inst_dpfpu_divider_rg_stage2_450_B_ETC___d1574 ?
	       lv_quotient_shiftL_expo__h64603 :
	       lv_quotient_shiftL_zerosMSB__h64605 ;
  assign _theResult___fst__h94536 =
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1887 ?
	       _theResult_____1_fst__h94580 :
	       lv_product_exponent_inc_shift__h94528 ;
  assign _theResult___snd__h216361 =
	     IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3858 ?
	       64'd0 :
	       _theResult___snd__h216365 ;
  assign _theResult___snd__h216365 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       64'hFFFFFFFF80000000 :
	       64'h000000007FFFFFFF ;
  assign _theResult___snd__h216435 =
	     (IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3856 ||
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd__h216505 =
	     IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3853 ?
	       64'd0 :
	       _theResult___snd__h216509 ;
  assign _theResult___snd__h216509 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       64'h8000000000000000 :
	       64'h7FFFFFFFFFFFFFFF ;
  assign _theResult___snd__h216580 =
	     (IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3851 ||
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd__h219149 =
	     _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4028 ?
	       64'd0 :
	       _theResult___snd__h219153 ;
  assign _theResult___snd__h219153 =
	     ff_input_D_OUT[208] ?
	       64'hFFFFFFFF80000000 :
	       64'h000000007FFFFFFF ;
  assign _theResult___snd__h219223 =
	     (_0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4026 ||
	      ff_input_D_OUT[208]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd__h219293 =
	     _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4023 ?
	       64'd0 :
	       _theResult___snd__h219297 ;
  assign _theResult___snd__h219297 =
	     ff_input_D_OUT[208] ?
	       64'h8000000000000000 :
	       64'h7FFFFFFFFFFFFFFF ;
  assign _theResult___snd__h219368 =
	     (_0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4021 ||
	      ff_input_D_OUT[208]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd_final_result__h198995 =
	     ff_input_D_OUT[2] ?
	       wr_final_out_final_result__h198993 :
	       res__h198979 ;
  assign _theResult___snd_fst__h11963 =
	     inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127 ?
	       _theResult___snd_fst__h11973 :
	       inst_spfpu_divider_rg_stage2[18:9] ;
  assign _theResult___snd_fst__h11973 =
	     inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d128 ?
	       10'd0 :
	       _theResult___snd_fst__h11981 ;
  assign _theResult___snd_fst__h11981 =
	     _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d130 ?
	       _theResult___snd_fst__h11991 :
	       lv_exponent_inc_shift__h6148 ;
  assign _theResult___snd_fst__h11991 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26] ?
	       inst_spfpu_divider_rg_stage2[18:9] :
	       _theResult___snd_fst__h11993 ;
  assign _theResult___snd_fst__h11993 =
	     INV_1_MINUS_inst_spfpu_divider_rg_stage2_24_BI_ETC___d190 ?
	       lv_exponent_sub_shift__h6151 :
	       lv_exponent_sub_zerosMSB__h6153 ;
  assign _theResult___snd_fst__h171603 =
	     inst_dpfm_add_sub_ff_stage5[182] ?
	       inst_dpfm_add_sub_ff_stage5[183:24] :
	       _theResult___snd_fst__h171605 ;
  assign _theResult___snd_fst__h171605 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3191 ?
	       resultant_mantissa_norm_zerosMSB__h171053 :
	       resultant_mantissa_norm_expo__h171052 ;
  assign _theResult___snd_fst__h215501 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[4] ||
	      IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3840[7] &&
	      !IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3845) ?
	       _theResult___fst__h216243 :
	       _theResult___snd_fst__h215539 ;
  assign _theResult___snd_fst__h215539 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_fst__h215717 :
	       _theResult___snd_fst__h215549 ;
  assign _theResult___snd_fst__h215549 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h215656 :
	       _theResult___snd_fst__h215596 ;
  assign _theResult___snd_fst__h215596 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215256 ||
	      IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3858) ?
	       lv_invalid__h215256 :
	       _theResult___fst__h216364 ;
  assign _theResult___snd_fst__h215656 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215256 ||
	      IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3856) ?
	       lv_invalid__h215256 :
	       _theResult___fst__h216434 ;
  assign _theResult___snd_fst__h215717 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h215805 :
	       _theResult___snd_fst__h215745 ;
  assign _theResult___snd_fst__h215745 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215256 ||
	      IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3853) ?
	       lv_invalid__h215256 :
	       _theResult___fst__h216508 ;
  assign _theResult___snd_fst__h215805 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215256 ||
	      IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3851) ?
	       lv_invalid__h215256 :
	       _theResult___fst__h216579 ;
  assign _theResult___snd_fst__h218291 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[4] ||
	      x__h218208[10] &&
	      !IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d4014) ?
	       _theResult___fst__h219033 :
	       _theResult___snd_fst__h218329 ;
  assign _theResult___snd_fst__h218329 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_fst__h218507 :
	       _theResult___snd_fst__h218339 ;
  assign _theResult___snd_fst__h218339 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h218446 :
	       _theResult___snd_fst__h218386 ;
  assign _theResult___snd_fst__h218386 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218042 ||
	      _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4028) ?
	       lv_invalid__h218042 :
	       _theResult___fst__h219152 ;
  assign _theResult___snd_fst__h218446 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218042 ||
	      _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4026) ?
	       lv_invalid__h218042 :
	       _theResult___fst__h219222 ;
  assign _theResult___snd_fst__h218507 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h218595 :
	       _theResult___snd_fst__h218535 ;
  assign _theResult___snd_fst__h218535 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218042 ||
	      _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4023) ?
	       lv_invalid__h218042 :
	       _theResult___fst__h219296 ;
  assign _theResult___snd_fst__h218595 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218042 ||
	      _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4021) ?
	       lv_invalid__h218042 :
	       _theResult___fst__h219367 ;
  assign _theResult___snd_fst__h22166 =
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d474 ?
	       _theResult_____1_snd__h22126 :
	       lv_product_mantissa___1__h22112 ;
  assign _theResult___snd_fst__h231224 =
	     (ff_input_D_OUT[5:3] == 3'b010 && ff_input_D_OUT[208]) ?
	       32'h80000001 :
	       ((ff_input_D_OUT[5:3] == 3'b011 && !ff_input_D_OUT[208]) ?
		  32'd1 :
		  { ff_input_D_OUT[208], 31'b0 }) ;
  assign _theResult___snd_fst__h58461 =
	     inst_spfm_add_sub_ff_stage5[94] ?
	       inst_spfm_add_sub_ff_stage5[95:23] :
	       _theResult___snd_fst__h58463 ;
  assign _theResult___snd_fst__h58463 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1198 ?
	       resultant_mantissa_norm_zerosMSB__h57911 :
	       resultant_mantissa_norm_expo__h57910 ;
  assign _theResult___snd_fst__h76361 =
	     inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1453 ?
	       _theResult___snd_fst__h76371 :
	       inst_dpfpu_divider_rg_stage2[21:9] ;
  assign _theResult___snd_fst__h76371 =
	     inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1454 ?
	       13'd0 :
	       _theResult___snd_fst__h76379 ;
  assign _theResult___snd_fst__h76379 =
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_450_BITS__ETC___d1456 ?
	       _theResult___snd_fst__h76389 :
	       lv_exponent_inc_shift__h64601 ;
  assign _theResult___snd_fst__h76389 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55] ?
	       inst_dpfpu_divider_rg_stage2[21:9] :
	       _theResult___snd_fst__h76391 ;
  assign _theResult___snd_fst__h76391 =
	     INV_1_MINUS_inst_dpfpu_divider_rg_stage2_450_B_ETC___d1574 ?
	       lv_exponent_sub_shift__h64604 :
	       lv_exponent_sub_zerosMSB__h64606 ;
  assign _theResult___snd_fst__h94621 =
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1887 ?
	       _theResult_____1_snd__h94581 :
	       lv_product_mantissa___1__h94567 ;
  assign _theResult___snd_snd__h216246 =
	     (!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
	      ff_input_D_OUT[5:3] == 3'b011) ?
	       64'd1 :
	       ((ff_input_D_OUT[5:3] == 3'b010 &&
		 setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
		 !ff_input_D_OUT[1]) ?
		  64'hFFFFFFFFFFFFFFFF :
		  IF_IF_getExp32_res_whas__836_THEN_getExp32_res_ETC___d3903) ;
  assign _theResult___snd_snd__h219036 =
	     (!ff_input_D_OUT[208] && ff_input_D_OUT[5:3] == 3'b011) ?
	       64'd1 :
	       ((ff_input_D_OUT[5:3] == 3'b010 && ff_input_D_OUT[208] &&
		 !ff_input_D_OUT[1]) ?
		  64'hFFFFFFFFFFFFFFFF :
		  IF_0b0_CONCAT_IF_getExp64_res_whas__004_THEN_g_ETC___d4071) ;
  assign _theResult___snd_snd_snd_fst__h216296 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_snd_snd_fst__h216442 :
	       _theResult___snd_snd_snd_fst__h216298 ;
  assign _theResult___snd_snd_snd_fst__h216298 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_snd_fst__h216379 :
	       _theResult___snd_snd_snd_fst__h216302 ;
  assign _theResult___snd_snd_snd_fst__h216302 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215256) ?
	       final_result___1__h216306 :
	       _theResult___snd_snd_snd_fst__h216330 ;
  assign _theResult___snd_snd_snd_fst__h216330 =
	     IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3858 ?
	       final_result___1__h215643 :
	       _theResult___snd__h216361 ;
  assign _theResult___snd_snd_snd_fst__h216379 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215256) ?
	       final_result___1__h215675 :
	       _theResult___snd_snd_snd_fst__h216404 ;
  assign _theResult___snd_snd_snd_fst__h216404 =
	     IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3856 ?
	       final_result___1__h215643 :
	       _theResult___snd__h216435 ;
  assign _theResult___snd_snd_snd_fst__h216442 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_snd_fst__h216523 :
	       _theResult___snd_snd_snd_fst__h216446 ;
  assign _theResult___snd_snd_snd_fst__h216446 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215256) ?
	       final_result___1__h215764 :
	       _theResult___snd_snd_snd_fst__h216473 ;
  assign _theResult___snd_snd_snd_fst__h216473 =
	     IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3853 ?
	       _1_CONCAT_IF_getMant32_res_whas__869_THEN_getMa_ETC___d3876[86:23] :
	       _theResult___snd__h216505 ;
  assign _theResult___snd_snd_snd_fst__h216523 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215256) ?
	       final_result___1__h215675 :
	       _theResult___snd_snd_snd_fst__h216548 ;
  assign _theResult___snd_snd_snd_fst__h216548 =
	     IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3851 ?
	       _1_CONCAT_IF_getMant32_res_whas__869_THEN_getMa_ETC___d3876[86:23] :
	       _theResult___snd__h216580 ;
  assign _theResult___snd_snd_snd_fst__h219084 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_snd_snd_fst__h219230 :
	       _theResult___snd_snd_snd_fst__h219086 ;
  assign _theResult___snd_snd_snd_fst__h219086 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_snd_fst__h219167 :
	       _theResult___snd_snd_snd_fst__h219090 ;
  assign _theResult___snd_snd_snd_fst__h219090 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218042) ?
	       final_result___1__h219094 :
	       _theResult___snd_snd_snd_fst__h219118 ;
  assign _theResult___snd_snd_snd_fst__h219118 =
	     _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4028 ?
	       final_result___1__h218433 :
	       _theResult___snd__h219149 ;
  assign _theResult___snd_snd_snd_fst__h219167 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218042) ?
	       final_result___1__h218465 :
	       _theResult___snd_snd_snd_fst__h219192 ;
  assign _theResult___snd_snd_snd_fst__h219192 =
	     _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4026 ?
	       final_result___1__h218433 :
	       _theResult___snd__h219223 ;
  assign _theResult___snd_snd_snd_fst__h219230 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_snd_fst__h219311 :
	       _theResult___snd_snd_snd_fst__h219234 ;
  assign _theResult___snd_snd_snd_fst__h219234 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218042) ?
	       final_result___1__h218554 :
	       _theResult___snd_snd_snd_fst__h219261 ;
  assign _theResult___snd_snd_snd_fst__h219261 =
	     _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4023 ?
	       _1_CONCAT_IF_getMant64_res_whas__038_THEN_getMa_ETC___d4045[115:52] :
	       _theResult___snd__h219293 ;
  assign _theResult___snd_snd_snd_fst__h219311 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218042) ?
	       final_result___1__h218465 :
	       _theResult___snd_snd_snd_fst__h219336 ;
  assign _theResult___snd_snd_snd_fst__h219336 =
	     _0b0_CONCAT_IF_getExp64_res_whas__004_THEN_getE_ETC___d4021 ?
	       _1_CONCAT_IF_getMant64_res_whas__038_THEN_getMa_ETC___d4045[115:52] :
	       _theResult___snd__h219368 ;
  assign _theResult___snd_snd_snd_snd_fst__h216240 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[4] ||
	      IF_getExp32_res_whas__836_THEN_getExp32_res_wg_ETC___d3840[7] &&
	      !IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3845) ?
	       _theResult___snd_snd__h216246 :
	       _theResult___snd_snd_snd_fst__h216296 ;
  assign _theResult___snd_snd_snd_snd_fst__h219030 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[4] ||
	      x__h218208[10] &&
	      !IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d4014) ?
	       _theResult___snd_snd__h219036 :
	       _theResult___snd_snd_snd_fst__h219084 ;
  assign add_mantissa__h148456 =
	     inst_dpfm_add_sub_ff_stage4[332:173] +
	     inst_dpfm_add_sub_ff_stage4[172:13] ;
  assign add_mantissa__h47494 =
	     inst_spfm_add_sub_ff_stage4[158:86] +
	     inst_spfm_add_sub_ff_stage4[85:13] ;
  assign and_sign__h175601 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &
	     setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ;
  assign and_sign__h177825 = ff_input_D_OUT[208] & ff_input_D_OUT[144] ;
  assign condFlags32_argwget_BITS_30_TO_8__q52 = condFlags32_arg_wget[30:8] ;
  assign condFlags32_argwget_BITS_61_TO_39__q51 =
	     condFlags32_arg_wget[61:39] ;
  assign condFlags32_argwget_BITS_92_TO_70__q50 =
	     condFlags32_arg_wget[92:70] ;
  assign condFlags32_reswget_BITS_14_TO_10__q53 =
	     condFlags32_res_wget[14:10] ;
  assign condFlags32_reswget_BITS_9_TO_5__q54 = condFlags32_res_wget[9:5] ;
  assign condFlags64_argwget_BITS_125_TO_74__q31 =
	     condFlags64_arg_wget[125:74] ;
  assign condFlags64_argwget_BITS_188_TO_137__q30 =
	     condFlags64_arg_wget[188:137] ;
  assign condFlags64_argwget_BITS_62_TO_11__q32 =
	     condFlags64_arg_wget[62:11] ;
  assign condFlags64_reswget_BITS_14_TO_10__q33 =
	     condFlags64_res_wget[14:10] ;
  assign condFlags64_reswget_BITS_9_TO_5__q34 = condFlags64_res_wget[9:5] ;
  assign ex_overflow__h171064 =
	     !IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3197 ;
  assign ex_overflow__h57922 =
	     !IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1204 ;
  assign exception__h230578 =
	     IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4318 ?
	       5'd3 :
	       5'd0 ;
  assign exp1__h237389 = exp1_temp__h232855 - { 5'd0, x__h237457 } ;
  assign exp1__h245725 = exp1_temp__h234572 - { 7'd0, x__h245793 } ;
  assign exp1_temp__h232855 = { 2'b0, getExp32_res_wget[23:16] } ;
  assign exp1_temp__h234572 = { 2'b0, getExp64_res_wget[32:22] } ;
  assign exp2__h237390 = exp2_temp__h232856 - { 5'd0, x__h240847 } ;
  assign exp2__h245726 = exp2_temp__h234573 - { 7'd0, x__h253214 } ;
  assign exp2_temp__h232856 = { 2'b0, getExp32_res_wget[15:8] } ;
  assign exp2_temp__h234573 = { 2'b0, getExp64_res_wget[21:11] } ;
  assign expo3_zero__h102237 = inst_dpfm_add_sub_ff_stage2[80:70] != 11'd0 ;
  assign expo3_zero__h25896 = inst_spfm_add_sub_ff_stage2[48:41] != 8'd0 ;
  assign expo___1__h231250 = expo__h230580 + 8'd1 ;
  assign expo__h184174 = 8'd158 - { 3'd0, x__h184334[4:0] } ;
  assign expo__h189214 = 8'd190 - { 2'd0, x__h189392[5:0] } ;
  assign expo__h198977 = 11'd1054 - { 6'd0, x__h199122[4:0] } ;
  assign expo__h198990 = 11'd1086 - { 5'd0, x__h203852[5:0] } ;
  assign expo__h225315 = { 3'd0, getExp32_res_wget[23:16] } + 11'd896 ;
  assign expo__h225374 = 11'd896 - { 6'd0, x__h225379 } ;
  assign expo__h230580 =
	     (IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4318 ||
	      IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4320) ?
	       8'd0 :
	       x__h230465[7:0] ;
  assign exponent2__h102249 =
	     inst_dpfm_add_sub_ff_stage2[5] ?
	       13'd0 :
	       inst_dpfm_add_sub_ff_stage2[201:189] ;
  assign exponent2__h25908 =
	     inst_spfm_add_sub_ff_stage2[5] ?
	       10'd0 :
	       inst_spfm_add_sub_ff_stage2[108:99] ;
  assign exponent3__h102228 = { 2'b0, inst_dpfm_add_sub_ff_stage2[80:70] } ;
  assign exponent3__h102240 =
	     exponent3__h102228 + { 12'd0, inst_dpfm_add_sub_ff_stage2[17] } ;
  assign exponent3__h25887 = { 2'b0, inst_spfm_add_sub_ff_stage2[48:41] } ;
  assign exponent3__h25899 =
	     exponent3__h25887 + { 9'd0, inst_spfm_add_sub_ff_stage2[17] } ;
  assign exponent___1__h263081 = exponent__h262438 + 9'd1 ;
  assign exponent___1__h272098 = lv_exp__h218052 + 12'd1 ;
  assign exponent__h262438 = { 1'b0, getExp32_res_wget[23:16] } ;
  assign exponent_difference__h102263 =
	     lv_minuend__h102259 - _theResult_____4_snd_fst__h102468 ;
  assign exponent_difference__h25922 =
	     lv_minuend__h25918 - _theResult_____4_snd_fst__h26127 ;
  assign ff_inputD_OUT_BITS_176_TO_145__q1 = ff_input_D_OUT[176:145] ;
  assign ff_input_first__327_BITS_12_TO_8_328_EQ_0b100__ETC___d3353 =
	     ff_input_D_OUT[12:8] == 5'b00100 ||
	     ff_input_D_OUT[12:8] == 5'b11000 ||
	     ff_input_D_OUT[12:8] == 5'b11100 &&
	     ff_input_D_OUT[5:3] == 3'b001 ||
	     ff_input_D_OUT[12:8] == 5'b01000 ||
	     (ff_input_D_OUT[12:6] == 7'b1110000 ||
	      ff_input_D_OUT[12:6] == 7'b1111000 ||
	      ff_input_D_OUT[12:6] == 7'b1110001 ||
	      ff_input_D_OUT[12:6] == 7'b1111001) &&
	     ff_input_D_OUT[5:3] == 3'b0 ;
  assign ff_input_first__327_BITS_12_TO_8_328_EQ_0b10_5_ETC___d4552 =
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ||
	     NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d4551 ;
  assign ff_input_first__327_BITS_12_TO_8_328_EQ_0b10_5_ETC___d4738 =
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ||
	     NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d4737 ;
  assign ff_input_first__327_BITS_12_TO_8_328_EQ_0b1100_ETC___d4615 =
	     (ff_input_D_OUT[12:8] == 5'b11000 ||
	      ff_input_D_OUT[12:8] == 5'b11100 &&
	      ff_input_D_OUT[5:3] == 3'b001 ||
	      ff_input_D_OUT[12:8] == 5'b01000) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ;
  assign ff_input_first__327_BIT_0_359_AND_NOT_IF_condF_ETC___d5223 =
	     ff_input_D_OUT[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4317 ;
  assign ff_input_first__327_BIT_208_465_XOR_ff_input_f_ETC___d3828 =
	     ff_input_D_OUT[208] ^ ff_input_D_OUT[144] ;
  assign ff_input_first__327_BIT_2_541_AND_NOT_ff_input_ETC___d3973 =
	     ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd189 &&
	     final_result__h215276[62:0] == 63'h7FFFFFFFFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign ff_input_first__327_BIT_2_541_AND_NOT_ff_input_ETC___d4138 =
	     ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     x__h218208[10:0] == 11'd62 &&
	     final_result__h218063[62:0] == 63'h7FFFFFFFFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign ff_input_first__327_BIT_2_541_AND_ff_input_fir_ETC___d3979 =
	     ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd190 &&
	     final_result__h215276 == 64'hFFFFFFFFFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign ff_input_first__327_BIT_2_541_AND_ff_input_fir_ETC___d4143 =
	     ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     x__h218208[10:0] == 11'd63 &&
	     final_result__h218063 == 64'hFFFFFFFFFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign fflags__h14190 = { 4'b0, lv_inexact__h14150 } ;
  assign fflags__h171095 =
	     { !inst_dpfm_add_sub_ff_stage5[10] &&
	       !inst_dpfm_add_sub_ff_stage5[9] &&
	       inst_dpfm_add_sub_ff_stage5[17],
	       1'b0,
	       _theResult_____1_snd_snd_fst__h171950,
	       _theResult_____1_fst__h171922,
	       _theResult_____1_snd_snd_snd__h171951 } ;
  assign fflags__h184189 = { 4'd0, inexact__h184185 } ;
  assign fflags__h189229 = { 4'd0, inexact__h189225 } ;
  assign fflags__h262687 =
	     { condFlags32_reswget_BITS_14_TO_10__q53[0] | y__h262701,
	       4'b0 } ;
  assign fflags__h271698 =
	     { condFlags64_reswget_BITS_14_TO_10__q33[0] | y__h271712,
	       4'b0 } ;
  assign fflags__h57953 =
	     { !inst_spfm_add_sub_ff_stage5[9] &&
	       !inst_spfm_add_sub_ff_stage5[8] &&
	       inst_spfm_add_sub_ff_stage5[16],
	       1'b0,
	       _theResult_____1_snd_snd_fst__h58808,
	       _theResult_____1_fst__h58780,
	       _theResult_____1_snd_snd_snd__h58809 } ;
  assign fflags__h78587 = { 4'b0, lv_inexact__h78547 } ;
  assign final_man__h215268 = { 64'd1, getMant32_res_wget[68:46] } ;
  assign final_man__h218055 = { 64'd1, getMant64_res_wget[155:104] } ;
  assign final_result___1__h215643 =
	     { {32{_1_CONCAT_IF_getMant32_res_whas__869_THEN_getMa_ETC__q49[31]}},
	       _1_CONCAT_IF_getMant32_res_whas__869_THEN_getMa_ETC__q49 } ;
  assign final_result___1__h215675 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       (lv_invalid__h215256 ? 64'hFFFFFFFFFFFFFFFF : 64'd0) :
	       64'hFFFFFFFFFFFFFFFF ;
  assign final_result___1__h215764 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       (lv_invalid__h215256 ?
		  64'h7FFFFFFFFFFFFFFF :
		  64'h8000000000000000) :
	       64'h7FFFFFFFFFFFFFFF ;
  assign final_result___1__h216306 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       (lv_invalid__h215256 ?
		  64'h000000007FFFFFFF :
		  64'hFFFFFFFF80000000) :
	       64'h000000007FFFFFFF ;
  assign final_result___1__h216905 =
	     { {32{final_result___216866_BITS_31_TO_0__q56[31]}},
	       final_result___216866_BITS_31_TO_0__q56 } ;
  assign final_result___1__h216935 =
	     { {32{final_result___215925_BITS_31_TO_0__q57[31]}},
	       final_result___215925_BITS_31_TO_0__q57 } ;
  assign final_result___1__h218433 =
	     { {32{_1_CONCAT_IF_getMant64_res_whas__038_THEN_getMa_ETC__q29[31]}},
	       _1_CONCAT_IF_getMant64_res_whas__038_THEN_getMa_ETC__q29 } ;
  assign final_result___1__h218465 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h218042 ? 64'hFFFFFFFFFFFFFFFF : 64'd0) :
	       64'hFFFFFFFFFFFFFFFF ;
  assign final_result___1__h218554 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h218042 ?
		  64'h7FFFFFFFFFFFFFFF :
		  64'h8000000000000000) :
	       64'h7FFFFFFFFFFFFFFF ;
  assign final_result___1__h219094 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h218042 ?
		  64'h000000007FFFFFFF :
		  64'hFFFFFFFF80000000) :
	       64'h000000007FFFFFFF ;
  assign final_result___1__h219691 =
	     { {32{final_result___219652_BITS_31_TO_0__q36[31]}},
	       final_result___219652_BITS_31_TO_0__q36 } ;
  assign final_result___1__h219721 =
	     { {32{final_result___218714_BITS_31_TO_0__q37[31]}},
	       final_result___218714_BITS_31_TO_0__q37 } ;
  assign final_result___215925_BITS_31_TO_0__q57 =
	     final_result___2__h215925[31:0] ;
  assign final_result___216866_BITS_31_TO_0__q56 =
	     final_result___2__h216866[31:0] ;
  assign final_result___218714_BITS_31_TO_0__q37 =
	     final_result___2__h218714[31:0] ;
  assign final_result___219652_BITS_31_TO_0__q36 =
	     final_result___2__h219652[31:0] ;
  assign final_result___2__h215925 = ~final_result___3__h215877 + 64'd1 ;
  assign final_result___2__h216866 = final_result__h215276 + 64'd1 ;
  assign final_result___2__h218714 = ~final_result___3__h218667 + 64'd1 ;
  assign final_result___2__h219652 = final_result__h218063 + 64'd1 ;
  assign final_result___3__h215877 =
	     IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d3952 ?
	       _theResult_____2_snd__h216654 :
	       final_result__h215276 ;
  assign final_result___3__h218667 =
	     IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d4120 ?
	       _theResult_____2_snd__h219442 :
	       final_result__h218063 ;
  assign final_result__h14155 =
	     { inst_spfpu_sqrt_rg_inter_stage[58],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__81__ETC__q4[7:0],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__81__ETC__q5[24:2] } ;
  assign final_result__h215276 =
	     condFlags32_reswget_BITS_14_TO_10__q53[3] ?
	       64'd0 :
	       _theResult___snd_snd_snd_snd_fst__h216240 ;
  assign final_result__h218063 =
	     condFlags64_reswget_BITS_14_TO_10__q33[3] ?
	       64'd0 :
	       _theResult___snd_snd_snd_snd_fst__h219030 ;
  assign final_result__h231448 =
	     { {32{ff_inputD_OUT_BITS_176_TO_145__q1[31]}},
	       ff_inputD_OUT_BITS_176_TO_145__q1 } ;
  assign final_result__h231471 = { 32'hFFFFFFFF, ff_input_D_OUT[176:145] } ;
  assign final_result__h262888 = { ff_input_D_OUT[176], 31'd0 } ;
  assign final_result__h271899 = { ff_input_D_OUT[208], 63'd0 } ;
  assign final_result__h78552 =
	     { inst_dpfpu_sqrt_rg_inter_stage[116],
	       IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__794_ETC__q6[10:0],
	       IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__794_ETC__q7[53:2] } ;
  assign fman___1__h231247 = fman__h230914 + 24'd1 ;
  assign fman__h230914 =
	     { 1'd0,
	       IF_IF_getExp64_res_whas__004_THEN_getExp64_res_ETC___d4328[48:26] } ;
  assign getMant32_argwget_BITS_31_TO_0__q47 = getMant32_arg_wget[31:0] ;
  assign getMant32_argwget_BITS_63_TO_32__q46 = getMant32_arg_wget[63:32] ;
  assign getMant32_argwget_BITS_95_TO_64__q45 = getMant32_arg_wget[95:64] ;
  assign getMant32_reswget_BITS_45_TO_23__q55 = getMant32_res_wget[45:23] ;
  assign getMant32_reswget_BITS_68_TO_46__q48 = getMant32_res_wget[68:46] ;
  assign getMant64_argwget_BITS_127_TO_64__q26 = getMant64_arg_wget[127:64] ;
  assign getMant64_argwget_BITS_191_TO_128__q25 =
	     getMant64_arg_wget[191:128] ;
  assign getMant64_argwget_BITS_63_TO_0__q27 = getMant64_arg_wget[63:0] ;
  assign getMant64_reswget_BITS_103_TO_52__q35 = getMant64_res_wget[103:52] ;
  assign getMant64_reswget_BITS_155_TO_104__q28 =
	     getMant64_res_wget[155:104] ;
  assign inexact__h184185 = x__h184203 | _theResult____h184184 ;
  assign inexact__h189225 = x__h189243 | _theResult____h189224 ;
  assign inexact__h203754 = x__h203772 | _theResult____h203753 ;
  assign inp32___1__h199502 = ~ff_input_D_OUT[176:145] + 32'd1 ;
  assign inst_dpfm_add_sub_ff_input_register_read__873__ETC___d1877 =
	     inst_dpfm_add_sub_ff_input_register[94:82] - 13'd1023 ;
  assign inst_dpfm_add_sub_ff_input_register_read__873__ETC___d1878 =
	     (inst_dpfm_add_sub_ff_input_register_read__873__ETC___d1877 ^
	      13'h1000) <=
	     13'd5119 ;
  assign inst_dpfm_add_sub_ff_stage2_read__388_BIT_15_4_ETC___d2413 =
	     inst_dpfm_add_sub_ff_stage2[15] |
	     inst_dpfm_add_sub_ff_stage2[13] ;
  assign inst_dpfm_add_sub_ff_stage5_read__171_BIT_15_1_ETC___d3298 =
	     inst_dpfm_add_sub_ff_stage5[15] ||
	     (inst_dpfm_add_sub_ff_stage5[183] ||
	      inst_dpfm_add_sub_ff_stage5[182] ||
	      _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3191 ||
	      !lv_inexact__h171072) &&
	     IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_BI_ETC___d3292 ||
	     !IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3259[52] ||
	     inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[171:2] ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q17 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[112:0],
	       1'd0 } +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       57'd0 } ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q18 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[112:0],
	       1'd0 } -
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       57'd0 } ;
  assign inst_dpfpu_divider_int_div_wr_final_out_wget___ETC___d1579 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] >>
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_450_BITS__ETC___d1455 ;
  assign inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1452 =
	     inst_dpfpu_divider_rg_stage2[21:9] - 13'd1023 ;
  assign inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1453 =
	     (inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1452 ^
	      13'h1000) <=
	     13'd5120 ;
  assign inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1454 =
	     (inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1452 ^
	      13'h1000) <
	     13'd3020 ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24 =
	     inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23 =
	     inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] ;
  assign inst_spfm_add_sub_ff_input_register_read__60_B_ETC___d464 =
	     inst_spfm_add_sub_ff_input_register[59:50] - 10'd127 ;
  assign inst_spfm_add_sub_ff_input_register_read__60_B_ETC___d465 =
	     (inst_spfm_add_sub_ff_input_register_read__60_B_ETC___d464 ^
	      10'h200) <=
	     10'd639 ;
  assign inst_spfm_add_sub_ff_stage2_read__43_BIT_15_66_ETC___d768 =
	     inst_spfm_add_sub_ff_stage2[15] |
	     inst_spfm_add_sub_ff_stage2[13] ;
  assign inst_spfm_add_sub_ff_stage5_read__178_BIT_14_1_ETC___d1305 =
	     inst_spfm_add_sub_ff_stage5[14] ||
	     (inst_spfm_add_sub_ff_stage5[95] ||
	      inst_spfm_add_sub_ff_stage5[94] ||
	      _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1198 ||
	      !lv_inexact__h57930) &&
	     IF_IF_inst_spfm_add_sub_ff_stage5_read__178_BI_ETC___d1299 ||
	     !IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1266[23] ||
	     inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[54:0],
	       1'd0 } +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q11 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[54:0],
	       1'd0 } -
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[84:2] ;
  assign inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d195 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26:0] >>
	     _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d129 ;
  assign inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d126 =
	     inst_spfpu_divider_rg_stage2[18:9] - 10'd127 ;
  assign inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127 =
	     (inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d126 ^
	      10'h200) <=
	     10'd640 ;
  assign inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d128 =
	     (inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d126 ^
	      10'h200) <
	     10'd361 ;
  assign local_expo___1__h189040 = expo__h184174 + 8'd1 ;
  assign local_expo___1__h198579 = expo__h189214 + 8'd1 ;
  assign local_expo___1__h213029 = expo__h198990 + 11'd1 ;
  assign lsb_zeros__h22071 =
	     lv_product_mantissa__h22067[0] ?
	       6'd0 :
	       (lv_product_mantissa__h22067[1] ?
		  6'd1 :
		  (lv_product_mantissa__h22067[2] ?
		     6'd2 :
		     (lv_product_mantissa__h22067[3] ?
			6'd3 :
			(lv_product_mantissa__h22067[4] ?
			   6'd4 :
			   (lv_product_mantissa__h22067[5] ?
			      6'd5 :
			      (lv_product_mantissa__h22067[6] ?
				 6'd6 :
				 (lv_product_mantissa__h22067[7] ?
				    6'd7 :
				    (lv_product_mantissa__h22067[8] ?
				       6'd8 :
				       (lv_product_mantissa__h22067[9] ?
					  6'd9 :
					  (lv_product_mantissa__h22067[10] ?
					     6'd10 :
					     (lv_product_mantissa__h22067[11] ?
						6'd11 :
						(lv_product_mantissa__h22067[12] ?
						   6'd12 :
						   (lv_product_mantissa__h22067[13] ?
						      6'd13 :
						      (lv_product_mantissa__h22067[14] ?
							 6'd14 :
							 (lv_product_mantissa__h22067[15] ?
							    6'd15 :
							    (lv_product_mantissa__h22067[16] ?
							       6'd16 :
							       (lv_product_mantissa__h22067[17] ?
								  6'd17 :
								  (lv_product_mantissa__h22067[18] ?
								     6'd18 :
								     (lv_product_mantissa__h22067[19] ?
									6'd19 :
									(lv_product_mantissa__h22067[20] ?
									   6'd20 :
									   (lv_product_mantissa__h22067[21] ?
									      6'd21 :
									      (lv_product_mantissa__h22067[22] ?
										 6'd22 :
										 (lv_product_mantissa__h22067[23] ?
										    6'd23 :
										    (lv_product_mantissa__h22067[24] ?
										       6'd24 :
										       (lv_product_mantissa__h22067[25] ?
											  6'd25 :
											  (lv_product_mantissa__h22067[26] ?
											     6'd26 :
											     (lv_product_mantissa__h22067[27] ?
												6'd27 :
												(lv_product_mantissa__h22067[28] ?
												   6'd28 :
												   (lv_product_mantissa__h22067[29] ?
												      6'd29 :
												      (lv_product_mantissa__h22067[30] ?
													 6'd30 :
													 (lv_product_mantissa__h22067[31] ?
													    6'd31 :
													    (lv_product_mantissa__h22067[32] ?
													       6'd32 :
													       (lv_product_mantissa__h22067[33] ?
														  6'd33 :
														  (lv_product_mantissa__h22067[34] ?
														     6'd34 :
														     (lv_product_mantissa__h22067[35] ?
															6'd35 :
															(lv_product_mantissa__h22067[36] ?
															   6'd36 :
															   (lv_product_mantissa__h22067[37] ?
															      6'd37 :
															      (lv_product_mantissa__h22067[38] ?
																 6'd38 :
																 (lv_product_mantissa__h22067[39] ?
																    6'd39 :
																    (lv_product_mantissa__h22067[40] ?
																       6'd40 :
																       (lv_product_mantissa__h22067[41] ?
																	  6'd41 :
																	  (lv_product_mantissa__h22067[42] ?
																	     6'd42 :
																	     (lv_product_mantissa__h22067[43] ?
																		6'd43 :
																		(lv_product_mantissa__h22067[44] ?
																		   6'd44 :
																		   (lv_product_mantissa__h22067[45] ?
																		      6'd45 :
																		      (lv_product_mantissa__h22067[46] ?
																			 6'd46 :
																			 (lv_product_mantissa__h22067[47] ?
																			    6'd47 :
																			    (lv_product_mantissa__h22067[48] ?
																			       6'd48 :
																			       6'd49)))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lsb_zeros__h6146 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[0] ?
	       5'd0 :
	       (inst_spfpu_divider_int_div_wr_final_out_wget[1] ?
		  5'd1 :
		  (inst_spfpu_divider_int_div_wr_final_out_wget[2] ?
		     5'd2 :
		     (inst_spfpu_divider_int_div_wr_final_out_wget[3] ?
			5'd3 :
			(inst_spfpu_divider_int_div_wr_final_out_wget[4] ?
			   5'd4 :
			   (inst_spfpu_divider_int_div_wr_final_out_wget[5] ?
			      5'd5 :
			      (inst_spfpu_divider_int_div_wr_final_out_wget[6] ?
				 5'd6 :
				 (inst_spfpu_divider_int_div_wr_final_out_wget[7] ?
				    5'd7 :
				    (inst_spfpu_divider_int_div_wr_final_out_wget[8] ?
				       5'd8 :
				       (inst_spfpu_divider_int_div_wr_final_out_wget[9] ?
					  5'd9 :
					  (inst_spfpu_divider_int_div_wr_final_out_wget[10] ?
					     5'd10 :
					     (inst_spfpu_divider_int_div_wr_final_out_wget[11] ?
						5'd11 :
						(inst_spfpu_divider_int_div_wr_final_out_wget[12] ?
						   5'd12 :
						   (inst_spfpu_divider_int_div_wr_final_out_wget[13] ?
						      5'd13 :
						      (inst_spfpu_divider_int_div_wr_final_out_wget[14] ?
							 5'd14 :
							 (inst_spfpu_divider_int_div_wr_final_out_wget[15] ?
							    5'd15 :
							    (inst_spfpu_divider_int_div_wr_final_out_wget[16] ?
							       5'd16 :
							       (inst_spfpu_divider_int_div_wr_final_out_wget[17] ?
								  5'd17 :
								  (inst_spfpu_divider_int_div_wr_final_out_wget[18] ?
								     5'd18 :
								     (inst_spfpu_divider_int_div_wr_final_out_wget[19] ?
									5'd19 :
									(inst_spfpu_divider_int_div_wr_final_out_wget[20] ?
									   5'd20 :
									   (inst_spfpu_divider_int_div_wr_final_out_wget[21] ?
									      5'd21 :
									      (inst_spfpu_divider_int_div_wr_final_out_wget[22] ?
										 5'd22 :
										 (inst_spfpu_divider_int_div_wr_final_out_wget[23] ?
										    5'd23 :
										    (inst_spfpu_divider_int_div_wr_final_out_wget[24] ?
										       5'd24 :
										       (inst_spfpu_divider_int_div_wr_final_out_wget[25] ?
											  5'd25 :
											  (inst_spfpu_divider_int_div_wr_final_out_wget[26] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign lsb_zeros__h64599 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[0] ?
	       6'd0 :
	       (inst_dpfpu_divider_int_div_wr_final_out_wget[1] ?
		  6'd1 :
		  (inst_dpfpu_divider_int_div_wr_final_out_wget[2] ?
		     6'd2 :
		     (inst_dpfpu_divider_int_div_wr_final_out_wget[3] ?
			6'd3 :
			(inst_dpfpu_divider_int_div_wr_final_out_wget[4] ?
			   6'd4 :
			   (inst_dpfpu_divider_int_div_wr_final_out_wget[5] ?
			      6'd5 :
			      (inst_dpfpu_divider_int_div_wr_final_out_wget[6] ?
				 6'd6 :
				 (inst_dpfpu_divider_int_div_wr_final_out_wget[7] ?
				    6'd7 :
				    (inst_dpfpu_divider_int_div_wr_final_out_wget[8] ?
				       6'd8 :
				       (inst_dpfpu_divider_int_div_wr_final_out_wget[9] ?
					  6'd9 :
					  (inst_dpfpu_divider_int_div_wr_final_out_wget[10] ?
					     6'd10 :
					     (inst_dpfpu_divider_int_div_wr_final_out_wget[11] ?
						6'd11 :
						(inst_dpfpu_divider_int_div_wr_final_out_wget[12] ?
						   6'd12 :
						   (inst_dpfpu_divider_int_div_wr_final_out_wget[13] ?
						      6'd13 :
						      (inst_dpfpu_divider_int_div_wr_final_out_wget[14] ?
							 6'd14 :
							 (inst_dpfpu_divider_int_div_wr_final_out_wget[15] ?
							    6'd15 :
							    (inst_dpfpu_divider_int_div_wr_final_out_wget[16] ?
							       6'd16 :
							       (inst_dpfpu_divider_int_div_wr_final_out_wget[17] ?
								  6'd17 :
								  (inst_dpfpu_divider_int_div_wr_final_out_wget[18] ?
								     6'd18 :
								     (inst_dpfpu_divider_int_div_wr_final_out_wget[19] ?
									6'd19 :
									(inst_dpfpu_divider_int_div_wr_final_out_wget[20] ?
									   6'd20 :
									   (inst_dpfpu_divider_int_div_wr_final_out_wget[21] ?
									      6'd21 :
									      (inst_dpfpu_divider_int_div_wr_final_out_wget[22] ?
										 6'd22 :
										 (inst_dpfpu_divider_int_div_wr_final_out_wget[23] ?
										    6'd23 :
										    (inst_dpfpu_divider_int_div_wr_final_out_wget[24] ?
										       6'd24 :
										       (inst_dpfpu_divider_int_div_wr_final_out_wget[25] ?
											  6'd25 :
											  (inst_dpfpu_divider_int_div_wr_final_out_wget[26] ?
											     6'd26 :
											     (inst_dpfpu_divider_int_div_wr_final_out_wget[27] ?
												6'd27 :
												(inst_dpfpu_divider_int_div_wr_final_out_wget[28] ?
												   6'd28 :
												   (inst_dpfpu_divider_int_div_wr_final_out_wget[29] ?
												      6'd29 :
												      (inst_dpfpu_divider_int_div_wr_final_out_wget[30] ?
													 6'd30 :
													 (inst_dpfpu_divider_int_div_wr_final_out_wget[31] ?
													    6'd31 :
													    (inst_dpfpu_divider_int_div_wr_final_out_wget[32] ?
													       6'd32 :
													       (inst_dpfpu_divider_int_div_wr_final_out_wget[33] ?
														  6'd33 :
														  (inst_dpfpu_divider_int_div_wr_final_out_wget[34] ?
														     6'd34 :
														     (inst_dpfpu_divider_int_div_wr_final_out_wget[35] ?
															6'd35 :
															(inst_dpfpu_divider_int_div_wr_final_out_wget[36] ?
															   6'd36 :
															   (inst_dpfpu_divider_int_div_wr_final_out_wget[37] ?
															      6'd37 :
															      (inst_dpfpu_divider_int_div_wr_final_out_wget[38] ?
																 6'd38 :
																 (inst_dpfpu_divider_int_div_wr_final_out_wget[39] ?
																    6'd39 :
																    (inst_dpfpu_divider_int_div_wr_final_out_wget[40] ?
																       6'd40 :
																       (inst_dpfpu_divider_int_div_wr_final_out_wget[41] ?
																	  6'd41 :
																	  (inst_dpfpu_divider_int_div_wr_final_out_wget[42] ?
																	     6'd42 :
																	     (inst_dpfpu_divider_int_div_wr_final_out_wget[43] ?
																		6'd43 :
																		(inst_dpfpu_divider_int_div_wr_final_out_wget[44] ?
																		   6'd44 :
																		   (inst_dpfpu_divider_int_div_wr_final_out_wget[45] ?
																		      6'd45 :
																		      (inst_dpfpu_divider_int_div_wr_final_out_wget[46] ?
																			 6'd46 :
																			 (inst_dpfpu_divider_int_div_wr_final_out_wget[47] ?
																			    6'd47 :
																			    (inst_dpfpu_divider_int_div_wr_final_out_wget[48] ?
																			       6'd48 :
																			       (inst_dpfpu_divider_int_div_wr_final_out_wget[49] ?
																				  6'd49 :
																				  (inst_dpfpu_divider_int_div_wr_final_out_wget[50] ?
																				     6'd50 :
																				     (inst_dpfpu_divider_int_div_wr_final_out_wget[51] ?
																					6'd51 :
																					(inst_dpfpu_divider_int_div_wr_final_out_wget[52] ?
																					   6'd52 :
																					   (inst_dpfpu_divider_int_div_wr_final_out_wget[53] ?
																					      6'd53 :
																					      (inst_dpfpu_divider_int_div_wr_final_out_wget[54] ?
																						 6'd54 :
																						 (inst_dpfpu_divider_int_div_wr_final_out_wget[55] ?
																						    6'd55 :
																						    6'd56))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lsb_zeros__h94526 =
	     lv_product_mantissa__h94522[0] ?
	       7'd0 :
	       (lv_product_mantissa__h94522[1] ?
		  7'd1 :
		  (lv_product_mantissa__h94522[2] ?
		     7'd2 :
		     (lv_product_mantissa__h94522[3] ?
			7'd3 :
			(lv_product_mantissa__h94522[4] ?
			   7'd4 :
			   (lv_product_mantissa__h94522[5] ?
			      7'd5 :
			      (lv_product_mantissa__h94522[6] ?
				 7'd6 :
				 (lv_product_mantissa__h94522[7] ?
				    7'd7 :
				    (lv_product_mantissa__h94522[8] ?
				       7'd8 :
				       (lv_product_mantissa__h94522[9] ?
					  7'd9 :
					  (lv_product_mantissa__h94522[10] ?
					     7'd10 :
					     (lv_product_mantissa__h94522[11] ?
						7'd11 :
						(lv_product_mantissa__h94522[12] ?
						   7'd12 :
						   (lv_product_mantissa__h94522[13] ?
						      7'd13 :
						      (lv_product_mantissa__h94522[14] ?
							 7'd14 :
							 (lv_product_mantissa__h94522[15] ?
							    7'd15 :
							    (lv_product_mantissa__h94522[16] ?
							       7'd16 :
							       (lv_product_mantissa__h94522[17] ?
								  7'd17 :
								  (lv_product_mantissa__h94522[18] ?
								     7'd18 :
								     (lv_product_mantissa__h94522[19] ?
									7'd19 :
									(lv_product_mantissa__h94522[20] ?
									   7'd20 :
									   (lv_product_mantissa__h94522[21] ?
									      7'd21 :
									      (lv_product_mantissa__h94522[22] ?
										 7'd22 :
										 (lv_product_mantissa__h94522[23] ?
										    7'd23 :
										    (lv_product_mantissa__h94522[24] ?
										       7'd24 :
										       (lv_product_mantissa__h94522[25] ?
											  7'd25 :
											  (lv_product_mantissa__h94522[26] ?
											     7'd26 :
											     (lv_product_mantissa__h94522[27] ?
												7'd27 :
												(lv_product_mantissa__h94522[28] ?
												   7'd28 :
												   (lv_product_mantissa__h94522[29] ?
												      7'd29 :
												      (lv_product_mantissa__h94522[30] ?
													 7'd30 :
													 (lv_product_mantissa__h94522[31] ?
													    7'd31 :
													    (lv_product_mantissa__h94522[32] ?
													       7'd32 :
													       (lv_product_mantissa__h94522[33] ?
														  7'd33 :
														  (lv_product_mantissa__h94522[34] ?
														     7'd34 :
														     (lv_product_mantissa__h94522[35] ?
															7'd35 :
															(lv_product_mantissa__h94522[36] ?
															   7'd36 :
															   (lv_product_mantissa__h94522[37] ?
															      7'd37 :
															      (lv_product_mantissa__h94522[38] ?
																 7'd38 :
																 (lv_product_mantissa__h94522[39] ?
																    7'd39 :
																    (lv_product_mantissa__h94522[40] ?
																       7'd40 :
																       (lv_product_mantissa__h94522[41] ?
																	  7'd41 :
																	  (lv_product_mantissa__h94522[42] ?
																	     7'd42 :
																	     (lv_product_mantissa__h94522[43] ?
																		7'd43 :
																		(lv_product_mantissa__h94522[44] ?
																		   7'd44 :
																		   (lv_product_mantissa__h94522[45] ?
																		      7'd45 :
																		      (lv_product_mantissa__h94522[46] ?
																			 7'd46 :
																			 (lv_product_mantissa__h94522[47] ?
																			    7'd47 :
																			    (lv_product_mantissa__h94522[48] ?
																			       7'd48 :
																			       (lv_product_mantissa__h94522[49] ?
																				  7'd49 :
																				  (lv_product_mantissa__h94522[50] ?
																				     7'd50 :
																				     (lv_product_mantissa__h94522[51] ?
																					7'd51 :
																					(lv_product_mantissa__h94522[52] ?
																					   7'd52 :
																					   (lv_product_mantissa__h94522[53] ?
																					      7'd53 :
																					      (lv_product_mantissa__h94522[54] ?
																						 7'd54 :
																						 (lv_product_mantissa__h94522[55] ?
																						    7'd55 :
																						    (lv_product_mantissa__h94522[56] ?
																						       7'd56 :
																						       (lv_product_mantissa__h94522[57] ?
																							  7'd57 :
																							  (lv_product_mantissa__h94522[58] ?
																							     7'd58 :
																							     (lv_product_mantissa__h94522[59] ?
																								7'd59 :
																								(lv_product_mantissa__h94522[60] ?
																								   7'd60 :
																								   (lv_product_mantissa__h94522[61] ?
																								      7'd61 :
																								      (lv_product_mantissa__h94522[62] ?
																									 7'd62 :
																									 (lv_product_mantissa__h94522[63] ?
																									    7'd63 :
																									    (lv_product_mantissa__h94522[64] ?
																									       7'd64 :
																									       (lv_product_mantissa__h94522[65] ?
																										  7'd65 :
																										  (lv_product_mantissa__h94522[66] ?
																										     7'd66 :
																										     (lv_product_mantissa__h94522[67] ?
																											7'd67 :
																											(lv_product_mantissa__h94522[68] ?
																											   7'd68 :
																											   (lv_product_mantissa__h94522[69] ?
																											      7'd69 :
																											      (lv_product_mantissa__h94522[70] ?
																												 7'd70 :
																												 (lv_product_mantissa__h94522[71] ?
																												    7'd71 :
																												    (lv_product_mantissa__h94522[72] ?
																												       7'd72 :
																												       (lv_product_mantissa__h94522[73] ?
																													  7'd73 :
																													  (lv_product_mantissa__h94522[74] ?
																													     7'd74 :
																													     (lv_product_mantissa__h94522[75] ?
																														7'd75 :
																														(lv_product_mantissa__h94522[76] ?
																														   7'd76 :
																														   (lv_product_mantissa__h94522[77] ?
																														      7'd77 :
																														      (lv_product_mantissa__h94522[78] ?
																															 7'd78 :
																															 (lv_product_mantissa__h94522[79] ?
																															    7'd79 :
																															    (lv_product_mantissa__h94522[80] ?
																															       7'd80 :
																															       (lv_product_mantissa__h94522[81] ?
																																  7'd81 :
																																  (lv_product_mantissa__h94522[82] ?
																																     7'd82 :
																																     (lv_product_mantissa__h94522[83] ?
																																	7'd83 :
																																	(lv_product_mantissa__h94522[84] ?
																																	   7'd84 :
																																	   (lv_product_mantissa__h94522[85] ?
																																	      7'd85 :
																																	      (lv_product_mantissa__h94522[86] ?
																																		 7'd86 :
																																		 (lv_product_mantissa__h94522[87] ?
																																		    7'd87 :
																																		    (lv_product_mantissa__h94522[88] ?
																																		       7'd88 :
																																		       (lv_product_mantissa__h94522[89] ?
																																			  7'd89 :
																																			  (lv_product_mantissa__h94522[90] ?
																																			     7'd90 :
																																			     (lv_product_mantissa__h94522[91] ?
																																				7'd91 :
																																				(lv_product_mantissa__h94522[92] ?
																																				   7'd92 :
																																				   (lv_product_mantissa__h94522[93] ?
																																				      7'd93 :
																																				      (lv_product_mantissa__h94522[94] ?
																																					 7'd94 :
																																					 (lv_product_mantissa__h94522[95] ?
																																					    7'd95 :
																																					    (lv_product_mantissa__h94522[96] ?
																																					       7'd96 :
																																					       (lv_product_mantissa__h94522[97] ?
																																						  7'd97 :
																																						  (lv_product_mantissa__h94522[98] ?
																																						     7'd98 :
																																						     (lv_product_mantissa__h94522[99] ?
																																							7'd99 :
																																							(lv_product_mantissa__h94522[100] ?
																																							   7'd100 :
																																							   (lv_product_mantissa__h94522[101] ?
																																							      7'd101 :
																																							      (lv_product_mantissa__h94522[102] ?
																																								 7'd102 :
																																								 (lv_product_mantissa__h94522[103] ?
																																								    7'd103 :
																																								    (lv_product_mantissa__h94522[104] ?
																																								       7'd104 :
																																								       (lv_product_mantissa__h94522[105] ?
																																									  7'd105 :
																																									  (lv_product_mantissa__h94522[106] ?
																																									     7'd106 :
																																									     7'd107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_compare_result__h175603 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       (setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ?
		  { _theResult____h175880[0], _theResult____h175880[1] } :
		  2'b01) :
	       (setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ?
		  2'b10 :
		  _theResult____h175880) ;
  assign lv_compare_result__h177827 =
	     ff_input_D_OUT[208] ?
	       (ff_input_D_OUT[144] ?
		  { _theResult____h178072[0], _theResult____h178072[1] } :
		  2'b01) :
	       (ff_input_D_OUT[144] ? 2'b10 : _theResult____h178072) ;
  assign lv_exp__h218052 = { 1'b0, getExp64_res_wget[32:22] } ;
  assign lv_exponent___1__h12599 = lv_exponent__h12098 + 10'd1 ;
  assign lv_exponent___1__h12602 =
	     inst_spfpu_divider_rg_stage3[22:13] + 10'd1 ;
  assign lv_exponent___1__h76997 = lv_exponent__h76496 + 13'd1 ;
  assign lv_exponent___1__h77000 =
	     inst_dpfpu_divider_rg_stage3[25:13] + 13'd1 ;
  assign lv_exponent__h12098 =
	     _theResult_____5__h12096[24] ?
	       lv_exponent___1__h12602 :
	       inst_spfpu_divider_rg_stage3[22:13] ;
  assign lv_exponent__h237391 = 10'd127 + y__h237449 ;
  assign lv_exponent__h245727 = 13'd1023 + y__h245785 ;
  assign lv_exponent__h76496 =
	     _theResult_____5__h76494[53] ?
	       lv_exponent___1__h77000 :
	       inst_dpfpu_divider_rg_stage3[25:13] ;
  assign lv_exponent_inc_shift__h6148 =
	     inst_spfpu_divider_rg_stage2[18:9] +
	     _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d129 ;
  assign lv_exponent_inc_shift__h64601 =
	     inst_dpfpu_divider_rg_stage2[21:9] +
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_450_BITS__ETC___d1455 ;
  assign lv_exponent_sub_shift__h6151 =
	     inst_spfpu_divider_rg_stage2[18:9] - shift_neg__h6149 ;
  assign lv_exponent_sub_shift__h64604 =
	     inst_dpfpu_divider_rg_stage2[21:9] - shift_neg__h64602 ;
  assign lv_exponent_sub_zerosMSB__h6153 =
	     inst_spfpu_divider_rg_stage2[18:9] - { 5'd0, msb_zeros__h5998 } ;
  assign lv_exponent_sub_zerosMSB__h64606 =
	     inst_dpfpu_divider_rg_stage2[21:9] -
	     { 7'd0, msb_zeros__h64451 } ;
  assign lv_extended_mantissa___1__h14632 =
	     lv_extended_mantissa__h14151 + 27'd4 ;
  assign lv_extended_mantissa___1__h79029 =
	     lv_extended_mantissa__h78548 + 56'd4 ;
  assign lv_extended_mantissa__h14151 = { 1'b0, result_mantissa__h14142 } ;
  assign lv_extended_mantissa__h78548 = { 1'b0, result_mantissa__h78539 } ;
  assign lv_final_output__h12191 =
	     { inst_spfpu_divider_rg_stage3[12], 31'h7F800000 } ;
  assign lv_final_output__h171199 =
	     { inst_dpfm_add_sub_ff_stage5[16], 63'h7FF0000000000000 } ;
  assign lv_final_output__h171256 =
	     { inst_dpfm_add_sub_ff_stage5[14], 63'd0 } ;
  assign lv_final_output__h171306 =
	     { inst_dpfm_add_sub_ff_stage5[19], 63'd0 } ;
  assign lv_final_output__h58057 =
	     { inst_spfm_add_sub_ff_stage5[15], 31'h7F800000 } ;
  assign lv_final_output__h58114 =
	     { inst_spfm_add_sub_ff_stage5[13], 31'd0 } ;
  assign lv_final_output__h58164 =
	     { inst_spfm_add_sub_ff_stage5[18], 31'd0 } ;
  assign lv_final_output__h76589 =
	     { inst_dpfpu_divider_rg_stage3[12], 63'h7FF0000000000000 } ;
  assign lv_inexact1__h215281 = x__h216628 | lv_sticky__h215279 ;
  assign lv_inexact1__h218068 = x__h219416 | lv_sticky__h218066 ;
  assign lv_inexact___1__h215874 =
	     lv_inexact__h215274 | lv_inexact1__h215281 ;
  assign lv_inexact___1__h218664 =
	     lv_inexact__h218061 | lv_inexact1__h218068 ;
  assign lv_inexact__h14150 = x__h14619 | lv_sticky__h14148 ;
  assign lv_inexact__h171072 = x__h171738 | lv_sticky__h171070 ;
  assign lv_inexact__h215274 =
	     !condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	     IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d4251 ;
  assign lv_inexact__h218061 =
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d4265 ;
  assign lv_inexact__h57930 = x__h58596 | lv_sticky__h57928 ;
  assign lv_inexact__h78547 = x__h79016 | lv_sticky__h78545 ;
  assign lv_invalid___2__h215876 =
	     IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d3952 ?
	       _theResult_____2_fst__h216653 :
	       lv_invalid__h215272 ;
  assign lv_invalid___2__h218666 =
	     IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d4120 ?
	       _theResult_____2_fst__h219441 :
	       lv_invalid__h218059 ;
  assign lv_invalid__h215256 =
	     condFlags32_reswget_BITS_14_TO_10__q53[0] |
	     condFlags32_reswget_BITS_14_TO_10__q53[2] ;
  assign lv_invalid__h215272 =
	     condFlags32_reswget_BITS_14_TO_10__q53[3] ?
	       lv_invalid__h215256 :
	       _theResult___snd_fst__h215501 ;
  assign lv_invalid__h215283 =
	     (!condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      NOT_IF_condFlags32_res_whas__361_THEN_condFlag_ETC___d3862) ?
	       _theResult_____3_fst__h215879 :
	       lv_invalid__h215272 ;
  assign lv_invalid__h218042 =
	     condFlags64_reswget_BITS_14_TO_10__q33[0] |
	     condFlags64_reswget_BITS_14_TO_10__q33[2] ;
  assign lv_invalid__h218059 =
	     condFlags64_reswget_BITS_14_TO_10__q33[3] ?
	       lv_invalid__h218042 :
	       _theResult___snd_fst__h218291 ;
  assign lv_invalid__h218070 =
	     (!condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      NOT_IF_condFlags64_res_whas__446_THEN_condFlag_ETC___d4032) ?
	       _theResult_____3_fst__h218669 :
	       lv_invalid__h218059 ;
  assign lv_leading_zeros__h262443 =
	     IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d5926[1] ?
	       6'd0 :
	       (IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d5926[0] ?
		  6'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q48[22] ?
		     6'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q48[21] ?
			6'd3 :
			(getMant32_reswget_BITS_68_TO_46__q48[20] ?
			   6'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q48[19] ?
			      6'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q48[18] ?
				 6'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q48[17] ?
				    6'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q48[16] ?
				       6'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q48[15] ?
					  6'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q48[14] ?
					     6'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q48[13] ?
						6'd11 :
						(getMant32_reswget_BITS_68_TO_46__q48[12] ?
						   6'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q48[11] ?
						      6'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q48[10] ?
							 6'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q48[9] ?
							    6'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q48[8] ?
							       6'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q48[7] ?
								  6'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q48[6] ?
								     6'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q48[5] ?
									6'd19 :
									(getMant32_reswget_BITS_68_TO_46__q48[4] ?
									   6'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q48[3] ?
									      6'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q48[2] ?
										 6'd22 :
										 (getMant32_reswget_BITS_68_TO_46__q48[1] ?
										    6'd23 :
										    (getMant32_reswget_BITS_68_TO_46__q48[0] ?
										       6'd24 :
										       6'd52)))))))))))))))))))))))) ;
  assign lv_leading_zeros__h271455 =
	     IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d6021[1] ?
	       7'd0 :
	       (IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d6021[0] ?
		  7'd1 :
		  (getMant64_reswget_BITS_155_TO_104__q28[51] ?
		     7'd2 :
		     (getMant64_reswget_BITS_155_TO_104__q28[50] ?
			7'd3 :
			(getMant64_reswget_BITS_155_TO_104__q28[49] ?
			   7'd4 :
			   (getMant64_reswget_BITS_155_TO_104__q28[48] ?
			      7'd5 :
			      (getMant64_reswget_BITS_155_TO_104__q28[47] ?
				 7'd6 :
				 (getMant64_reswget_BITS_155_TO_104__q28[46] ?
				    7'd7 :
				    (getMant64_reswget_BITS_155_TO_104__q28[45] ?
				       7'd8 :
				       (getMant64_reswget_BITS_155_TO_104__q28[44] ?
					  7'd9 :
					  (getMant64_reswget_BITS_155_TO_104__q28[43] ?
					     7'd10 :
					     (getMant64_reswget_BITS_155_TO_104__q28[42] ?
						7'd11 :
						(getMant64_reswget_BITS_155_TO_104__q28[41] ?
						   7'd12 :
						   (getMant64_reswget_BITS_155_TO_104__q28[40] ?
						      7'd13 :
						      (getMant64_reswget_BITS_155_TO_104__q28[39] ?
							 7'd14 :
							 (getMant64_reswget_BITS_155_TO_104__q28[38] ?
							    7'd15 :
							    (getMant64_reswget_BITS_155_TO_104__q28[37] ?
							       7'd16 :
							       (getMant64_reswget_BITS_155_TO_104__q28[36] ?
								  7'd17 :
								  (getMant64_reswget_BITS_155_TO_104__q28[35] ?
								     7'd18 :
								     (getMant64_reswget_BITS_155_TO_104__q28[34] ?
									7'd19 :
									(getMant64_reswget_BITS_155_TO_104__q28[33] ?
									   7'd20 :
									   (getMant64_reswget_BITS_155_TO_104__q28[32] ?
									      7'd21 :
									      (getMant64_reswget_BITS_155_TO_104__q28[31] ?
										 7'd22 :
										 (getMant64_reswget_BITS_155_TO_104__q28[30] ?
										    7'd23 :
										    (getMant64_reswget_BITS_155_TO_104__q28[29] ?
										       7'd24 :
										       (getMant64_reswget_BITS_155_TO_104__q28[28] ?
											  7'd25 :
											  (getMant64_reswget_BITS_155_TO_104__q28[27] ?
											     7'd26 :
											     (getMant64_reswget_BITS_155_TO_104__q28[26] ?
												7'd27 :
												(getMant64_reswget_BITS_155_TO_104__q28[25] ?
												   7'd28 :
												   (getMant64_reswget_BITS_155_TO_104__q28[24] ?
												      7'd29 :
												      (getMant64_reswget_BITS_155_TO_104__q28[23] ?
													 7'd30 :
													 (getMant64_reswget_BITS_155_TO_104__q28[22] ?
													    7'd31 :
													    (getMant64_reswget_BITS_155_TO_104__q28[21] ?
													       7'd32 :
													       (getMant64_reswget_BITS_155_TO_104__q28[20] ?
														  7'd33 :
														  (getMant64_reswget_BITS_155_TO_104__q28[19] ?
														     7'd34 :
														     (getMant64_reswget_BITS_155_TO_104__q28[18] ?
															7'd35 :
															(getMant64_reswget_BITS_155_TO_104__q28[17] ?
															   7'd36 :
															   (getMant64_reswget_BITS_155_TO_104__q28[16] ?
															      7'd37 :
															      (getMant64_reswget_BITS_155_TO_104__q28[15] ?
																 7'd38 :
																 (getMant64_reswget_BITS_155_TO_104__q28[14] ?
																    7'd39 :
																    (getMant64_reswget_BITS_155_TO_104__q28[13] ?
																       7'd40 :
																       (getMant64_reswget_BITS_155_TO_104__q28[12] ?
																	  7'd41 :
																	  (getMant64_reswget_BITS_155_TO_104__q28[11] ?
																	     7'd42 :
																	     (getMant64_reswget_BITS_155_TO_104__q28[10] ?
																		7'd43 :
																		(getMant64_reswget_BITS_155_TO_104__q28[9] ?
																		   7'd44 :
																		   (getMant64_reswget_BITS_155_TO_104__q28[8] ?
																		      7'd45 :
																		      (getMant64_reswget_BITS_155_TO_104__q28[7] ?
																			 7'd46 :
																			 (getMant64_reswget_BITS_155_TO_104__q28[6] ?
																			    7'd47 :
																			    (getMant64_reswget_BITS_155_TO_104__q28[5] ?
																			       7'd48 :
																			       (getMant64_reswget_BITS_155_TO_104__q28[4] ?
																				  7'd49 :
																				  (getMant64_reswget_BITS_155_TO_104__q28[3] ?
																				     7'd50 :
																				     (getMant64_reswget_BITS_155_TO_104__q28[2] ?
																					7'd51 :
																					(getMant64_reswget_BITS_155_TO_104__q28[1] ?
																					   7'd52 :
																					   (getMant64_reswget_BITS_155_TO_104__q28[0] ?
																					      7'd53 :
																					      7'd110))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_man___1__h189015 = lv_man__h184187 + 25'd1 ;
  assign lv_man___1__h198554 = lv_man__h189227 + 25'd1 ;
  assign lv_man___1__h213006 = lv_man__h203756 + 54'd1 ;
  assign lv_man__h184187 =
	     { 2'b0,
	       IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5145[30:8] } ;
  assign lv_man__h189227 =
	     { 2'b0,
	       IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5021[62:40] } ;
  assign lv_man__h203756 =
	     { 2'b0,
	       IF_NOT_ff_input_first__327_BIT_1_552_566_AND_f_ETC___d3700[62:11] } ;
  assign lv_minuend__h102259 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__388_BIT_5_ETC___d2405 ?
	       exponent3__h102240 :
	       exponent2__h102249 ;
  assign lv_minuend__h25918 =
	     IF_inst_spfm_add_sub_ff_stage2_read__43_BIT_5__ETC___d760 ?
	       exponent3__h25899 :
	       exponent2__h25908 ;
  assign lv_op1_subnormal__h232846 =
	     condFlags32_reswget_BITS_14_TO_10__q53[4] |
	     condFlags32_reswget_BITS_14_TO_10__q53[3] ;
  assign lv_op1_subnormal__h234563 =
	     condFlags64_reswget_BITS_14_TO_10__q33[4] |
	     condFlags64_reswget_BITS_14_TO_10__q33[3] ;
  assign lv_op2_Nan__h175599 =
	     condFlags32_reswget_BITS_9_TO_5__q54[2] |
	     condFlags32_reswget_BITS_9_TO_5__q54[0] ;
  assign lv_op2_Nan__h177823 =
	     condFlags64_reswget_BITS_9_TO_5__q34[2] |
	     condFlags64_reswget_BITS_9_TO_5__q34[0] ;
  assign lv_op2_subnormal__h232847 =
	     condFlags32_reswget_BITS_9_TO_5__q54[4] |
	     condFlags32_reswget_BITS_9_TO_5__q54[3] ;
  assign lv_op2_subnormal__h234564 =
	     condFlags64_reswget_BITS_9_TO_5__q34[4] |
	     condFlags64_reswget_BITS_9_TO_5__q34[3] ;
  assign lv_product_exponent___1__h22098 =
	     inst_spfm_add_sub_ff_input_register[59:50] + 10'd1 ;
  assign lv_product_exponent___1__h94553 =
	     inst_dpfm_add_sub_ff_input_register[94:82] + 13'd1 ;
  assign lv_product_exponent__h22065 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       lv_product_exponent___1__h22098 :
	       inst_spfm_add_sub_ff_input_register[59:50] ;
  assign lv_product_exponent__h94520 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       lv_product_exponent___1__h94553 :
	       inst_dpfm_add_sub_ff_input_register[94:82] ;
  assign lv_product_exponent_inc_shift__h22073 =
	     lv_product_exponent__h22065 +
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473 ;
  assign lv_product_exponent_inc_shift__h94528 =
	     lv_product_exponent__h94520 +
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1886 ;
  assign lv_product_exponent_sub_shift__h22076 =
	     lv_product_exponent__h22065 - shift_neg__h22074 ;
  assign lv_product_exponent_sub_shift__h94531 =
	     lv_product_exponent__h94520 - shift_neg__h94529 ;
  assign lv_product_exponent_sub_zerosMSB__h22078 =
	     lv_product_exponent__h22065 - y__h22160 ;
  assign lv_product_exponent_sub_zerosMSB__h94533 =
	     lv_product_exponent__h94520 - y__h94615 ;
  assign lv_product_mantissa___1__h22097 =
	     { 1'd0, inst_spfm_add_sub_ff_input_register[107:60] } ;
  assign lv_product_mantissa___1__h22112 =
	     { IF_inst_spfm_add_sub_ff_input_register_read__6_ETC___d595[48:1],
	       IF_inst_spfm_add_sub_ff_input_register_read__6_ETC___d700 } ;
  assign lv_product_mantissa___1__h94552 =
	     { 1'd0, inst_dpfm_add_sub_ff_input_register[200:95] } ;
  assign lv_product_mantissa___1__h94567 =
	     { IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2124[106:1],
	       IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2345 } ;
  assign lv_product_mantissa__h15043 =
	     { inst_spfm_add_sub_ff_input_register[107:60], 1'b0 } ;
  assign lv_product_mantissa__h22067 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       lv_product_mantissa___1__h22097 :
	       lv_product_mantissa__h15043 ;
  assign lv_product_mantissa__h79436 =
	     { inst_dpfm_add_sub_ff_input_register[200:95], 1'b0 } ;
  assign lv_product_mantissa__h94522 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       lv_product_mantissa___1__h94552 :
	       lv_product_mantissa__h79436 ;
  assign lv_product_mantissa_shiftL_expo__h22075 =
	     lv_product_mantissa__h22067 << shift_neg__h22074 ;
  assign lv_product_mantissa_shiftL_expo__h94530 =
	     lv_product_mantissa__h94522 << shift_neg__h94529 ;
  assign lv_product_mantissa_shiftL_zerosMSB__h22077 =
	     lv_product_mantissa__h22067 << x__h22135 ;
  assign lv_product_mantissa_shiftL_zerosMSB__h94532 =
	     lv_product_mantissa__h94522 << x__h94590 ;
  assign lv_quotient___1__h6174 =
	     { inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d195[26:1],
	       lv_sticky___1__h6175 } ;
  assign lv_quotient___1__h64627 =
	     { inst_dpfpu_divider_int_div_wr_final_out_wget___ETC___d1579[55:1],
	       lv_sticky___1__h64628 } ;
  assign lv_quotient_shiftL_expo__h6150 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26:0] <<
	     shift_neg__h6149 ;
  assign lv_quotient_shiftL_expo__h64603 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] <<
	     shift_neg__h64602 ;
  assign lv_quotient_shiftL_zerosMSB__h6152 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26:0] <<
	     msb_zeros__h5998 ;
  assign lv_quotient_shiftL_zerosMSB__h64605 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] <<
	     msb_zeros__h64451 ;
  assign lv_remainder__h13922 =
	     lv_remainder_temp__h13812 + lv_root_temp_1__h13813 ;
  assign lv_remainder__h14012 =
	     lv_remainder_temp__h13812 - lv_root_temp_2__h13814 ;
  assign lv_remainder__h14567 = _theResult____h13815 + lv_root_rem__h14143 ;
  assign lv_remainder__h78319 =
	     lv_remainder_temp__h78209 + lv_root_temp_1__h78210 ;
  assign lv_remainder__h78409 =
	     lv_remainder_temp__h78209 - lv_root_temp_2__h78211 ;
  assign lv_remainder__h78964 = _theResult____h78212 + lv_root_rem__h78540 ;
  assign lv_remainder_temp__h13812 =
	     { inst_spfpu_sqrt_rg_inter_stage[55:29],
	       inst_spfpu_sqrt_rg_inter_stage[145:144] } ;
  assign lv_remainder_temp__h78209 =
	     { inst_dpfpu_sqrt_rg_inter_stage[113:58],
	       inst_dpfpu_sqrt_rg_inter_stage[293:292] } ;
  assign lv_result__h176325 =
	     { or_sign__h175600,
	       setCanonicalNaN_reswget_BITS_63_TO_32__q43[30:0] } ;
  assign lv_result__h176366 =
	     { and_sign__h175601,
	       setCanonicalNaN_reswget_BITS_95_TO_64__q42[30:0] } ;
  assign lv_result__h178511 = { or_sign__h177824, ff_input_D_OUT[143:81] } ;
  assign lv_result__h178552 = { and_sign__h177825, ff_input_D_OUT[207:145] } ;
  assign lv_result_is_infinity___1__h148204 =
	     { sign2__h102225, ~x__h148238 } ;
  assign lv_result_is_infinity___1__h148266 =
	     { x__h148278 | y__h148279, 1'd1 } ;
  assign lv_result_is_infinity___1__h47242 = { sign2__h25884, ~x__h47276 } ;
  assign lv_result_is_infinity___1__h47304 = { x__h47316 | y__h47317, 1'd1 } ;
  assign lv_result_is_zero___1__h148299 = { op_xor_sign3__h102238, 1'b1 } ;
  assign lv_result_is_zero___1__h148303 = { sign2__h102225, 1'd1 } ;
  assign lv_result_is_zero___1__h47337 = { op_xor_sign3__h25897, 1'b1 } ;
  assign lv_result_is_zero___1__h47341 = { sign2__h25884, 1'd1 } ;
  assign lv_root_rem__h14143 = { 2'b0, x__h14115, 1'b1 } ;
  assign lv_root_rem__h78540 = { 2'b0, x__h78512, 1'b1 } ;
  assign lv_root_temp_1__h13813 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd3 } ;
  assign lv_root_temp_1__h78210 =
	     { 1'b0, inst_dpfpu_sqrt_rg_inter_stage[57:3], 2'd3 } ;
  assign lv_root_temp_2__h13814 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd1 } ;
  assign lv_root_temp_2__h78211 =
	     { 1'b0, inst_dpfpu_sqrt_rg_inter_stage[57:3], 2'd1 } ;
  assign lv_round_up___1__h12403 =
	     inst_spfpu_divider_rg_stage3[53] & y__h12415 ;
  assign lv_round_up___1__h12439 = x__h12451 & y__h12452 ;
  assign lv_round_up___1__h171504 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3214[105] &
	     y__h171516 ;
  assign lv_round_up___1__h171726 =
	     lv_inexact__h171072 & inst_dpfm_add_sub_ff_stage5[23] ;
  assign lv_round_up___1__h215959 =
	     IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d3889[22] &
	     y__h215971 ;
  assign lv_round_up___1__h216616 =
	     lv_inexact1__h215281 &
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign lv_round_up___1__h218749 =
	     IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4058[51] &
	     y__h218761 ;
  assign lv_round_up___1__h219404 =
	     lv_inexact1__h218068 & ff_input_D_OUT[208] ;
  assign lv_round_up___1__h230735 =
	     IF_IF_getExp64_res_whas__004_THEN_getExp64_res_ETC___d4328[25] &
	     y__h230747 ;
  assign lv_round_up___1__h230874 = x__h230886 & y__h219429 ;
  assign lv_round_up___1__h58362 =
	     IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1221[47] &
	     y__h58374 ;
  assign lv_round_up___1__h58584 =
	     lv_inexact__h57930 & inst_spfm_add_sub_ff_stage5[22] ;
  assign lv_round_up___1__h76801 =
	     inst_dpfpu_divider_rg_stage3[85] & y__h76813 ;
  assign lv_round_up___1__h76837 = x__h76849 & y__h76850 ;
  assign lv_rounded_mantissa___1__h171758 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3214[159:106] +
	     54'd1 ;
  assign lv_rounded_mantissa___1__h58616 =
	     IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1221[72:48] +
	     25'd1 ;
  assign lv_rounded_mantissa__h171788 =
	     { 1'd0, _theResult_____5__h171074[53:1] } ;
  assign lv_rounded_mantissa__h58646 =
	     { 1'd0, _theResult_____5__h57932[24:1] } ;
  assign lv_rounded_quotient___1__h12474 =
	     lv_rounded_quotient__h12095 + 25'd1 ;
  assign lv_rounded_quotient___1__h76872 =
	     lv_rounded_quotient__h76493 + 54'd1 ;
  assign lv_rounded_quotient__h12095 =
	     { 1'b0, inst_spfpu_divider_rg_stage3[77:54] } ;
  assign lv_rounded_quotient__h12509 =
	     { 1'd0, _theResult_____5__h12096[24:1] } ;
  assign lv_rounded_quotient__h76493 =
	     { 1'b0, inst_dpfpu_divider_rg_stage3[138:86] } ;
  assign lv_rounded_quotient__h76907 =
	     { 1'd0, _theResult_____5__h76494[53:1] } ;
  assign lv_roundup___1__h14213 =
	     inst_spfpu_sqrt_rg_inter_stage[69] & y__h14225 ;
  assign lv_roundup___1__h14595 = lv_inexact__h14150 & y__h14607 ;
  assign lv_roundup___1__h188943 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5145[7] &
	     y__h188955 ;
  assign lv_roundup___1__h188980 = inexact__h184185 & y__h188993 ;
  assign lv_roundup___1__h198482 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5021[39] &
	     y__h198494 ;
  assign lv_roundup___1__h198519 = inexact__h189225 & y__h198532 ;
  assign lv_roundup___1__h212935 =
	     IF_NOT_ff_input_first__327_BIT_1_552_566_AND_f_ETC___d3700[10] &
	     y__h212947 ;
  assign lv_roundup___1__h212971 = inexact__h203754 & y__h212984 ;
  assign lv_roundup___1__h78610 =
	     inst_dpfpu_sqrt_rg_inter_stage[130] & y__h78622 ;
  assign lv_roundup___1__h78992 = lv_inexact__h78547 & y__h79004 ;
  assign lv_sign__h198970 = !ff_input_D_OUT[1] && ff_input_D_OUT[176] ;
  assign lv_sticky___1__h6175 =
	     inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d195[0] |
	     ((_1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d129 ^
	       10'h200) >
	      ({ 5'd0, lsb_zeros__h6146 } ^ 10'h200) ||
	      inst_spfpu_divider_int_div_wr_final_out_wget[0]) ;
  assign lv_sticky___1__h64628 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget___ETC___d1579[0] |
	     ((_1_MINUS_inst_dpfpu_divider_rg_stage2_450_BITS__ETC___d1455 ^
	       13'h1000) >
	      ({ 7'd0, lsb_zeros__h64599 } ^ 13'h1000) ||
	      inst_dpfpu_divider_int_div_wr_final_out_wget[0]) ;
  assign lv_sticky__h14148 = x__h14545 != 29'd0 ;
  assign lv_sticky__h171070 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3214[103:0] !=
	     104'd0 ;
  assign lv_sticky__h215279 =
	     IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d3889[20:0] !=
	     21'd0 ;
  assign lv_sticky__h218066 =
	     IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4058[49:0] !=
	     50'd0 ;
  assign lv_sticky__h230241 =
	     getMant64_reswget_BITS_155_TO_104__q28[26:0] != 27'd0 ;
  assign lv_sticky__h230587 =
	     IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4318 ?
	       lv_sticky__h230241 :
	       y_avValue_snd_snd_snd_snd_snd_snd__h230817 ;
  assign lv_sticky__h57928 =
	     IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1221[45:0] !=
	     46'd0 ;
  assign lv_sticky__h78545 = x__h78942 != 58'd0 ;
  assign lv_summed_exponent__h232857 = x__h233042 + y__h233043 ;
  assign lv_summed_exponent__h234574 = x__h234759 + y__h234760 ;
  assign lv_zeros_on_left__h148462 =
	     _theResult____h148460[159] ?
	       8'd0 :
	       (_theResult____h148460[158] ?
		  8'd1 :
		  (_theResult____h148460[157] ?
		     8'd2 :
		     (_theResult____h148460[156] ?
			8'd3 :
			(_theResult____h148460[155] ?
			   8'd4 :
			   (_theResult____h148460[154] ?
			      8'd5 :
			      (_theResult____h148460[153] ?
				 8'd6 :
				 (_theResult____h148460[152] ?
				    8'd7 :
				    (_theResult____h148460[151] ?
				       8'd8 :
				       (_theResult____h148460[150] ?
					  8'd9 :
					  (_theResult____h148460[149] ?
					     8'd10 :
					     (_theResult____h148460[148] ?
						8'd11 :
						(_theResult____h148460[147] ?
						   8'd12 :
						   (_theResult____h148460[146] ?
						      8'd13 :
						      (_theResult____h148460[145] ?
							 8'd14 :
							 (_theResult____h148460[144] ?
							    8'd15 :
							    (_theResult____h148460[143] ?
							       8'd16 :
							       (_theResult____h148460[142] ?
								  8'd17 :
								  (_theResult____h148460[141] ?
								     8'd18 :
								     (_theResult____h148460[140] ?
									8'd19 :
									(_theResult____h148460[139] ?
									   8'd20 :
									   (_theResult____h148460[138] ?
									      8'd21 :
									      (_theResult____h148460[137] ?
										 8'd22 :
										 (_theResult____h148460[136] ?
										    8'd23 :
										    (_theResult____h148460[135] ?
										       8'd24 :
										       (_theResult____h148460[134] ?
											  8'd25 :
											  (_theResult____h148460[133] ?
											     8'd26 :
											     (_theResult____h148460[132] ?
												8'd27 :
												(_theResult____h148460[131] ?
												   8'd28 :
												   (_theResult____h148460[130] ?
												      8'd29 :
												      (_theResult____h148460[129] ?
													 8'd30 :
													 (_theResult____h148460[128] ?
													    8'd31 :
													    (_theResult____h148460[127] ?
													       8'd32 :
													       (_theResult____h148460[126] ?
														  8'd33 :
														  (_theResult____h148460[125] ?
														     8'd34 :
														     (_theResult____h148460[124] ?
															8'd35 :
															(_theResult____h148460[123] ?
															   8'd36 :
															   (_theResult____h148460[122] ?
															      8'd37 :
															      (_theResult____h148460[121] ?
																 8'd38 :
																 (_theResult____h148460[120] ?
																    8'd39 :
																    (_theResult____h148460[119] ?
																       8'd40 :
																       (_theResult____h148460[118] ?
																	  8'd41 :
																	  (_theResult____h148460[117] ?
																	     8'd42 :
																	     (_theResult____h148460[116] ?
																		8'd43 :
																		(_theResult____h148460[115] ?
																		   8'd44 :
																		   (_theResult____h148460[114] ?
																		      8'd45 :
																		      (_theResult____h148460[113] ?
																			 8'd46 :
																			 (_theResult____h148460[112] ?
																			    8'd47 :
																			    (_theResult____h148460[111] ?
																			       8'd48 :
																			       (_theResult____h148460[110] ?
																				  8'd49 :
																				  (_theResult____h148460[109] ?
																				     8'd50 :
																				     (_theResult____h148460[108] ?
																					8'd51 :
																					(_theResult____h148460[107] ?
																					   8'd52 :
																					   (_theResult____h148460[106] ?
																					      8'd53 :
																					      (_theResult____h148460[105] ?
																						 8'd54 :
																						 (_theResult____h148460[104] ?
																						    8'd55 :
																						    (_theResult____h148460[103] ?
																						       8'd56 :
																						       (_theResult____h148460[102] ?
																							  8'd57 :
																							  (_theResult____h148460[101] ?
																							     8'd58 :
																							     (_theResult____h148460[100] ?
																								8'd59 :
																								(_theResult____h148460[99] ?
																								   8'd60 :
																								   (_theResult____h148460[98] ?
																								      8'd61 :
																								      (_theResult____h148460[97] ?
																									 8'd62 :
																									 (_theResult____h148460[96] ?
																									    8'd63 :
																									    (_theResult____h148460[95] ?
																									       8'd64 :
																									       (_theResult____h148460[94] ?
																										  8'd65 :
																										  (_theResult____h148460[93] ?
																										     8'd66 :
																										     (_theResult____h148460[92] ?
																											8'd67 :
																											(_theResult____h148460[91] ?
																											   8'd68 :
																											   (_theResult____h148460[90] ?
																											      8'd69 :
																											      (_theResult____h148460[89] ?
																												 8'd70 :
																												 (_theResult____h148460[88] ?
																												    8'd71 :
																												    (_theResult____h148460[87] ?
																												       8'd72 :
																												       (_theResult____h148460[86] ?
																													  8'd73 :
																													  (_theResult____h148460[85] ?
																													     8'd74 :
																													     (_theResult____h148460[84] ?
																														8'd75 :
																														(_theResult____h148460[83] ?
																														   8'd76 :
																														   (_theResult____h148460[82] ?
																														      8'd77 :
																														      (_theResult____h148460[81] ?
																															 8'd78 :
																															 (_theResult____h148460[80] ?
																															    8'd79 :
																															    (_theResult____h148460[79] ?
																															       8'd80 :
																															       (_theResult____h148460[78] ?
																																  8'd81 :
																																  (_theResult____h148460[77] ?
																																     8'd82 :
																																     (_theResult____h148460[76] ?
																																	8'd83 :
																																	(_theResult____h148460[75] ?
																																	   8'd84 :
																																	   (_theResult____h148460[74] ?
																																	      8'd85 :
																																	      (_theResult____h148460[73] ?
																																		 8'd86 :
																																		 (_theResult____h148460[72] ?
																																		    8'd87 :
																																		    (_theResult____h148460[71] ?
																																		       8'd88 :
																																		       (_theResult____h148460[70] ?
																																			  8'd89 :
																																			  (_theResult____h148460[69] ?
																																			     8'd90 :
																																			     (_theResult____h148460[68] ?
																																				8'd91 :
																																				(_theResult____h148460[67] ?
																																				   8'd92 :
																																				   (_theResult____h148460[66] ?
																																				      8'd93 :
																																				      (_theResult____h148460[65] ?
																																					 8'd94 :
																																					 (_theResult____h148460[64] ?
																																					    8'd95 :
																																					    (_theResult____h148460[63] ?
																																					       8'd96 :
																																					       (_theResult____h148460[62] ?
																																						  8'd97 :
																																						  (_theResult____h148460[61] ?
																																						     8'd98 :
																																						     (_theResult____h148460[60] ?
																																							8'd99 :
																																							(_theResult____h148460[59] ?
																																							   8'd100 :
																																							   (_theResult____h148460[58] ?
																																							      8'd101 :
																																							      (_theResult____h148460[57] ?
																																								 8'd102 :
																																								 (_theResult____h148460[56] ?
																																								    8'd103 :
																																								    (_theResult____h148460[55] ?
																																								       8'd104 :
																																								       (_theResult____h148460[54] ?
																																									  8'd105 :
																																									  (_theResult____h148460[53] ?
																																									     8'd106 :
																																									     (_theResult____h148460[52] ?
																																										8'd107 :
																																										(_theResult____h148460[51] ?
																																										   8'd108 :
																																										   (_theResult____h148460[50] ?
																																										      8'd109 :
																																										      (_theResult____h148460[49] ?
																																											 8'd110 :
																																											 (_theResult____h148460[48] ?
																																											    8'd111 :
																																											    (_theResult____h148460[47] ?
																																											       8'd112 :
																																											       (_theResult____h148460[46] ?
																																												  8'd113 :
																																												  (_theResult____h148460[45] ?
																																												     8'd114 :
																																												     (_theResult____h148460[44] ?
																																													8'd115 :
																																													(_theResult____h148460[43] ?
																																													   8'd116 :
																																													   (_theResult____h148460[42] ?
																																													      8'd117 :
																																													      (_theResult____h148460[41] ?
																																														 8'd118 :
																																														 (_theResult____h148460[40] ?
																																														    8'd119 :
																																														    (_theResult____h148460[39] ?
																																														       8'd120 :
																																														       (_theResult____h148460[38] ?
																																															  8'd121 :
																																															  (_theResult____h148460[37] ?
																																															     8'd122 :
																																															     (_theResult____h148460[36] ?
																																																8'd123 :
																																																(_theResult____h148460[35] ?
																																																   8'd124 :
																																																   (_theResult____h148460[34] ?
																																																      8'd125 :
																																																      (_theResult____h148460[33] ?
																																																	 8'd126 :
																																																	 (_theResult____h148460[32] ?
																																																	    8'd127 :
																																																	    (_theResult____h148460[31] ?
																																																	       8'd128 :
																																																	       (_theResult____h148460[30] ?
																																																		  8'd129 :
																																																		  (_theResult____h148460[29] ?
																																																		     8'd130 :
																																																		     (_theResult____h148460[28] ?
																																																			8'd131 :
																																																			(_theResult____h148460[27] ?
																																																			   8'd132 :
																																																			   (_theResult____h148460[26] ?
																																																			      8'd133 :
																																																			      (_theResult____h148460[25] ?
																																																				 8'd134 :
																																																				 (_theResult____h148460[24] ?
																																																				    8'd135 :
																																																				    (_theResult____h148460[23] ?
																																																				       8'd136 :
																																																				       (_theResult____h148460[22] ?
																																																					  8'd137 :
																																																					  (_theResult____h148460[21] ?
																																																					     8'd138 :
																																																					     (_theResult____h148460[20] ?
																																																						8'd139 :
																																																						(_theResult____h148460[19] ?
																																																						   8'd140 :
																																																						   (_theResult____h148460[18] ?
																																																						      8'd141 :
																																																						      (_theResult____h148460[17] ?
																																																							 8'd142 :
																																																							 (_theResult____h148460[16] ?
																																																							    8'd143 :
																																																							    (_theResult____h148460[15] ?
																																																							       8'd144 :
																																																							       (_theResult____h148460[14] ?
																																																								  8'd145 :
																																																								  (_theResult____h148460[13] ?
																																																								     8'd146 :
																																																								     (_theResult____h148460[12] ?
																																																									8'd147 :
																																																									(_theResult____h148460[11] ?
																																																									   8'd148 :
																																																									   (_theResult____h148460[10] ?
																																																									      8'd149 :
																																																									      (_theResult____h148460[9] ?
																																																										 8'd150 :
																																																										 (_theResult____h148460[8] ?
																																																										    8'd151 :
																																																										    (_theResult____h148460[7] ?
																																																										       8'd152 :
																																																										       (_theResult____h148460[6] ?
																																																											  8'd153 :
																																																											  (_theResult____h148460[5] ?
																																																											     8'd154 :
																																																											     (_theResult____h148460[4] ?
																																																												8'd155 :
																																																												(_theResult____h148460[3] ?
																																																												   8'd156 :
																																																												   (_theResult____h148460[2] ?
																																																												      8'd157 :
																																																												      (_theResult____h148460[1] ?
																																																													 8'd158 :
																																																													 (_theResult____h148460[0] ?
																																																													    8'd159 :
																																																													    8'd160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_zeros_on_left__h47500 =
	     _theResult____h47498[72] ?
	       7'd0 :
	       (_theResult____h47498[71] ?
		  7'd1 :
		  (_theResult____h47498[70] ?
		     7'd2 :
		     (_theResult____h47498[69] ?
			7'd3 :
			(_theResult____h47498[68] ?
			   7'd4 :
			   (_theResult____h47498[67] ?
			      7'd5 :
			      (_theResult____h47498[66] ?
				 7'd6 :
				 (_theResult____h47498[65] ?
				    7'd7 :
				    (_theResult____h47498[64] ?
				       7'd8 :
				       (_theResult____h47498[63] ?
					  7'd9 :
					  (_theResult____h47498[62] ?
					     7'd10 :
					     (_theResult____h47498[61] ?
						7'd11 :
						(_theResult____h47498[60] ?
						   7'd12 :
						   (_theResult____h47498[59] ?
						      7'd13 :
						      (_theResult____h47498[58] ?
							 7'd14 :
							 (_theResult____h47498[57] ?
							    7'd15 :
							    (_theResult____h47498[56] ?
							       7'd16 :
							       (_theResult____h47498[55] ?
								  7'd17 :
								  (_theResult____h47498[54] ?
								     7'd18 :
								     (_theResult____h47498[53] ?
									7'd19 :
									(_theResult____h47498[52] ?
									   7'd20 :
									   (_theResult____h47498[51] ?
									      7'd21 :
									      (_theResult____h47498[50] ?
										 7'd22 :
										 (_theResult____h47498[49] ?
										    7'd23 :
										    (_theResult____h47498[48] ?
										       7'd24 :
										       (_theResult____h47498[47] ?
											  7'd25 :
											  (_theResult____h47498[46] ?
											     7'd26 :
											     (_theResult____h47498[45] ?
												7'd27 :
												(_theResult____h47498[44] ?
												   7'd28 :
												   (_theResult____h47498[43] ?
												      7'd29 :
												      (_theResult____h47498[42] ?
													 7'd30 :
													 (_theResult____h47498[41] ?
													    7'd31 :
													    (_theResult____h47498[40] ?
													       7'd32 :
													       (_theResult____h47498[39] ?
														  7'd33 :
														  (_theResult____h47498[38] ?
														     7'd34 :
														     (_theResult____h47498[37] ?
															7'd35 :
															(_theResult____h47498[36] ?
															   7'd36 :
															   (_theResult____h47498[35] ?
															      7'd37 :
															      (_theResult____h47498[34] ?
																 7'd38 :
																 (_theResult____h47498[33] ?
																    7'd39 :
																    (_theResult____h47498[32] ?
																       7'd40 :
																       (_theResult____h47498[31] ?
																	  7'd41 :
																	  (_theResult____h47498[30] ?
																	     7'd42 :
																	     (_theResult____h47498[29] ?
																		7'd43 :
																		(_theResult____h47498[28] ?
																		   7'd44 :
																		   (_theResult____h47498[27] ?
																		      7'd45 :
																		      (_theResult____h47498[26] ?
																			 7'd46 :
																			 (_theResult____h47498[25] ?
																			    7'd47 :
																			    (_theResult____h47498[24] ?
																			       7'd48 :
																			       (_theResult____h47498[23] ?
																				  7'd49 :
																				  (_theResult____h47498[22] ?
																				     7'd50 :
																				     (_theResult____h47498[21] ?
																					7'd51 :
																					(_theResult____h47498[20] ?
																					   7'd52 :
																					   (_theResult____h47498[19] ?
																					      7'd53 :
																					      (_theResult____h47498[18] ?
																						 7'd54 :
																						 (_theResult____h47498[17] ?
																						    7'd55 :
																						    (_theResult____h47498[16] ?
																						       7'd56 :
																						       (_theResult____h47498[15] ?
																							  7'd57 :
																							  (_theResult____h47498[14] ?
																							     7'd58 :
																							     (_theResult____h47498[13] ?
																								7'd59 :
																								(_theResult____h47498[12] ?
																								   7'd60 :
																								   (_theResult____h47498[11] ?
																								      7'd61 :
																								      (_theResult____h47498[10] ?
																									 7'd62 :
																									 (_theResult____h47498[9] ?
																									    7'd63 :
																									    (_theResult____h47498[8] ?
																									       7'd64 :
																									       (_theResult____h47498[7] ?
																										  7'd65 :
																										  (_theResult____h47498[6] ?
																										     7'd66 :
																										     (_theResult____h47498[5] ?
																											7'd67 :
																											(_theResult____h47498[4] ?
																											   7'd68 :
																											   (_theResult____h47498[3] ?
																											      7'd69 :
																											      (_theResult____h47498[2] ?
																												 7'd70 :
																												 (_theResult____h47498[1] ?
																												    7'd71 :
																												    (_theResult____h47498[0] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign man1__h237381 =
	     { ~condFlags32_reswget_BITS_14_TO_10__q53[4],
	       getMant32_res_wget[68:46] } ;
  assign man1__h245717 =
	     { ~condFlags64_reswget_BITS_14_TO_10__q33[4],
	       getMant64_res_wget[155:104] } ;
  assign man2__h237382 =
	     { ~condFlags32_reswget_BITS_9_TO_5__q54[4],
	       getMant32_res_wget[45:23] } ;
  assign man2__h245718 =
	     { ~condFlags64_reswget_BITS_9_TO_5__q34[4],
	       getMant64_res_wget[103:52] } ;
  assign man__h225376 = { value__h228628[21:0], 30'd0 } ;
  assign man__h230345 =
	     { 1'b1, getMant64_reswget_BITS_155_TO_104__q28[51:27], 23'd0 } >>
	     shiftDist__h230344 ;
  assign man__h230444 =
	     { getMant64_reswget_BITS_155_TO_104__q28[51:27], 24'd0 } ;
  assign mant__h225316 = { getMant32_res_wget[68:46], 29'd0 } ;
  assign mantissa2__h102226 = { inst_dpfm_add_sub_ff_stage2[188:82], 53'd0 } ;
  assign mantissa2__h102248 =
	     inst_dpfm_add_sub_ff_stage2[5] ? 160'd0 : mantissa2__h102226 ;
  assign mantissa2__h102269 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__388_BIT_5_ETC___d2405 ?
	       mantissa_to_shift___1__h102267 :
	       mantissa2__h102248 ;
  assign mantissa2__h25885 = { inst_spfm_add_sub_ff_stage2[98:50], 24'd0 } ;
  assign mantissa2__h25907 =
	     inst_spfm_add_sub_ff_stage2[5] ? 73'd0 : mantissa2__h25885 ;
  assign mantissa2__h25928 =
	     IF_inst_spfm_add_sub_ff_stage2_read__43_BIT_5__ETC___d760 ?
	       mantissa_to_shift___1__h25926 :
	       mantissa2__h25907 ;
  assign mantissa3___1__h121959 =
	     { 1'd0,
	       expo3_zero__h102237,
	       inst_dpfm_add_sub_ff_stage2[69:18],
	       106'd0 } ;
  assign mantissa3___1__h35120 =
	     { 1'd0,
	       expo3_zero__h25896,
	       inst_spfm_add_sub_ff_stage2[40:18],
	       48'd0 } ;
  assign mantissa3__h102270 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__388_BIT_5_ETC___d2405 ?
	       _theResult____h102239 :
	       mantissa_to_shift___1__h102267 ;
  assign mantissa3__h25929 =
	     IF_inst_spfm_add_sub_ff_stage2_read__43_BIT_5__ETC___d760 ?
	       _theResult____h25898 :
	       mantissa_to_shift___1__h25926 ;
  assign mantissa___1__h270401 = { mantissa__h262444[50:0], 1'd0 } ;
  assign mantissa___1__h287538 = { mantissa__h271456[108:0], 1'd0 } ;
  assign mantissa__h13817 = { inst_spfpu_sqrt_rg_inter_stage[143:94], 2'd0 } ;
  assign mantissa__h198978 =
	     { theResult__98974_SL_x99122_BITS_4_TO_0__q3[30:0], 21'd0 } ;
  assign mantissa__h262442 =
	     { IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d5926,
	       getMant32_res_wget[68:46],
	       27'd0 } ;
  assign mantissa__h262444 = mantissa__h262442 << x__h270404 ;
  assign mantissa__h262454 =
	     { IF_IF_IF_condFlags32_res_whas__361_THEN_condFl_ETC___d5963[49:0],
	       2'd0 } ;
  assign mantissa__h271454 =
	     { IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d6021,
	       getMant64_res_wget[155:104],
	       56'd0 } ;
  assign mantissa__h271456 = mantissa__h271454 << x__h287541 ;
  assign mantissa__h271466 =
	     { IF_IF_IF_condFlags64_res_whas__446_THEN_condFl_ETC___d6087[107:0],
	       2'd0 } ;
  assign mantissa__h78214 =
	     { inst_dpfpu_sqrt_rg_inter_stage[291:184], 2'd0 } ;
  assign mantissa_to_shift___1__h102267 =
	     { IF_IF_inst_dpfm_add_sub_ff_stage2_read__388_BI_ETC___d2429[159:1],
	       _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2757 } ;
  assign mantissa_to_shift___1__h25926 =
	     { IF_IF_inst_spfm_add_sub_ff_stage2_read__43_BIT_ETC___d784[72:1],
	       _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d938 } ;
  assign mantissa_to_shift__h102262 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__388_BIT_5_ETC___d2405 ?
	       mantissa2__h102248 :
	       _theResult____h102239 ;
  assign mantissa_to_shift__h25921 =
	     IF_inst_spfm_add_sub_ff_stage2_read__43_BIT_5__ETC___d760 ?
	       mantissa2__h25907 :
	       _theResult____h25898 ;
  assign msb_zeros___1__h22100 = msb_zeros__h15062 + 6'd1 ;
  assign msb_zeros___1__h94555 = msb_zeros__h79455 + 7'd1 ;
  assign msb_zeros__h15062 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       6'd0 :
	       (inst_spfm_add_sub_ff_input_register[106] ?
		  6'd1 :
		  (inst_spfm_add_sub_ff_input_register[105] ?
		     6'd2 :
		     (inst_spfm_add_sub_ff_input_register[104] ?
			6'd3 :
			(inst_spfm_add_sub_ff_input_register[103] ?
			   6'd4 :
			   (inst_spfm_add_sub_ff_input_register[102] ?
			      6'd5 :
			      (inst_spfm_add_sub_ff_input_register[101] ?
				 6'd6 :
				 (inst_spfm_add_sub_ff_input_register[100] ?
				    6'd7 :
				    (inst_spfm_add_sub_ff_input_register[99] ?
				       6'd8 :
				       (inst_spfm_add_sub_ff_input_register[98] ?
					  6'd9 :
					  (inst_spfm_add_sub_ff_input_register[97] ?
					     6'd10 :
					     (inst_spfm_add_sub_ff_input_register[96] ?
						6'd11 :
						(inst_spfm_add_sub_ff_input_register[95] ?
						   6'd12 :
						   (inst_spfm_add_sub_ff_input_register[94] ?
						      6'd13 :
						      (inst_spfm_add_sub_ff_input_register[93] ?
							 6'd14 :
							 (inst_spfm_add_sub_ff_input_register[92] ?
							    6'd15 :
							    (inst_spfm_add_sub_ff_input_register[91] ?
							       6'd16 :
							       (inst_spfm_add_sub_ff_input_register[90] ?
								  6'd17 :
								  (inst_spfm_add_sub_ff_input_register[89] ?
								     6'd18 :
								     (inst_spfm_add_sub_ff_input_register[88] ?
									6'd19 :
									(inst_spfm_add_sub_ff_input_register[87] ?
									   6'd20 :
									   (inst_spfm_add_sub_ff_input_register[86] ?
									      6'd21 :
									      (inst_spfm_add_sub_ff_input_register[85] ?
										 6'd22 :
										 (inst_spfm_add_sub_ff_input_register[84] ?
										    6'd23 :
										    (inst_spfm_add_sub_ff_input_register[83] ?
										       6'd24 :
										       (inst_spfm_add_sub_ff_input_register[82] ?
											  6'd25 :
											  (inst_spfm_add_sub_ff_input_register[81] ?
											     6'd26 :
											     (inst_spfm_add_sub_ff_input_register[80] ?
												6'd27 :
												(inst_spfm_add_sub_ff_input_register[79] ?
												   6'd28 :
												   (inst_spfm_add_sub_ff_input_register[78] ?
												      6'd29 :
												      (inst_spfm_add_sub_ff_input_register[77] ?
													 6'd30 :
													 (inst_spfm_add_sub_ff_input_register[76] ?
													    6'd31 :
													    (inst_spfm_add_sub_ff_input_register[75] ?
													       6'd32 :
													       (inst_spfm_add_sub_ff_input_register[74] ?
														  6'd33 :
														  (inst_spfm_add_sub_ff_input_register[73] ?
														     6'd34 :
														     (inst_spfm_add_sub_ff_input_register[72] ?
															6'd35 :
															(inst_spfm_add_sub_ff_input_register[71] ?
															   6'd36 :
															   (inst_spfm_add_sub_ff_input_register[70] ?
															      6'd37 :
															      (inst_spfm_add_sub_ff_input_register[69] ?
																 6'd38 :
																 (inst_spfm_add_sub_ff_input_register[68] ?
																    6'd39 :
																    (inst_spfm_add_sub_ff_input_register[67] ?
																       6'd40 :
																       (inst_spfm_add_sub_ff_input_register[66] ?
																	  6'd41 :
																	  (inst_spfm_add_sub_ff_input_register[65] ?
																	     6'd42 :
																	     (inst_spfm_add_sub_ff_input_register[64] ?
																		6'd43 :
																		(inst_spfm_add_sub_ff_input_register[63] ?
																		   6'd44 :
																		   (inst_spfm_add_sub_ff_input_register[62] ?
																		      6'd45 :
																		      (inst_spfm_add_sub_ff_input_register[61] ?
																			 6'd46 :
																			 (inst_spfm_add_sub_ff_input_register[60] ?
																			    6'd47 :
																			    6'd49))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h22069 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       msb_zeros___1__h22100 :
	       msb_zeros__h15062 ;
  assign msb_zeros__h5998 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26] ?
	       5'd0 :
	       (inst_spfpu_divider_int_div_wr_final_out_wget[25] ?
		  5'd1 :
		  (inst_spfpu_divider_int_div_wr_final_out_wget[24] ?
		     5'd2 :
		     (inst_spfpu_divider_int_div_wr_final_out_wget[23] ?
			5'd3 :
			(inst_spfpu_divider_int_div_wr_final_out_wget[22] ?
			   5'd4 :
			   (inst_spfpu_divider_int_div_wr_final_out_wget[21] ?
			      5'd5 :
			      (inst_spfpu_divider_int_div_wr_final_out_wget[20] ?
				 5'd6 :
				 (inst_spfpu_divider_int_div_wr_final_out_wget[19] ?
				    5'd7 :
				    (inst_spfpu_divider_int_div_wr_final_out_wget[18] ?
				       5'd8 :
				       (inst_spfpu_divider_int_div_wr_final_out_wget[17] ?
					  5'd9 :
					  (inst_spfpu_divider_int_div_wr_final_out_wget[16] ?
					     5'd10 :
					     (inst_spfpu_divider_int_div_wr_final_out_wget[15] ?
						5'd11 :
						(inst_spfpu_divider_int_div_wr_final_out_wget[14] ?
						   5'd12 :
						   (inst_spfpu_divider_int_div_wr_final_out_wget[13] ?
						      5'd13 :
						      (inst_spfpu_divider_int_div_wr_final_out_wget[12] ?
							 5'd14 :
							 (inst_spfpu_divider_int_div_wr_final_out_wget[11] ?
							    5'd15 :
							    (inst_spfpu_divider_int_div_wr_final_out_wget[10] ?
							       5'd16 :
							       (inst_spfpu_divider_int_div_wr_final_out_wget[9] ?
								  5'd17 :
								  (inst_spfpu_divider_int_div_wr_final_out_wget[8] ?
								     5'd18 :
								     (inst_spfpu_divider_int_div_wr_final_out_wget[7] ?
									5'd19 :
									(inst_spfpu_divider_int_div_wr_final_out_wget[6] ?
									   5'd20 :
									   (inst_spfpu_divider_int_div_wr_final_out_wget[5] ?
									      5'd21 :
									      (inst_spfpu_divider_int_div_wr_final_out_wget[4] ?
										 5'd22 :
										 (inst_spfpu_divider_int_div_wr_final_out_wget[3] ?
										    5'd23 :
										    (inst_spfpu_divider_int_div_wr_final_out_wget[2] ?
										       5'd24 :
										       (inst_spfpu_divider_int_div_wr_final_out_wget[1] ?
											  5'd25 :
											  (inst_spfpu_divider_int_div_wr_final_out_wget[0] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign msb_zeros__h64451 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55] ?
	       6'd0 :
	       (inst_dpfpu_divider_int_div_wr_final_out_wget[54] ?
		  6'd1 :
		  (inst_dpfpu_divider_int_div_wr_final_out_wget[53] ?
		     6'd2 :
		     (inst_dpfpu_divider_int_div_wr_final_out_wget[52] ?
			6'd3 :
			(inst_dpfpu_divider_int_div_wr_final_out_wget[51] ?
			   6'd4 :
			   (inst_dpfpu_divider_int_div_wr_final_out_wget[50] ?
			      6'd5 :
			      (inst_dpfpu_divider_int_div_wr_final_out_wget[49] ?
				 6'd6 :
				 (inst_dpfpu_divider_int_div_wr_final_out_wget[48] ?
				    6'd7 :
				    (inst_dpfpu_divider_int_div_wr_final_out_wget[47] ?
				       6'd8 :
				       (inst_dpfpu_divider_int_div_wr_final_out_wget[46] ?
					  6'd9 :
					  (inst_dpfpu_divider_int_div_wr_final_out_wget[45] ?
					     6'd10 :
					     (inst_dpfpu_divider_int_div_wr_final_out_wget[44] ?
						6'd11 :
						(inst_dpfpu_divider_int_div_wr_final_out_wget[43] ?
						   6'd12 :
						   (inst_dpfpu_divider_int_div_wr_final_out_wget[42] ?
						      6'd13 :
						      (inst_dpfpu_divider_int_div_wr_final_out_wget[41] ?
							 6'd14 :
							 (inst_dpfpu_divider_int_div_wr_final_out_wget[40] ?
							    6'd15 :
							    (inst_dpfpu_divider_int_div_wr_final_out_wget[39] ?
							       6'd16 :
							       (inst_dpfpu_divider_int_div_wr_final_out_wget[38] ?
								  6'd17 :
								  (inst_dpfpu_divider_int_div_wr_final_out_wget[37] ?
								     6'd18 :
								     (inst_dpfpu_divider_int_div_wr_final_out_wget[36] ?
									6'd19 :
									(inst_dpfpu_divider_int_div_wr_final_out_wget[35] ?
									   6'd20 :
									   (inst_dpfpu_divider_int_div_wr_final_out_wget[34] ?
									      6'd21 :
									      (inst_dpfpu_divider_int_div_wr_final_out_wget[33] ?
										 6'd22 :
										 (inst_dpfpu_divider_int_div_wr_final_out_wget[32] ?
										    6'd23 :
										    (inst_dpfpu_divider_int_div_wr_final_out_wget[31] ?
										       6'd24 :
										       (inst_dpfpu_divider_int_div_wr_final_out_wget[30] ?
											  6'd25 :
											  (inst_dpfpu_divider_int_div_wr_final_out_wget[29] ?
											     6'd26 :
											     (inst_dpfpu_divider_int_div_wr_final_out_wget[28] ?
												6'd27 :
												(inst_dpfpu_divider_int_div_wr_final_out_wget[27] ?
												   6'd28 :
												   (inst_dpfpu_divider_int_div_wr_final_out_wget[26] ?
												      6'd29 :
												      (inst_dpfpu_divider_int_div_wr_final_out_wget[25] ?
													 6'd30 :
													 (inst_dpfpu_divider_int_div_wr_final_out_wget[24] ?
													    6'd31 :
													    (inst_dpfpu_divider_int_div_wr_final_out_wget[23] ?
													       6'd32 :
													       (inst_dpfpu_divider_int_div_wr_final_out_wget[22] ?
														  6'd33 :
														  (inst_dpfpu_divider_int_div_wr_final_out_wget[21] ?
														     6'd34 :
														     (inst_dpfpu_divider_int_div_wr_final_out_wget[20] ?
															6'd35 :
															(inst_dpfpu_divider_int_div_wr_final_out_wget[19] ?
															   6'd36 :
															   (inst_dpfpu_divider_int_div_wr_final_out_wget[18] ?
															      6'd37 :
															      (inst_dpfpu_divider_int_div_wr_final_out_wget[17] ?
																 6'd38 :
																 (inst_dpfpu_divider_int_div_wr_final_out_wget[16] ?
																    6'd39 :
																    (inst_dpfpu_divider_int_div_wr_final_out_wget[15] ?
																       6'd40 :
																       (inst_dpfpu_divider_int_div_wr_final_out_wget[14] ?
																	  6'd41 :
																	  (inst_dpfpu_divider_int_div_wr_final_out_wget[13] ?
																	     6'd42 :
																	     (inst_dpfpu_divider_int_div_wr_final_out_wget[12] ?
																		6'd43 :
																		(inst_dpfpu_divider_int_div_wr_final_out_wget[11] ?
																		   6'd44 :
																		   (inst_dpfpu_divider_int_div_wr_final_out_wget[10] ?
																		      6'd45 :
																		      (inst_dpfpu_divider_int_div_wr_final_out_wget[9] ?
																			 6'd46 :
																			 (inst_dpfpu_divider_int_div_wr_final_out_wget[8] ?
																			    6'd47 :
																			    (inst_dpfpu_divider_int_div_wr_final_out_wget[7] ?
																			       6'd48 :
																			       (inst_dpfpu_divider_int_div_wr_final_out_wget[6] ?
																				  6'd49 :
																				  (inst_dpfpu_divider_int_div_wr_final_out_wget[5] ?
																				     6'd50 :
																				     (inst_dpfpu_divider_int_div_wr_final_out_wget[4] ?
																					6'd51 :
																					(inst_dpfpu_divider_int_div_wr_final_out_wget[3] ?
																					   6'd52 :
																					   (inst_dpfpu_divider_int_div_wr_final_out_wget[2] ?
																					      6'd53 :
																					      (inst_dpfpu_divider_int_div_wr_final_out_wget[1] ?
																						 6'd54 :
																						 (inst_dpfpu_divider_int_div_wr_final_out_wget[0] ?
																						    6'd55 :
																						    6'd56))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h79455 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       7'd0 :
	       (inst_dpfm_add_sub_ff_input_register[199] ?
		  7'd1 :
		  (inst_dpfm_add_sub_ff_input_register[198] ?
		     7'd2 :
		     (inst_dpfm_add_sub_ff_input_register[197] ?
			7'd3 :
			(inst_dpfm_add_sub_ff_input_register[196] ?
			   7'd4 :
			   (inst_dpfm_add_sub_ff_input_register[195] ?
			      7'd5 :
			      (inst_dpfm_add_sub_ff_input_register[194] ?
				 7'd6 :
				 (inst_dpfm_add_sub_ff_input_register[193] ?
				    7'd7 :
				    (inst_dpfm_add_sub_ff_input_register[192] ?
				       7'd8 :
				       (inst_dpfm_add_sub_ff_input_register[191] ?
					  7'd9 :
					  (inst_dpfm_add_sub_ff_input_register[190] ?
					     7'd10 :
					     (inst_dpfm_add_sub_ff_input_register[189] ?
						7'd11 :
						(inst_dpfm_add_sub_ff_input_register[188] ?
						   7'd12 :
						   (inst_dpfm_add_sub_ff_input_register[187] ?
						      7'd13 :
						      (inst_dpfm_add_sub_ff_input_register[186] ?
							 7'd14 :
							 (inst_dpfm_add_sub_ff_input_register[185] ?
							    7'd15 :
							    (inst_dpfm_add_sub_ff_input_register[184] ?
							       7'd16 :
							       (inst_dpfm_add_sub_ff_input_register[183] ?
								  7'd17 :
								  (inst_dpfm_add_sub_ff_input_register[182] ?
								     7'd18 :
								     (inst_dpfm_add_sub_ff_input_register[181] ?
									7'd19 :
									(inst_dpfm_add_sub_ff_input_register[180] ?
									   7'd20 :
									   (inst_dpfm_add_sub_ff_input_register[179] ?
									      7'd21 :
									      (inst_dpfm_add_sub_ff_input_register[178] ?
										 7'd22 :
										 (inst_dpfm_add_sub_ff_input_register[177] ?
										    7'd23 :
										    (inst_dpfm_add_sub_ff_input_register[176] ?
										       7'd24 :
										       (inst_dpfm_add_sub_ff_input_register[175] ?
											  7'd25 :
											  (inst_dpfm_add_sub_ff_input_register[174] ?
											     7'd26 :
											     (inst_dpfm_add_sub_ff_input_register[173] ?
												7'd27 :
												(inst_dpfm_add_sub_ff_input_register[172] ?
												   7'd28 :
												   (inst_dpfm_add_sub_ff_input_register[171] ?
												      7'd29 :
												      (inst_dpfm_add_sub_ff_input_register[170] ?
													 7'd30 :
													 (inst_dpfm_add_sub_ff_input_register[169] ?
													    7'd31 :
													    (inst_dpfm_add_sub_ff_input_register[168] ?
													       7'd32 :
													       (inst_dpfm_add_sub_ff_input_register[167] ?
														  7'd33 :
														  (inst_dpfm_add_sub_ff_input_register[166] ?
														     7'd34 :
														     (inst_dpfm_add_sub_ff_input_register[165] ?
															7'd35 :
															(inst_dpfm_add_sub_ff_input_register[164] ?
															   7'd36 :
															   (inst_dpfm_add_sub_ff_input_register[163] ?
															      7'd37 :
															      (inst_dpfm_add_sub_ff_input_register[162] ?
																 7'd38 :
																 (inst_dpfm_add_sub_ff_input_register[161] ?
																    7'd39 :
																    (inst_dpfm_add_sub_ff_input_register[160] ?
																       7'd40 :
																       (inst_dpfm_add_sub_ff_input_register[159] ?
																	  7'd41 :
																	  (inst_dpfm_add_sub_ff_input_register[158] ?
																	     7'd42 :
																	     (inst_dpfm_add_sub_ff_input_register[157] ?
																		7'd43 :
																		(inst_dpfm_add_sub_ff_input_register[156] ?
																		   7'd44 :
																		   (inst_dpfm_add_sub_ff_input_register[155] ?
																		      7'd45 :
																		      (inst_dpfm_add_sub_ff_input_register[154] ?
																			 7'd46 :
																			 (inst_dpfm_add_sub_ff_input_register[153] ?
																			    7'd47 :
																			    (inst_dpfm_add_sub_ff_input_register[152] ?
																			       7'd48 :
																			       (inst_dpfm_add_sub_ff_input_register[151] ?
																				  7'd49 :
																				  (inst_dpfm_add_sub_ff_input_register[150] ?
																				     7'd50 :
																				     (inst_dpfm_add_sub_ff_input_register[149] ?
																					7'd51 :
																					(inst_dpfm_add_sub_ff_input_register[148] ?
																					   7'd52 :
																					   (inst_dpfm_add_sub_ff_input_register[147] ?
																					      7'd53 :
																					      (inst_dpfm_add_sub_ff_input_register[146] ?
																						 7'd54 :
																						 (inst_dpfm_add_sub_ff_input_register[145] ?
																						    7'd55 :
																						    (inst_dpfm_add_sub_ff_input_register[144] ?
																						       7'd56 :
																						       (inst_dpfm_add_sub_ff_input_register[143] ?
																							  7'd57 :
																							  (inst_dpfm_add_sub_ff_input_register[142] ?
																							     7'd58 :
																							     (inst_dpfm_add_sub_ff_input_register[141] ?
																								7'd59 :
																								(inst_dpfm_add_sub_ff_input_register[140] ?
																								   7'd60 :
																								   (inst_dpfm_add_sub_ff_input_register[139] ?
																								      7'd61 :
																								      (inst_dpfm_add_sub_ff_input_register[138] ?
																									 7'd62 :
																									 (inst_dpfm_add_sub_ff_input_register[137] ?
																									    7'd63 :
																									    (inst_dpfm_add_sub_ff_input_register[136] ?
																									       7'd64 :
																									       (inst_dpfm_add_sub_ff_input_register[135] ?
																										  7'd65 :
																										  (inst_dpfm_add_sub_ff_input_register[134] ?
																										     7'd66 :
																										     (inst_dpfm_add_sub_ff_input_register[133] ?
																											7'd67 :
																											(inst_dpfm_add_sub_ff_input_register[132] ?
																											   7'd68 :
																											   (inst_dpfm_add_sub_ff_input_register[131] ?
																											      7'd69 :
																											      (inst_dpfm_add_sub_ff_input_register[130] ?
																												 7'd70 :
																												 (inst_dpfm_add_sub_ff_input_register[129] ?
																												    7'd71 :
																												    (inst_dpfm_add_sub_ff_input_register[128] ?
																												       7'd72 :
																												       (inst_dpfm_add_sub_ff_input_register[127] ?
																													  7'd73 :
																													  (inst_dpfm_add_sub_ff_input_register[126] ?
																													     7'd74 :
																													     (inst_dpfm_add_sub_ff_input_register[125] ?
																														7'd75 :
																														(inst_dpfm_add_sub_ff_input_register[124] ?
																														   7'd76 :
																														   (inst_dpfm_add_sub_ff_input_register[123] ?
																														      7'd77 :
																														      (inst_dpfm_add_sub_ff_input_register[122] ?
																															 7'd78 :
																															 (inst_dpfm_add_sub_ff_input_register[121] ?
																															    7'd79 :
																															    (inst_dpfm_add_sub_ff_input_register[120] ?
																															       7'd80 :
																															       (inst_dpfm_add_sub_ff_input_register[119] ?
																																  7'd81 :
																																  (inst_dpfm_add_sub_ff_input_register[118] ?
																																     7'd82 :
																																     (inst_dpfm_add_sub_ff_input_register[117] ?
																																	7'd83 :
																																	(inst_dpfm_add_sub_ff_input_register[116] ?
																																	   7'd84 :
																																	   (inst_dpfm_add_sub_ff_input_register[115] ?
																																	      7'd85 :
																																	      (inst_dpfm_add_sub_ff_input_register[114] ?
																																		 7'd86 :
																																		 (inst_dpfm_add_sub_ff_input_register[113] ?
																																		    7'd87 :
																																		    (inst_dpfm_add_sub_ff_input_register[112] ?
																																		       7'd88 :
																																		       (inst_dpfm_add_sub_ff_input_register[111] ?
																																			  7'd89 :
																																			  (inst_dpfm_add_sub_ff_input_register[110] ?
																																			     7'd90 :
																																			     (inst_dpfm_add_sub_ff_input_register[109] ?
																																				7'd91 :
																																				(inst_dpfm_add_sub_ff_input_register[108] ?
																																				   7'd92 :
																																				   (inst_dpfm_add_sub_ff_input_register[107] ?
																																				      7'd93 :
																																				      (inst_dpfm_add_sub_ff_input_register[106] ?
																																					 7'd94 :
																																					 (inst_dpfm_add_sub_ff_input_register[105] ?
																																					    7'd95 :
																																					    (inst_dpfm_add_sub_ff_input_register[104] ?
																																					       7'd96 :
																																					       (inst_dpfm_add_sub_ff_input_register[103] ?
																																						  7'd97 :
																																						  (inst_dpfm_add_sub_ff_input_register[102] ?
																																						     7'd98 :
																																						     (inst_dpfm_add_sub_ff_input_register[101] ?
																																							7'd99 :
																																							(inst_dpfm_add_sub_ff_input_register[100] ?
																																							   7'd100 :
																																							   (inst_dpfm_add_sub_ff_input_register[99] ?
																																							      7'd101 :
																																							      (inst_dpfm_add_sub_ff_input_register[98] ?
																																								 7'd102 :
																																								 (inst_dpfm_add_sub_ff_input_register[97] ?
																																								    7'd103 :
																																								    (inst_dpfm_add_sub_ff_input_register[96] ?
																																								       7'd104 :
																																								       (inst_dpfm_add_sub_ff_input_register[95] ?
																																									  7'd105 :
																																									  7'd107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h94524 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       msb_zeros___1__h94555 :
	       msb_zeros__h79455 ;
  assign new_value_final_result__h171104 =
	     inst_dpfm_add_sub_ff_stage5[17] ?
	       64'h7FF8000000000000 :
	       _theResult_____3_snd_snd_snd__h171198 ;
  assign new_value_final_result__h57962 =
	     inst_spfm_add_sub_ff_stage5[16] ?
	       32'h7FC00000 :
	       _theResult_____3_snd_snd_snd__h58056 ;
  assign op_xor_sign3__h102238 =
	     inst_dpfm_add_sub_ff_stage2[12] ^ sign3__h102227 ;
  assign op_xor_sign3__h25897 =
	     inst_spfm_add_sub_ff_stage2[12] ^ sign3__h25886 ;
  assign or_sign__h175600 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] |
	     setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ;
  assign or_sign__h177824 = ff_input_D_OUT[208] | ff_input_D_OUT[144] ;
  assign quiet_nan_two__h232851 = x__h233428 | y__h233429 ;
  assign quiet_nan_two__h234568 = x__h235140 | y__h235141 ;
  assign res___1__h231226 =
	     { ff_input_D_OUT[208],
	       _theResult_____2__h230961,
	       IF_IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0_ETC___d4373[22:0] } ;
  assign res__h184077 = ff_input_D_OUT[176] ? 32'hCF000000 : 32'd0 ;
  assign res__h198979 =
	     { lv_sign__h198970, expo__h198977, mantissa__h198978 } ;
  assign res__h230585 =
	     IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4318 ?
	       _theResult___snd_fst__h231224 :
	       32'd0 ;
  assign result__h225187 =
	     condFlags32_reswget_BITS_14_TO_10__q53[0] ? 5'd16 : 5'd0 ;
  assign result__h229982 =
	     condFlags64_reswget_BITS_14_TO_10__q33[0] ? 5'd16 : 5'd0 ;
  assign result__h230988 =
	     { IF_NOT_IF_getExp64_res_whas__004_THEN_getExp64_ETC___d4346[4:1],
	       IF_NOT_IF_getExp64_res_whas__004_THEN_getExp64_ETC___d4346[0] |
	       x__h230886 } ;
  assign result__h231019 = { exception__h230578[4:2], 2'd3 } ;
  assign result_exponent___1__h14655 =
	     inst_spfpu_sqrt_rg_inter_stage[67:59] + 9'd1 ;
  assign result_exponent___1__h79052 =
	     inst_dpfpu_sqrt_rg_inter_stage[128:117] + 12'd1 ;
  assign result_exponent__h262451 = x__h270674 + y__h270675 ;
  assign result_exponent__h271463 = x__h287811 + y__h287812 ;
  assign result_mantissa__h14142 =
	     { inst_spfpu_sqrt_rg_inter_stage[93:69],
	       !_theResult____h13815[28] } ;
  assign result_mantissa__h78539 =
	     { inst_dpfpu_sqrt_rg_inter_stage[183:130],
	       !_theResult____h78212[57] } ;
  assign resultant_exponent___1__h171787 =
	     resultant_exponent__h171056 + 13'd1 ;
  assign resultant_exponent___1__h58645 = resultant_exponent__h57914 + 10'd1 ;
  assign resultant_exponent__h171056 =
	     inst_dpfm_add_sub_ff_stage5[183] ?
	       resultant_exponent_inc__h171051 :
	       _theResult___fst__h171386 ;
  assign resultant_exponent__h57914 =
	     inst_spfm_add_sub_ff_stage5[95] ?
	       resultant_exponent_inc__h57909 :
	       _theResult___fst__h58244 ;
  assign resultant_exponent_inc__h171051 =
	     inst_dpfm_add_sub_ff_stage5[196:184] + 13'd1 ;
  assign resultant_exponent_inc__h57909 =
	     inst_spfm_add_sub_ff_stage5[105:96] + 10'd1 ;
  assign resultant_exponent_sub__h171049 =
	     inst_dpfm_add_sub_ff_stage5[196:184] - 13'd1 ;
  assign resultant_exponent_sub__h57907 =
	     inst_spfm_add_sub_ff_stage5[105:96] - 10'd1 ;
  assign resultant_exponent_sub_zerosMSB__h171054 =
	     inst_dpfm_add_sub_ff_stage5[196:184] -
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__171_ETC___d3189 ;
  assign resultant_exponent_sub_zerosMSB__h57912 =
	     inst_spfm_add_sub_ff_stage5[105:96] -
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__178_ETC___d1196 ;
  assign resultant_mantissa___1__h171358 =
	     { 1'd0,
	       inst_dpfm_add_sub_ff_stage5[183:26],
	       inst_dpfm_add_sub_ff_stage5[24] |
	       inst_dpfm_add_sub_ff_stage5[25] } ;
  assign resultant_mantissa___1__h58216 =
	     { 1'd0,
	       inst_spfm_add_sub_ff_stage5[95:25],
	       inst_spfm_add_sub_ff_stage5[23] |
	       inst_spfm_add_sub_ff_stage5[24] } ;
  assign resultant_mantissa_norm_expo__h171052 =
	     inst_dpfm_add_sub_ff_stage5[183:24] <<
	     resultant_exponent_sub__h171049 ;
  assign resultant_mantissa_norm_expo__h57910 =
	     inst_spfm_add_sub_ff_stage5[95:23] <<
	     resultant_exponent_sub__h57907 ;
  assign resultant_mantissa_norm_zerosMSB__h171053 =
	     inst_dpfm_add_sub_ff_stage5[183:24] << x__h171635 ;
  assign resultant_mantissa_norm_zerosMSB__h57911 =
	     inst_spfm_add_sub_ff_stage5[95:23] << x__h58493 ;
  assign setCanonicalNaN_argwget_BITS_127_TO_64__q40 =
	     setCanonicalNaN_arg_wget[127:64] ;
  assign setCanonicalNaN_argwget_BITS_191_TO_128__q39 =
	     setCanonicalNaN_arg_wget[191:128] ;
  assign setCanonicalNaN_argwget_BITS_63_TO_0__q41 =
	     setCanonicalNaN_arg_wget[63:0] ;
  assign setCanonicalNaN_reswget_BITS_31_TO_0__q59 =
	     setCanonicalNaN_res_wget[31:0] ;
  assign setCanonicalNaN_reswget_BITS_63_TO_32__q43 =
	     setCanonicalNaN_res_wget[63:32] ;
  assign setCanonicalNaN_reswget_BITS_95_TO_64__q42 =
	     setCanonicalNaN_res_wget[95:64] ;
  assign shiftDist__h230344 = 11'd896 - getExp64_res_wget[32:22] ;
  assign shift_neg__h22074 =
	     ~_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473 +
	     10'd1 ;
  assign shift_neg__h6149 =
	     ~_1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d129 +
	     10'd1 ;
  assign shift_neg__h64602 =
	     ~_1_MINUS_inst_dpfpu_divider_rg_stage2_450_BITS__ETC___d1455 +
	     13'd1 ;
  assign shift_neg__h94529 =
	     ~_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1886 +
	     13'd1 ;
  assign sign2__h102225 =
	     inst_dpfm_add_sub_ff_stage2[203] ^
	     inst_dpfm_add_sub_ff_stage2[202] ;
  assign sign2__h25884 =
	     inst_spfm_add_sub_ff_stage2[110] ^
	     inst_spfm_add_sub_ff_stage2[109] ;
  assign sign3__h102227 =
	     inst_dpfm_add_sub_ff_stage2[81] ^
	     inst_dpfm_add_sub_ff_stage2[202] ;
  assign sign3__h25886 =
	     inst_spfm_add_sub_ff_stage2[49] ^
	     inst_spfm_add_sub_ff_stage2[109] ;
  assign sign__h203751 = !ff_input_D_OUT[1] && ff_input_D_OUT[208] ;
  assign sub_mantissa1__h148457 =
	     inst_dpfm_add_sub_ff_stage4[346] ?
	       inst_dpfm_add_sub_ff_stage4[332:173] :
	       inst_dpfm_add_sub_ff_stage4[172:13] ;
  assign sub_mantissa1__h47495 =
	     inst_spfm_add_sub_ff_stage4[169] ?
	       inst_spfm_add_sub_ff_stage4[158:86] :
	       inst_spfm_add_sub_ff_stage4[85:13] ;
  assign sub_mantissa2__h148458 =
	     inst_dpfm_add_sub_ff_stage4[346] ?
	       inst_dpfm_add_sub_ff_stage4[172:13] :
	       inst_dpfm_add_sub_ff_stage4[332:173] ;
  assign sub_mantissa2__h47496 =
	     inst_spfm_add_sub_ff_stage4[169] ?
	       inst_spfm_add_sub_ff_stage4[85:13] :
	       inst_spfm_add_sub_ff_stage4[158:86] ;
  assign sub_mantissa__h148459 =
	     sub_mantissa1__h148457 - sub_mantissa2__h148458 ;
  assign sub_mantissa__h47497 =
	     sub_mantissa1__h47495 - sub_mantissa2__h47496 ;
  assign theResult__98974_SL_x99122_BITS_4_TO_0__q3 =
	     _theResult____h198974 << x__h199122[4:0] ;
  assign value__h228628 = getMant32_res_wget[68:46] << x__h225379 ;
  assign wr_final_out_fflags__h198994 = { 4'd0, inexact__h203754 } ;
  assign wr_final_out_final_result__h198993 =
	     { sign__h203751,
	       IF_IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0_ETC___d3724[52] ?
		 local_expo___1__h213029 :
		 expo__h198990,
	       IF_IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0_ETC___d3724[51:0] } ;
  assign x1_avValue_fflags__h184083 =
	     (ff_input_D_OUT[175:145] == 31'd0) ?
	       5'd0 :
	       inst_fpu_int_to_fp_fcvt_s_wwu_res_wget[36:32] ;
  assign x1_avValue_fflags__h189110 =
	     ff_input_D_OUT[1] ?
	       inst_fpu_int_to_fp_fcvt_s_wwu_res_wget[36:32] :
	       x1_avValue_fflags__h184083 ;
  assign x1_avValue_fflags__h198654 =
	     ff_input_D_OUT[2] ?
	       inst_fpu_int_to_fp_fcvt_s_llu_res_wget[36:32] :
	       x1_avValue_fflags__h189110 ;
  assign x1_avValue_final_result__h184082 =
	     (ff_input_D_OUT[175:145] == 31'd0) ?
	       res__h184077 :
	       inst_fpu_int_to_fp_fcvt_s_wwu_res_wget[31:0] ;
  assign x1_avValue_final_result__h189109 =
	     ff_input_D_OUT[1] ?
	       inst_fpu_int_to_fp_fcvt_s_wwu_res_wget[31:0] :
	       x1_avValue_final_result__h184082 ;
  assign x1_avValue_final_result__h198653 =
	     ff_input_D_OUT[2] ?
	       inst_fpu_int_to_fp_fcvt_s_llu_res_wget[31:0] :
	       x1_avValue_final_result__h189109 ;
  assign x1_avValue_final_result__h198661 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       32'b0 :
	       x1_avValue_final_result__h198653 ;
  assign x1_avValue_final_result__h213402 =
	     { CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44,
	       setCanonicalNaN_reswget_BITS_95_TO_64__q42[30:0] } ;
  assign x1_avValue_snd_fst__h231221 =
	     (!condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	      !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	      !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	      !condFlags64_reswget_BITS_14_TO_10__q33[3]) ?
	       y_avValue_snd_fst__h231218 :
	       res__h230585 ;
  assign x__h101979 =
	     (!inst_dpfm_add_sub_ff_input_register_read__873__ETC___d1878 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) &&
	     (!inst_dpfm_add_sub_ff_input_register[2] ||
	      !(x__h102010 ^ inst_dpfm_add_sub_ff_input_register[5])) ;
  assign x__h102010 =
	     inst_dpfm_add_sub_ff_input_register[81] ^
	     inst_dpfm_add_sub_ff_input_register[80] ;
  assign x__h102040 =
	     inst_dpfm_add_sub_ff_input_register_read__873__ETC___d1878 &&
	     (!inst_dpfm_add_sub_ff_input_register[200] ||
	      inst_dpfm_add_sub_ff_input_register[94:82] != 13'd2046) &&
	     (inst_dpfm_add_sub_ff_input_register_read__873__ETC___d1877 ^
	      13'h1000) <
	     13'd3020 &&
	     (!inst_dpfm_add_sub_ff_input_register[2] ||
	      inst_dpfm_add_sub_ff_input_register[12] ||
	      inst_dpfm_add_sub_ff_input_register[13]) &&
	     !inst_dpfm_add_sub_ff_input_register[14] ;
  assign x__h102379 = x__h102391 | y__h102392 ;
  assign x__h102391 = _theResult_____1__h102273 & sign2__h102225 ;
  assign x__h12021 =
	     inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127 &&
	     inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d128 ;
  assign x__h12026 =
	     (!inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127 ||
	      inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d128 ||
	      _1_MINUS_inst_spfpu_divider_rg_stage2_24_BITS_1_ETC___d130) ?
	       inst_spfpu_divider_int_div_wr_final_out_wget[0] :
	       lv_sticky___1__h6175 ;
  assign x__h12248 = _theResult____h12093 | inst_spfpu_divider_rg_stage3[53] ;
  assign x__h12416 = inst_spfpu_divider_rg_stage3[52] | _theResult____h12093 ;
  assign x__h12451 = x__h12453 | _theResult____h12093 ;
  assign x__h12453 =
	     inst_spfpu_divider_rg_stage3[53] |
	     inst_spfpu_divider_rg_stage3[52] ;
  assign x__h137335 =
	     mantissa_to_shift__h102262[0] ?
	       8'd0 :
	       (mantissa_to_shift__h102262[1] ?
		  8'd1 :
		  (mantissa_to_shift__h102262[2] ?
		     8'd2 :
		     (mantissa_to_shift__h102262[3] ?
			8'd3 :
			(mantissa_to_shift__h102262[4] ?
			   8'd4 :
			   (mantissa_to_shift__h102262[5] ?
			      8'd5 :
			      (mantissa_to_shift__h102262[6] ?
				 8'd6 :
				 (mantissa_to_shift__h102262[7] ?
				    8'd7 :
				    (mantissa_to_shift__h102262[8] ?
				       8'd8 :
				       (mantissa_to_shift__h102262[9] ?
					  8'd9 :
					  (mantissa_to_shift__h102262[10] ?
					     8'd10 :
					     (mantissa_to_shift__h102262[11] ?
						8'd11 :
						(mantissa_to_shift__h102262[12] ?
						   8'd12 :
						   (mantissa_to_shift__h102262[13] ?
						      8'd13 :
						      (mantissa_to_shift__h102262[14] ?
							 8'd14 :
							 (mantissa_to_shift__h102262[15] ?
							    8'd15 :
							    (mantissa_to_shift__h102262[16] ?
							       8'd16 :
							       (mantissa_to_shift__h102262[17] ?
								  8'd17 :
								  (mantissa_to_shift__h102262[18] ?
								     8'd18 :
								     (mantissa_to_shift__h102262[19] ?
									8'd19 :
									(mantissa_to_shift__h102262[20] ?
									   8'd20 :
									   (mantissa_to_shift__h102262[21] ?
									      8'd21 :
									      (mantissa_to_shift__h102262[22] ?
										 8'd22 :
										 (mantissa_to_shift__h102262[23] ?
										    8'd23 :
										    (mantissa_to_shift__h102262[24] ?
										       8'd24 :
										       (mantissa_to_shift__h102262[25] ?
											  8'd25 :
											  (mantissa_to_shift__h102262[26] ?
											     8'd26 :
											     (mantissa_to_shift__h102262[27] ?
												8'd27 :
												(mantissa_to_shift__h102262[28] ?
												   8'd28 :
												   (mantissa_to_shift__h102262[29] ?
												      8'd29 :
												      (mantissa_to_shift__h102262[30] ?
													 8'd30 :
													 (mantissa_to_shift__h102262[31] ?
													    8'd31 :
													    (mantissa_to_shift__h102262[32] ?
													       8'd32 :
													       (mantissa_to_shift__h102262[33] ?
														  8'd33 :
														  (mantissa_to_shift__h102262[34] ?
														     8'd34 :
														     (mantissa_to_shift__h102262[35] ?
															8'd35 :
															(mantissa_to_shift__h102262[36] ?
															   8'd36 :
															   (mantissa_to_shift__h102262[37] ?
															      8'd37 :
															      (mantissa_to_shift__h102262[38] ?
																 8'd38 :
																 (mantissa_to_shift__h102262[39] ?
																    8'd39 :
																    (mantissa_to_shift__h102262[40] ?
																       8'd40 :
																       (mantissa_to_shift__h102262[41] ?
																	  8'd41 :
																	  (mantissa_to_shift__h102262[42] ?
																	     8'd42 :
																	     (mantissa_to_shift__h102262[43] ?
																		8'd43 :
																		(mantissa_to_shift__h102262[44] ?
																		   8'd44 :
																		   (mantissa_to_shift__h102262[45] ?
																		      8'd45 :
																		      (mantissa_to_shift__h102262[46] ?
																			 8'd46 :
																			 (mantissa_to_shift__h102262[47] ?
																			    8'd47 :
																			    (mantissa_to_shift__h102262[48] ?
																			       8'd48 :
																			       (mantissa_to_shift__h102262[49] ?
																				  8'd49 :
																				  (mantissa_to_shift__h102262[50] ?
																				     8'd50 :
																				     (mantissa_to_shift__h102262[51] ?
																					8'd51 :
																					(mantissa_to_shift__h102262[52] ?
																					   8'd52 :
																					   (mantissa_to_shift__h102262[53] ?
																					      8'd53 :
																					      (mantissa_to_shift__h102262[54] ?
																						 8'd54 :
																						 (mantissa_to_shift__h102262[55] ?
																						    8'd55 :
																						    (mantissa_to_shift__h102262[56] ?
																						       8'd56 :
																						       (mantissa_to_shift__h102262[57] ?
																							  8'd57 :
																							  (mantissa_to_shift__h102262[58] ?
																							     8'd58 :
																							     (mantissa_to_shift__h102262[59] ?
																								8'd59 :
																								(mantissa_to_shift__h102262[60] ?
																								   8'd60 :
																								   (mantissa_to_shift__h102262[61] ?
																								      8'd61 :
																								      (mantissa_to_shift__h102262[62] ?
																									 8'd62 :
																									 (mantissa_to_shift__h102262[63] ?
																									    8'd63 :
																									    (mantissa_to_shift__h102262[64] ?
																									       8'd64 :
																									       (mantissa_to_shift__h102262[65] ?
																										  8'd65 :
																										  (mantissa_to_shift__h102262[66] ?
																										     8'd66 :
																										     (mantissa_to_shift__h102262[67] ?
																											8'd67 :
																											(mantissa_to_shift__h102262[68] ?
																											   8'd68 :
																											   (mantissa_to_shift__h102262[69] ?
																											      8'd69 :
																											      (mantissa_to_shift__h102262[70] ?
																												 8'd70 :
																												 (mantissa_to_shift__h102262[71] ?
																												    8'd71 :
																												    (mantissa_to_shift__h102262[72] ?
																												       8'd72 :
																												       (mantissa_to_shift__h102262[73] ?
																													  8'd73 :
																													  (mantissa_to_shift__h102262[74] ?
																													     8'd74 :
																													     (mantissa_to_shift__h102262[75] ?
																														8'd75 :
																														(mantissa_to_shift__h102262[76] ?
																														   8'd76 :
																														   (mantissa_to_shift__h102262[77] ?
																														      8'd77 :
																														      (mantissa_to_shift__h102262[78] ?
																															 8'd78 :
																															 (mantissa_to_shift__h102262[79] ?
																															    8'd79 :
																															    (mantissa_to_shift__h102262[80] ?
																															       8'd80 :
																															       (mantissa_to_shift__h102262[81] ?
																																  8'd81 :
																																  (mantissa_to_shift__h102262[82] ?
																																     8'd82 :
																																     (mantissa_to_shift__h102262[83] ?
																																	8'd83 :
																																	(mantissa_to_shift__h102262[84] ?
																																	   8'd84 :
																																	   (mantissa_to_shift__h102262[85] ?
																																	      8'd85 :
																																	      (mantissa_to_shift__h102262[86] ?
																																		 8'd86 :
																																		 (mantissa_to_shift__h102262[87] ?
																																		    8'd87 :
																																		    (mantissa_to_shift__h102262[88] ?
																																		       8'd88 :
																																		       (mantissa_to_shift__h102262[89] ?
																																			  8'd89 :
																																			  (mantissa_to_shift__h102262[90] ?
																																			     8'd90 :
																																			     (mantissa_to_shift__h102262[91] ?
																																				8'd91 :
																																				(mantissa_to_shift__h102262[92] ?
																																				   8'd92 :
																																				   (mantissa_to_shift__h102262[93] ?
																																				      8'd93 :
																																				      (mantissa_to_shift__h102262[94] ?
																																					 8'd94 :
																																					 (mantissa_to_shift__h102262[95] ?
																																					    8'd95 :
																																					    (mantissa_to_shift__h102262[96] ?
																																					       8'd96 :
																																					       (mantissa_to_shift__h102262[97] ?
																																						  8'd97 :
																																						  (mantissa_to_shift__h102262[98] ?
																																						     8'd98 :
																																						     (mantissa_to_shift__h102262[99] ?
																																							8'd99 :
																																							(mantissa_to_shift__h102262[100] ?
																																							   8'd100 :
																																							   (mantissa_to_shift__h102262[101] ?
																																							      8'd101 :
																																							      (mantissa_to_shift__h102262[102] ?
																																								 8'd102 :
																																								 (mantissa_to_shift__h102262[103] ?
																																								    8'd103 :
																																								    (mantissa_to_shift__h102262[104] ?
																																								       8'd104 :
																																								       (mantissa_to_shift__h102262[105] ?
																																									  8'd105 :
																																									  (mantissa_to_shift__h102262[106] ?
																																									     8'd106 :
																																									     (mantissa_to_shift__h102262[107] ?
																																										8'd107 :
																																										(mantissa_to_shift__h102262[108] ?
																																										   8'd108 :
																																										   (mantissa_to_shift__h102262[109] ?
																																										      8'd109 :
																																										      (mantissa_to_shift__h102262[110] ?
																																											 8'd110 :
																																											 (mantissa_to_shift__h102262[111] ?
																																											    8'd111 :
																																											    (mantissa_to_shift__h102262[112] ?
																																											       8'd112 :
																																											       (mantissa_to_shift__h102262[113] ?
																																												  8'd113 :
																																												  (mantissa_to_shift__h102262[114] ?
																																												     8'd114 :
																																												     (mantissa_to_shift__h102262[115] ?
																																													8'd115 :
																																													(mantissa_to_shift__h102262[116] ?
																																													   8'd116 :
																																													   (mantissa_to_shift__h102262[117] ?
																																													      8'd117 :
																																													      (mantissa_to_shift__h102262[118] ?
																																														 8'd118 :
																																														 (mantissa_to_shift__h102262[119] ?
																																														    8'd119 :
																																														    (mantissa_to_shift__h102262[120] ?
																																														       8'd120 :
																																														       (mantissa_to_shift__h102262[121] ?
																																															  8'd121 :
																																															  (mantissa_to_shift__h102262[122] ?
																																															     8'd122 :
																																															     (mantissa_to_shift__h102262[123] ?
																																																8'd123 :
																																																(mantissa_to_shift__h102262[124] ?
																																																   8'd124 :
																																																   (mantissa_to_shift__h102262[125] ?
																																																      8'd125 :
																																																      (mantissa_to_shift__h102262[126] ?
																																																	 8'd126 :
																																																	 (mantissa_to_shift__h102262[127] ?
																																																	    8'd127 :
																																																	    (mantissa_to_shift__h102262[128] ?
																																																	       8'd128 :
																																																	       (mantissa_to_shift__h102262[129] ?
																																																		  8'd129 :
																																																		  (mantissa_to_shift__h102262[130] ?
																																																		     8'd130 :
																																																		     (mantissa_to_shift__h102262[131] ?
																																																			8'd131 :
																																																			(mantissa_to_shift__h102262[132] ?
																																																			   8'd132 :
																																																			   (mantissa_to_shift__h102262[133] ?
																																																			      8'd133 :
																																																			      (mantissa_to_shift__h102262[134] ?
																																																				 8'd134 :
																																																				 (mantissa_to_shift__h102262[135] ?
																																																				    8'd135 :
																																																				    (mantissa_to_shift__h102262[136] ?
																																																				       8'd136 :
																																																				       (mantissa_to_shift__h102262[137] ?
																																																					  8'd137 :
																																																					  (mantissa_to_shift__h102262[138] ?
																																																					     8'd138 :
																																																					     (mantissa_to_shift__h102262[139] ?
																																																						8'd139 :
																																																						(mantissa_to_shift__h102262[140] ?
																																																						   8'd140 :
																																																						   (mantissa_to_shift__h102262[141] ?
																																																						      8'd141 :
																																																						      (mantissa_to_shift__h102262[142] ?
																																																							 8'd142 :
																																																							 (mantissa_to_shift__h102262[143] ?
																																																							    8'd143 :
																																																							    (mantissa_to_shift__h102262[144] ?
																																																							       8'd144 :
																																																							       (mantissa_to_shift__h102262[145] ?
																																																								  8'd145 :
																																																								  (mantissa_to_shift__h102262[146] ?
																																																								     8'd146 :
																																																								     (mantissa_to_shift__h102262[147] ?
																																																									8'd147 :
																																																									(mantissa_to_shift__h102262[148] ?
																																																									   8'd148 :
																																																									   (mantissa_to_shift__h102262[149] ?
																																																									      8'd149 :
																																																									      (mantissa_to_shift__h102262[150] ?
																																																										 8'd150 :
																																																										 (mantissa_to_shift__h102262[151] ?
																																																										    8'd151 :
																																																										    (mantissa_to_shift__h102262[152] ?
																																																										       8'd152 :
																																																										       (mantissa_to_shift__h102262[153] ?
																																																											  8'd153 :
																																																											  (mantissa_to_shift__h102262[154] ?
																																																											     8'd154 :
																																																											     (mantissa_to_shift__h102262[155] ?
																																																												8'd155 :
																																																												(mantissa_to_shift__h102262[156] ?
																																																												   8'd156 :
																																																												   (mantissa_to_shift__h102262[157] ?
																																																												      8'd157 :
																																																												      (mantissa_to_shift__h102262[158] ?
																																																													 8'd158 :
																																																													 (mantissa_to_shift__h102262[159] ?
																																																													    8'd159 :
																																																													    8'd160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h13852 =
	     { inst_spfpu_sqrt_rg_inter_stage[92:69],
	       !_theResult____h13815[28],
	       1'd0 } ;
  assign x__h14115 =
	     { inst_spfpu_sqrt_rg_inter_stage[27:3],
	       !_theResult____h13815[28] } ;
  assign x__h14504 =
	     inst_spfpu_sqrt_rg_inter_stage[70] | !_theResult____h13815[28] ;
  assign x__h14545 =
	     _theResult____h13815[28] ?
	       lv_remainder__h14567 :
	       _theResult____h13815 ;
  assign x__h14619 =
	     inst_spfpu_sqrt_rg_inter_stage[69] | !_theResult____h13815[28] ;
  assign x__h148123 = ~_theResult_____1__h102273 ;
  assign x__h148130 =
	     inst_dpfm_add_sub_ff_stage2_read__388_BIT_15_4_ETC___d2413 ||
	     inst_dpfm_add_sub_ff_stage2[6] ||
	     (!inst_dpfm_add_sub_ff_stage2[16] ||
	      !inst_dpfm_add_sub_ff_stage2[5]) &&
	     inst_dpfm_add_sub_ff_stage2[4] &&
	     inst_dpfm_add_sub_ff_stage2[14] &&
	     x__h148238 ;
  assign x__h148238 = sign2__h102225 ^ op_xor_sign3__h102238 ;
  assign x__h148246 =
	     (inst_dpfm_add_sub_ff_stage2_read__388_BIT_15_4_ETC___d2413 ||
	      inst_dpfm_add_sub_ff_stage2[6] ||
	      inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       2'd0 :
	       _theResult_____6_snd_snd__h148203 ;
  assign x__h148278 = x__h148280 & sign2__h102225 ;
  assign x__h148280 = inst_dpfm_add_sub_ff_stage2[4] & y__h148281 ;
  assign x__h148282 = x__h148283 & inst_dpfm_add_sub_ff_stage2[14] ;
  assign x__h148283 = ~inst_dpfm_add_sub_ff_stage2[4] ;
  assign x__h148287 =
	     (inst_dpfm_add_sub_ff_stage2_read__388_BIT_15_4_ETC___d2413 ||
	      inst_dpfm_add_sub_ff_stage2[6]) ?
	       2'd0 :
	       _theResult_____6_snd_snd_snd__h148250 ;
  assign x__h148311 = x__h148323 & y__h148324 ;
  assign x__h148323 =
	     (inst_dpfm_add_sub_ff_stage2_read__388_BIT_15_4_ETC___d2413 ||
	      inst_dpfm_add_sub_ff_stage2[6] ||
	      inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       inst_dpfm_add_sub_ff_stage2[1] :
	       _theResult_____6_fst__h148200 ;
  assign x__h148353 =
	     (inst_dpfm_add_sub_ff_stage2[1] ||
	      !inst_dpfm_add_sub_ff_stage2[6]) &&
	     inst_dpfm_add_sub_ff_stage2[15] ;
  assign x__h148537 =
	     (_theResult____h148460 == 160'd0) ?
	       ((inst_dpfm_add_sub_ff_stage4[12:10] == 3'b010) ?
		  2'b11 :
		  2'b01) :
	       2'd0 ;
  assign x__h171635 = inst_dpfm_add_sub_ff_stage5[7:0] - 8'd1 ;
  assign x__h171656 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3214[106] |
	     IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3214[104] ;
  assign x__h171738 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3214[105] |
	     IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3214[104] ;
  assign x__h184203 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5145[7] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5145[6] ;
  assign x__h184334 =
	     _theResult____h184172[31] ?
	       6'd0 :
	       (_theResult____h184172[30] ?
		  6'd1 :
		  (_theResult____h184172[29] ?
		     6'd2 :
		     (_theResult____h184172[28] ?
			6'd3 :
			(_theResult____h184172[27] ?
			   6'd4 :
			   (_theResult____h184172[26] ?
			      6'd5 :
			      (_theResult____h184172[25] ?
				 6'd6 :
				 (_theResult____h184172[24] ?
				    6'd7 :
				    (_theResult____h184172[23] ?
				       6'd8 :
				       (_theResult____h184172[22] ?
					  6'd9 :
					  (_theResult____h184172[21] ?
					     6'd10 :
					     (_theResult____h184172[20] ?
						6'd11 :
						(_theResult____h184172[19] ?
						   6'd12 :
						   (_theResult____h184172[18] ?
						      6'd13 :
						      (_theResult____h184172[17] ?
							 6'd14 :
							 (_theResult____h184172[16] ?
							    6'd15 :
							    (_theResult____h184172[15] ?
							       6'd16 :
							       (_theResult____h184172[14] ?
								  6'd17 :
								  (_theResult____h184172[13] ?
								     6'd18 :
								     (_theResult____h184172[12] ?
									6'd19 :
									(_theResult____h184172[11] ?
									   6'd20 :
									   (_theResult____h184172[10] ?
									      6'd21 :
									      (_theResult____h184172[9] ?
										 6'd22 :
										 (_theResult____h184172[8] ?
										    6'd23 :
										    (_theResult____h184172[7] ?
										       6'd24 :
										       (_theResult____h184172[6] ?
											  6'd25 :
											  (_theResult____h184172[5] ?
											     6'd26 :
											     (_theResult____h184172[4] ?
												6'd27 :
												(_theResult____h184172[3] ?
												   6'd28 :
												   (_theResult____h184172[2] ?
												      6'd29 :
												      (_theResult____h184172[1] ?
													 6'd30 :
													 (_theResult____h184172[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign x__h188956 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5145[8] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5145[6] ;
  assign x__h189243 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5021[39] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5021[38] ;
  assign x__h189392 =
	     _theResult____h189212[63] ?
	       7'd0 :
	       (_theResult____h189212[62] ?
		  7'd1 :
		  (_theResult____h189212[61] ?
		     7'd2 :
		     (_theResult____h189212[60] ?
			7'd3 :
			(_theResult____h189212[59] ?
			   7'd4 :
			   (_theResult____h189212[58] ?
			      7'd5 :
			      (_theResult____h189212[57] ?
				 7'd6 :
				 (_theResult____h189212[56] ?
				    7'd7 :
				    (_theResult____h189212[55] ?
				       7'd8 :
				       (_theResult____h189212[54] ?
					  7'd9 :
					  (_theResult____h189212[53] ?
					     7'd10 :
					     (_theResult____h189212[52] ?
						7'd11 :
						(_theResult____h189212[51] ?
						   7'd12 :
						   (_theResult____h189212[50] ?
						      7'd13 :
						      (_theResult____h189212[49] ?
							 7'd14 :
							 (_theResult____h189212[48] ?
							    7'd15 :
							    (_theResult____h189212[47] ?
							       7'd16 :
							       (_theResult____h189212[46] ?
								  7'd17 :
								  (_theResult____h189212[45] ?
								     7'd18 :
								     (_theResult____h189212[44] ?
									7'd19 :
									(_theResult____h189212[43] ?
									   7'd20 :
									   (_theResult____h189212[42] ?
									      7'd21 :
									      (_theResult____h189212[41] ?
										 7'd22 :
										 (_theResult____h189212[40] ?
										    7'd23 :
										    (_theResult____h189212[39] ?
										       7'd24 :
										       (_theResult____h189212[38] ?
											  7'd25 :
											  (_theResult____h189212[37] ?
											     7'd26 :
											     (_theResult____h189212[36] ?
												7'd27 :
												(_theResult____h189212[35] ?
												   7'd28 :
												   (_theResult____h189212[34] ?
												      7'd29 :
												      (_theResult____h189212[33] ?
													 7'd30 :
													 (_theResult____h189212[32] ?
													    7'd31 :
													    (_theResult____h189212[31] ?
													       7'd32 :
													       (_theResult____h189212[30] ?
														  7'd33 :
														  (_theResult____h189212[29] ?
														     7'd34 :
														     (_theResult____h189212[28] ?
															7'd35 :
															(_theResult____h189212[27] ?
															   7'd36 :
															   (_theResult____h189212[26] ?
															      7'd37 :
															      (_theResult____h189212[25] ?
																 7'd38 :
																 (_theResult____h189212[24] ?
																    7'd39 :
																    (_theResult____h189212[23] ?
																       7'd40 :
																       (_theResult____h189212[22] ?
																	  7'd41 :
																	  (_theResult____h189212[21] ?
																	     7'd42 :
																	     (_theResult____h189212[20] ?
																		7'd43 :
																		(_theResult____h189212[19] ?
																		   7'd44 :
																		   (_theResult____h189212[18] ?
																		      7'd45 :
																		      (_theResult____h189212[17] ?
																			 7'd46 :
																			 (_theResult____h189212[16] ?
																			    7'd47 :
																			    (_theResult____h189212[15] ?
																			       7'd48 :
																			       (_theResult____h189212[14] ?
																				  7'd49 :
																				  (_theResult____h189212[13] ?
																				     7'd50 :
																				     (_theResult____h189212[12] ?
																					7'd51 :
																					(_theResult____h189212[11] ?
																					   7'd52 :
																					   (_theResult____h189212[10] ?
																					      7'd53 :
																					      (_theResult____h189212[9] ?
																						 7'd54 :
																						 (_theResult____h189212[8] ?
																						    7'd55 :
																						    (_theResult____h189212[7] ?
																						       7'd56 :
																						       (_theResult____h189212[6] ?
																							  7'd57 :
																							  (_theResult____h189212[5] ?
																							     7'd58 :
																							     (_theResult____h189212[4] ?
																								7'd59 :
																								(_theResult____h189212[3] ?
																								   7'd60 :
																								   (_theResult____h189212[2] ?
																								      7'd61 :
																								      (_theResult____h189212[1] ?
																									 7'd62 :
																									 (_theResult____h189212[0] ?
																									    7'd63 :
																									    7'd64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h198495 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5021[40] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5021[38] ;
  assign x__h199122 =
	     _theResult____h198974[31] ?
	       6'd0 :
	       (_theResult____h198974[30] ?
		  6'd1 :
		  (_theResult____h198974[29] ?
		     6'd2 :
		     (_theResult____h198974[28] ?
			6'd3 :
			(_theResult____h198974[27] ?
			   6'd4 :
			   (_theResult____h198974[26] ?
			      6'd5 :
			      (_theResult____h198974[25] ?
				 6'd6 :
				 (_theResult____h198974[24] ?
				    6'd7 :
				    (_theResult____h198974[23] ?
				       6'd8 :
				       (_theResult____h198974[22] ?
					  6'd9 :
					  (_theResult____h198974[21] ?
					     6'd10 :
					     (_theResult____h198974[20] ?
						6'd11 :
						(_theResult____h198974[19] ?
						   6'd12 :
						   (_theResult____h198974[18] ?
						      6'd13 :
						      (_theResult____h198974[17] ?
							 6'd14 :
							 (_theResult____h198974[16] ?
							    6'd15 :
							    (_theResult____h198974[15] ?
							       6'd16 :
							       (_theResult____h198974[14] ?
								  6'd17 :
								  (_theResult____h198974[13] ?
								     6'd18 :
								     (_theResult____h198974[12] ?
									6'd19 :
									(_theResult____h198974[11] ?
									   6'd20 :
									   (_theResult____h198974[10] ?
									      6'd21 :
									      (_theResult____h198974[9] ?
										 6'd22 :
										 (_theResult____h198974[8] ?
										    6'd23 :
										    (_theResult____h198974[7] ?
										       6'd24 :
										       (_theResult____h198974[6] ?
											  6'd25 :
											  (_theResult____h198974[5] ?
											     6'd26 :
											     (_theResult____h198974[4] ?
												6'd27 :
												(_theResult____h198974[3] ?
												   6'd28 :
												   (_theResult____h198974[2] ?
												      6'd29 :
												      (_theResult____h198974[1] ?
													 6'd30 :
													 (_theResult____h198974[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign x__h203772 =
	     IF_NOT_ff_input_first__327_BIT_1_552_566_AND_f_ETC___d3700[10] |
	     IF_NOT_ff_input_first__327_BIT_1_552_566_AND_f_ETC___d3700[9] ;
  assign x__h203852 =
	     _theResult____h198987[63] ?
	       7'd0 :
	       (_theResult____h198987[62] ?
		  7'd1 :
		  (_theResult____h198987[61] ?
		     7'd2 :
		     (_theResult____h198987[60] ?
			7'd3 :
			(_theResult____h198987[59] ?
			   7'd4 :
			   (_theResult____h198987[58] ?
			      7'd5 :
			      (_theResult____h198987[57] ?
				 7'd6 :
				 (_theResult____h198987[56] ?
				    7'd7 :
				    (_theResult____h198987[55] ?
				       7'd8 :
				       (_theResult____h198987[54] ?
					  7'd9 :
					  (_theResult____h198987[53] ?
					     7'd10 :
					     (_theResult____h198987[52] ?
						7'd11 :
						(_theResult____h198987[51] ?
						   7'd12 :
						   (_theResult____h198987[50] ?
						      7'd13 :
						      (_theResult____h198987[49] ?
							 7'd14 :
							 (_theResult____h198987[48] ?
							    7'd15 :
							    (_theResult____h198987[47] ?
							       7'd16 :
							       (_theResult____h198987[46] ?
								  7'd17 :
								  (_theResult____h198987[45] ?
								     7'd18 :
								     (_theResult____h198987[44] ?
									7'd19 :
									(_theResult____h198987[43] ?
									   7'd20 :
									   (_theResult____h198987[42] ?
									      7'd21 :
									      (_theResult____h198987[41] ?
										 7'd22 :
										 (_theResult____h198987[40] ?
										    7'd23 :
										    (_theResult____h198987[39] ?
										       7'd24 :
										       (_theResult____h198987[38] ?
											  7'd25 :
											  (_theResult____h198987[37] ?
											     7'd26 :
											     (_theResult____h198987[36] ?
												7'd27 :
												(_theResult____h198987[35] ?
												   7'd28 :
												   (_theResult____h198987[34] ?
												      7'd29 :
												      (_theResult____h198987[33] ?
													 7'd30 :
													 (_theResult____h198987[32] ?
													    7'd31 :
													    (_theResult____h198987[31] ?
													       7'd32 :
													       (_theResult____h198987[30] ?
														  7'd33 :
														  (_theResult____h198987[29] ?
														     7'd34 :
														     (_theResult____h198987[28] ?
															7'd35 :
															(_theResult____h198987[27] ?
															   7'd36 :
															   (_theResult____h198987[26] ?
															      7'd37 :
															      (_theResult____h198987[25] ?
																 7'd38 :
																 (_theResult____h198987[24] ?
																    7'd39 :
																    (_theResult____h198987[23] ?
																       7'd40 :
																       (_theResult____h198987[22] ?
																	  7'd41 :
																	  (_theResult____h198987[21] ?
																	     7'd42 :
																	     (_theResult____h198987[20] ?
																		7'd43 :
																		(_theResult____h198987[19] ?
																		   7'd44 :
																		   (_theResult____h198987[18] ?
																		      7'd45 :
																		      (_theResult____h198987[17] ?
																			 7'd46 :
																			 (_theResult____h198987[16] ?
																			    7'd47 :
																			    (_theResult____h198987[15] ?
																			       7'd48 :
																			       (_theResult____h198987[14] ?
																				  7'd49 :
																				  (_theResult____h198987[13] ?
																				     7'd50 :
																				     (_theResult____h198987[12] ?
																					7'd51 :
																					(_theResult____h198987[11] ?
																					   7'd52 :
																					   (_theResult____h198987[10] ?
																					      7'd53 :
																					      (_theResult____h198987[9] ?
																						 7'd54 :
																						 (_theResult____h198987[8] ?
																						    7'd55 :
																						    (_theResult____h198987[7] ?
																						       7'd56 :
																						       (_theResult____h198987[6] ?
																							  7'd57 :
																							  (_theResult____h198987[5] ?
																							     7'd58 :
																							     (_theResult____h198987[4] ?
																								7'd59 :
																								(_theResult____h198987[3] ?
																								   7'd60 :
																								   (_theResult____h198987[2] ?
																								      7'd61 :
																								      (_theResult____h198987[1] ?
																									 7'd62 :
																									 (_theResult____h198987[0] ?
																									    7'd63 :
																									    7'd64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h212948 =
	     IF_NOT_ff_input_first__327_BIT_1_552_566_AND_f_ETC___d3700[11] |
	     IF_NOT_ff_input_first__327_BIT_1_552_566_AND_f_ETC___d3700[9] ;
  assign x__h213206 =
	     (setCanonicalNaN_argwget_BITS_191_TO_128__q39[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_191_TO_128__q39[31:0] :
	       32'h7FC00000 ;
  assign x__h213275 =
	     (setCanonicalNaN_argwget_BITS_127_TO_64__q40[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_127_TO_64__q40[31:0] :
	       32'h7FC00000 ;
  assign x__h213315 =
	     (setCanonicalNaN_argwget_BITS_63_TO_0__q41[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_63_TO_0__q41[31:0] :
	       32'h7FC00000 ;
  assign x__h214852 =
	     { condFlags32_arg_wget[69:62] == 8'd0 &&
	       condFlags32_arg_wget[92:70] != 23'd0,
	       condFlags32_arg_wget[92:70] == 23'd0 &&
	       condFlags32_arg_wget[69:62] == 8'd0,
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       condFlags32_argwget_BITS_92_TO_70__q50[22],
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       condFlags32_arg_wget[92:70] == 23'd0,
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       !condFlags32_argwget_BITS_92_TO_70__q50[22] &&
	       condFlags32_arg_wget[92:70] != 23'd0 } ;
  assign x__h215012 =
	     { condFlags32_arg_wget[38:31] == 8'd0 &&
	       condFlags32_arg_wget[61:39] != 23'd0,
	       condFlags32_arg_wget[61:39] == 23'd0 &&
	       condFlags32_arg_wget[38:31] == 8'd0,
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       condFlags32_argwget_BITS_61_TO_39__q51[22],
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       condFlags32_arg_wget[61:39] == 23'd0,
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       !condFlags32_argwget_BITS_61_TO_39__q51[22] &&
	       condFlags32_arg_wget[61:39] != 23'd0 } ;
  assign x__h215109 =
	     { condFlags32_arg_wget[7:0] == 8'd0 &&
	       condFlags32_arg_wget[30:8] != 23'd0,
	       condFlags32_arg_wget[30:8] == 23'd0 &&
	       condFlags32_arg_wget[7:0] == 8'd0,
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       condFlags32_argwget_BITS_30_TO_8__q52[22],
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       condFlags32_arg_wget[30:8] == 23'd0,
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       !condFlags32_argwget_BITS_30_TO_8__q52[22] &&
	       condFlags32_arg_wget[30:8] != 23'd0 } ;
  assign x__h216217 =
	     final_result__h215276[0] |
	     IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d3889[21] ;
  assign x__h216628 =
	     IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d3889[22] |
	     IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d3889[21] ;
  assign x__h217638 =
	     { condFlags64_arg_wget[136:126] == 11'd0 &&
	       condFlags64_arg_wget[188:137] != 52'd0,
	       condFlags64_arg_wget[188:137] == 52'd0 &&
	       condFlags64_arg_wget[136:126] == 11'd0,
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       condFlags64_argwget_BITS_188_TO_137__q30[51],
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       condFlags64_arg_wget[188:137] == 52'd0,
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       !condFlags64_argwget_BITS_188_TO_137__q30[51] &&
	       condFlags64_arg_wget[188:137] != 52'd0 } ;
  assign x__h217798 =
	     { condFlags64_arg_wget[73:63] == 11'd0 &&
	       condFlags64_arg_wget[125:74] != 52'd0,
	       condFlags64_arg_wget[125:74] == 52'd0 &&
	       condFlags64_arg_wget[73:63] == 11'd0,
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       condFlags64_argwget_BITS_125_TO_74__q31[51],
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       condFlags64_arg_wget[125:74] == 52'd0,
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       !condFlags64_argwget_BITS_125_TO_74__q31[51] &&
	       condFlags64_arg_wget[125:74] != 52'd0 } ;
  assign x__h217895 =
	     { condFlags64_arg_wget[10:0] == 11'd0 &&
	       condFlags64_arg_wget[62:11] != 52'd0,
	       condFlags64_arg_wget[62:11] == 52'd0 &&
	       condFlags64_arg_wget[10:0] == 11'd0,
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       condFlags64_argwget_BITS_62_TO_11__q32[51],
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       condFlags64_arg_wget[62:11] == 52'd0,
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       !condFlags64_argwget_BITS_62_TO_11__q32[51] &&
	       condFlags64_arg_wget[62:11] != 52'd0 } ;
  assign x__h218208 = lv_exp__h218052 - 12'd1023 ;
  assign x__h219007 =
	     final_result__h218063[0] |
	     IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4058[50] ;
  assign x__h219416 =
	     IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4058[51] |
	     IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4058[50] ;
  assign x__h221191 =
	     (setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
	      condFlags32_reswget_BITS_14_TO_10__q53[1]) ?
	       10'd1 :
	       ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
		 condFlags32_res_wget[14:10] == 5'd0) ?
		  10'd2 :
		  ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
		    condFlags32_reswget_BITS_14_TO_10__q53[4]) ?
		     10'd4 :
		     ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
		       condFlags32_reswget_BITS_14_TO_10__q53[3]) ?
			10'd8 :
			((!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
			  condFlags32_reswget_BITS_14_TO_10__q53[3]) ?
			   10'd16 :
			   ((!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
			     condFlags32_reswget_BITS_14_TO_10__q53[4]) ?
			      10'd32 :
			      ((!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
				condFlags32_res_wget[14:10] == 5'd0) ?
				 10'd64 :
				 ((!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
				   condFlags32_reswget_BITS_14_TO_10__q53[1]) ?
				    10'd128 :
				    (condFlags32_reswget_BITS_14_TO_10__q53[0] ?
				       10'd256 :
				       10'd512)))))))) ;
  assign x__h22135 = msb_zeros__h22069 - 6'd1 ;
  assign x__h22161 = { 4'd0, msb_zeros__h22069 } ;
  assign x__h222383 =
	     (ff_input_D_OUT[208] &&
	      condFlags64_reswget_BITS_14_TO_10__q33[1]) ?
	       10'd1 :
	       ((ff_input_D_OUT[208] && condFlags64_res_wget[14:10] == 5'd0) ?
		  10'd2 :
		  ((ff_input_D_OUT[208] &&
		    condFlags64_reswget_BITS_14_TO_10__q33[4]) ?
		     10'd4 :
		     ((ff_input_D_OUT[208] &&
		       condFlags64_reswget_BITS_14_TO_10__q33[3]) ?
			10'd8 :
			((!ff_input_D_OUT[208] &&
			  condFlags64_reswget_BITS_14_TO_10__q33[3]) ?
			   10'd16 :
			   ((!ff_input_D_OUT[208] &&
			     condFlags64_reswget_BITS_14_TO_10__q33[4]) ?
			      10'd32 :
			      ((!ff_input_D_OUT[208] &&
				condFlags64_res_wget[14:10] == 5'd0) ?
				 10'd64 :
				 ((!ff_input_D_OUT[208] &&
				   condFlags64_reswget_BITS_14_TO_10__q33[1]) ?
				    10'd128 :
				    (condFlags64_reswget_BITS_14_TO_10__q33[0] ?
				       10'd256 :
				       10'd512)))))))) ;
  assign x__h225379 =
	     getMant32_reswget_BITS_68_TO_46__q48[22] ?
	       5'd0 :
	       (getMant32_reswget_BITS_68_TO_46__q48[21] ?
		  5'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q48[20] ?
		     5'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q48[19] ?
			5'd3 :
			(getMant32_reswget_BITS_68_TO_46__q48[18] ?
			   5'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q48[17] ?
			      5'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q48[16] ?
				 5'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q48[15] ?
				    5'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q48[14] ?
				       5'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q48[13] ?
					  5'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q48[12] ?
					     5'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q48[11] ?
						5'd11 :
						(getMant32_reswget_BITS_68_TO_46__q48[10] ?
						   5'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q48[9] ?
						      5'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q48[8] ?
							 5'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q48[7] ?
							    5'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q48[6] ?
							       5'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q48[5] ?
								  5'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q48[4] ?
								     5'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q48[3] ?
									5'd19 :
									(getMant32_reswget_BITS_68_TO_46__q48[2] ?
									   5'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q48[1] ?
									      5'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q48[0] ?
										 5'd22 :
										 5'd23)))))))))))))))))))))) ;
  assign x__h230465 = getExp64_res_wget[32:22] - 11'd896 ;
  assign x__h230785 =
	     IF_IF_getExp64_res_whas__004_THEN_getExp64_res_ETC___d4328[24] |
	     lv_sticky__h230587 ;
  assign x__h230886 = x__h230888 | lv_sticky__h230587 ;
  assign x__h230888 =
	     IF_IF_getExp64_res_whas__004_THEN_getExp64_res_ETC___d4328[25] |
	     IF_IF_getExp64_res_whas__004_THEN_getExp64_res_ETC___d4328[24] ;
  assign x__h232905 =
	     { ~lv_op1_subnormal__h232846, getMant32_res_wget[68:46] } ;
  assign x__h232969 =
	     { ~lv_op2_subnormal__h232847, getMant32_res_wget[45:23] } ;
  assign x__h233042 = x__h233044 + y__h233045 ;
  assign x__h233044 = x__h233046 - 10'd127 ;
  assign x__h233046 = exp1_temp__h232855 + exp2_temp__h232856 ;
  assign x__h233097 =
	     lv_invalid__h215256 ||
	     IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d5335 ||
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[1]) &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ;
  assign x__h233360 =
	     !lv_invalid__h215256 &&
	     !IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d5335 &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[1]) &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	     !condFlags32_reswget_BITS_9_TO_5__q54[3] ;
  assign x__h233366 =
	     !lv_invalid__h215256 &&
	     !IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d5335 &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     !condFlags32_reswget_BITS_9_TO_5__q54[1] &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ;
  assign x__h233415 =
	     (lv_invalid__h215256 ||
	      IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d5335) ?
	       quiet_nan_two__h232851 :
	       _theResult___fst__h233283 ;
  assign x__h233428 = condFlags32_reswget_BITS_14_TO_10__q53[2] & y__h233431 ;
  assign x__h233518 = lv_op1_subnormal__h232846 | lv_op2_subnormal__h232847 ;
  assign x__h234622 =
	     { ~lv_op1_subnormal__h234563, getMant64_res_wget[155:104] } ;
  assign x__h234686 =
	     { ~lv_op2_subnormal__h234564, getMant64_res_wget[103:52] } ;
  assign x__h234759 = x__h234761 + y__h234762 ;
  assign x__h234761 = x__h234763 - 13'd1023 ;
  assign x__h234763 = exp1_temp__h234572 + exp2_temp__h234573 ;
  assign x__h234810 =
	     lv_invalid__h218042 ||
	     IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d5413 ||
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[1]) &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ;
  assign x__h235073 =
	     !lv_invalid__h218042 &&
	     !IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d5413 &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[1]) &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_9_TO_5__q34[3] ;
  assign x__h235079 =
	     !lv_invalid__h218042 &&
	     !IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d5413 &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     !condFlags64_reswget_BITS_9_TO_5__q34[1] &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ;
  assign x__h235127 =
	     (lv_invalid__h218042 ||
	      IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d5413) ?
	       quiet_nan_two__h234568 :
	       _theResult___fst__h234996 ;
  assign x__h235140 = condFlags64_reswget_BITS_14_TO_10__q33[2] & y__h235143 ;
  assign x__h235230 = lv_op1_subnormal__h234563 | lv_op2_subnormal__h234564 ;
  assign x__h237450 = exp1__h237389 + y__h237452 ;
  assign x__h237457 =
	     (~condFlags32_reswget_BITS_14_TO_10__q53[4]) ?
	       5'd0 :
	       (getMant32_reswget_BITS_68_TO_46__q48[22] ?
		  5'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q48[21] ?
		     5'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q48[20] ?
			5'd3 :
			(getMant32_reswget_BITS_68_TO_46__q48[19] ?
			   5'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q48[18] ?
			      5'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q48[17] ?
				 5'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q48[16] ?
				    5'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q48[15] ?
				       5'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q48[14] ?
					  5'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q48[13] ?
					     5'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q48[12] ?
						5'd11 :
						(getMant32_reswget_BITS_68_TO_46__q48[11] ?
						   5'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q48[10] ?
						      5'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q48[9] ?
							 5'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q48[8] ?
							    5'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q48[7] ?
							       5'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q48[6] ?
								  5'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q48[5] ?
								     5'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q48[4] ?
									5'd19 :
									(getMant32_reswget_BITS_68_TO_46__q48[3] ?
									   5'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q48[2] ?
									      5'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q48[1] ?
										 5'd22 :
										 (getMant32_reswget_BITS_68_TO_46__q48[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h240847 =
	     (~condFlags32_reswget_BITS_9_TO_5__q54[4]) ?
	       5'd0 :
	       (getMant32_reswget_BITS_45_TO_23__q55[22] ?
		  5'd1 :
		  (getMant32_reswget_BITS_45_TO_23__q55[21] ?
		     5'd2 :
		     (getMant32_reswget_BITS_45_TO_23__q55[20] ?
			5'd3 :
			(getMant32_reswget_BITS_45_TO_23__q55[19] ?
			   5'd4 :
			   (getMant32_reswget_BITS_45_TO_23__q55[18] ?
			      5'd5 :
			      (getMant32_reswget_BITS_45_TO_23__q55[17] ?
				 5'd6 :
				 (getMant32_reswget_BITS_45_TO_23__q55[16] ?
				    5'd7 :
				    (getMant32_reswget_BITS_45_TO_23__q55[15] ?
				       5'd8 :
				       (getMant32_reswget_BITS_45_TO_23__q55[14] ?
					  5'd9 :
					  (getMant32_reswget_BITS_45_TO_23__q55[13] ?
					     5'd10 :
					     (getMant32_reswget_BITS_45_TO_23__q55[12] ?
						5'd11 :
						(getMant32_reswget_BITS_45_TO_23__q55[11] ?
						   5'd12 :
						   (getMant32_reswget_BITS_45_TO_23__q55[10] ?
						      5'd13 :
						      (getMant32_reswget_BITS_45_TO_23__q55[9] ?
							 5'd14 :
							 (getMant32_reswget_BITS_45_TO_23__q55[8] ?
							    5'd15 :
							    (getMant32_reswget_BITS_45_TO_23__q55[7] ?
							       5'd16 :
							       (getMant32_reswget_BITS_45_TO_23__q55[6] ?
								  5'd17 :
								  (getMant32_reswget_BITS_45_TO_23__q55[5] ?
								     5'd18 :
								     (getMant32_reswget_BITS_45_TO_23__q55[4] ?
									5'd19 :
									(getMant32_reswget_BITS_45_TO_23__q55[3] ?
									   5'd20 :
									   (getMant32_reswget_BITS_45_TO_23__q55[2] ?
									      5'd21 :
									      (getMant32_reswget_BITS_45_TO_23__q55[1] ?
										 5'd22 :
										 (getMant32_reswget_BITS_45_TO_23__q55[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h244234 = man1__h237381 << x__h237457 ;
  assign x__h244262 = man2__h237382 << x__h240847 ;
  assign x__h244292 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ^
	     setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ;
  assign x__h244356 =
	     !IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3367 &&
	     !lv_op2_Nan__h175599 &&
	     (!condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      !condFlags32_reswget_BITS_9_TO_5__q54[1]) &&
	     (!condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      !condFlags32_reswget_BITS_9_TO_5__q54[3]) &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ;
  assign x__h244370 =
	     !IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3367 &&
	     !lv_op2_Nan__h175599 &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     condFlags32_reswget_BITS_9_TO_5__q54[3] ;
  assign x__h244375 =
	     !IF_condFlags32_res_whas__361_THEN_condFlags32__ETC___d3367 &&
	     !lv_op2_Nan__h175599 &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     !condFlags32_reswget_BITS_9_TO_5__q54[3] &&
	     (condFlags32_reswget_BITS_9_TO_5__q54[1] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[3]) ;
  assign x__h245786 = exp1__h245725 + y__h245788 ;
  assign x__h245793 =
	     (~condFlags64_reswget_BITS_14_TO_10__q33[4]) ?
	       6'd0 :
	       (getMant64_reswget_BITS_155_TO_104__q28[51] ?
		  6'd1 :
		  (getMant64_reswget_BITS_155_TO_104__q28[50] ?
		     6'd2 :
		     (getMant64_reswget_BITS_155_TO_104__q28[49] ?
			6'd3 :
			(getMant64_reswget_BITS_155_TO_104__q28[48] ?
			   6'd4 :
			   (getMant64_reswget_BITS_155_TO_104__q28[47] ?
			      6'd5 :
			      (getMant64_reswget_BITS_155_TO_104__q28[46] ?
				 6'd6 :
				 (getMant64_reswget_BITS_155_TO_104__q28[45] ?
				    6'd7 :
				    (getMant64_reswget_BITS_155_TO_104__q28[44] ?
				       6'd8 :
				       (getMant64_reswget_BITS_155_TO_104__q28[43] ?
					  6'd9 :
					  (getMant64_reswget_BITS_155_TO_104__q28[42] ?
					     6'd10 :
					     (getMant64_reswget_BITS_155_TO_104__q28[41] ?
						6'd11 :
						(getMant64_reswget_BITS_155_TO_104__q28[40] ?
						   6'd12 :
						   (getMant64_reswget_BITS_155_TO_104__q28[39] ?
						      6'd13 :
						      (getMant64_reswget_BITS_155_TO_104__q28[38] ?
							 6'd14 :
							 (getMant64_reswget_BITS_155_TO_104__q28[37] ?
							    6'd15 :
							    (getMant64_reswget_BITS_155_TO_104__q28[36] ?
							       6'd16 :
							       (getMant64_reswget_BITS_155_TO_104__q28[35] ?
								  6'd17 :
								  (getMant64_reswget_BITS_155_TO_104__q28[34] ?
								     6'd18 :
								     (getMant64_reswget_BITS_155_TO_104__q28[33] ?
									6'd19 :
									(getMant64_reswget_BITS_155_TO_104__q28[32] ?
									   6'd20 :
									   (getMant64_reswget_BITS_155_TO_104__q28[31] ?
									      6'd21 :
									      (getMant64_reswget_BITS_155_TO_104__q28[30] ?
										 6'd22 :
										 (getMant64_reswget_BITS_155_TO_104__q28[29] ?
										    6'd23 :
										    (getMant64_reswget_BITS_155_TO_104__q28[28] ?
										       6'd24 :
										       (getMant64_reswget_BITS_155_TO_104__q28[27] ?
											  6'd25 :
											  (getMant64_reswget_BITS_155_TO_104__q28[26] ?
											     6'd26 :
											     (getMant64_reswget_BITS_155_TO_104__q28[25] ?
												6'd27 :
												(getMant64_reswget_BITS_155_TO_104__q28[24] ?
												   6'd28 :
												   (getMant64_reswget_BITS_155_TO_104__q28[23] ?
												      6'd29 :
												      (getMant64_reswget_BITS_155_TO_104__q28[22] ?
													 6'd30 :
													 (getMant64_reswget_BITS_155_TO_104__q28[21] ?
													    6'd31 :
													    (getMant64_reswget_BITS_155_TO_104__q28[20] ?
													       6'd32 :
													       (getMant64_reswget_BITS_155_TO_104__q28[19] ?
														  6'd33 :
														  (getMant64_reswget_BITS_155_TO_104__q28[18] ?
														     6'd34 :
														     (getMant64_reswget_BITS_155_TO_104__q28[17] ?
															6'd35 :
															(getMant64_reswget_BITS_155_TO_104__q28[16] ?
															   6'd36 :
															   (getMant64_reswget_BITS_155_TO_104__q28[15] ?
															      6'd37 :
															      (getMant64_reswget_BITS_155_TO_104__q28[14] ?
																 6'd38 :
																 (getMant64_reswget_BITS_155_TO_104__q28[13] ?
																    6'd39 :
																    (getMant64_reswget_BITS_155_TO_104__q28[12] ?
																       6'd40 :
																       (getMant64_reswget_BITS_155_TO_104__q28[11] ?
																	  6'd41 :
																	  (getMant64_reswget_BITS_155_TO_104__q28[10] ?
																	     6'd42 :
																	     (getMant64_reswget_BITS_155_TO_104__q28[9] ?
																		6'd43 :
																		(getMant64_reswget_BITS_155_TO_104__q28[8] ?
																		   6'd44 :
																		   (getMant64_reswget_BITS_155_TO_104__q28[7] ?
																		      6'd45 :
																		      (getMant64_reswget_BITS_155_TO_104__q28[6] ?
																			 6'd46 :
																			 (getMant64_reswget_BITS_155_TO_104__q28[5] ?
																			    6'd47 :
																			    (getMant64_reswget_BITS_155_TO_104__q28[4] ?
																			       6'd48 :
																			       (getMant64_reswget_BITS_155_TO_104__q28[3] ?
																				  6'd49 :
																				  (getMant64_reswget_BITS_155_TO_104__q28[2] ?
																				     6'd50 :
																				     (getMant64_reswget_BITS_155_TO_104__q28[1] ?
																					6'd51 :
																					(getMant64_reswget_BITS_155_TO_104__q28[0] ?
																					   6'd52 :
																					   6'd53)))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h253214 =
	     (~condFlags64_reswget_BITS_9_TO_5__q34[4]) ?
	       6'd0 :
	       (getMant64_reswget_BITS_103_TO_52__q35[51] ?
		  6'd1 :
		  (getMant64_reswget_BITS_103_TO_52__q35[50] ?
		     6'd2 :
		     (getMant64_reswget_BITS_103_TO_52__q35[49] ?
			6'd3 :
			(getMant64_reswget_BITS_103_TO_52__q35[48] ?
			   6'd4 :
			   (getMant64_reswget_BITS_103_TO_52__q35[47] ?
			      6'd5 :
			      (getMant64_reswget_BITS_103_TO_52__q35[46] ?
				 6'd6 :
				 (getMant64_reswget_BITS_103_TO_52__q35[45] ?
				    6'd7 :
				    (getMant64_reswget_BITS_103_TO_52__q35[44] ?
				       6'd8 :
				       (getMant64_reswget_BITS_103_TO_52__q35[43] ?
					  6'd9 :
					  (getMant64_reswget_BITS_103_TO_52__q35[42] ?
					     6'd10 :
					     (getMant64_reswget_BITS_103_TO_52__q35[41] ?
						6'd11 :
						(getMant64_reswget_BITS_103_TO_52__q35[40] ?
						   6'd12 :
						   (getMant64_reswget_BITS_103_TO_52__q35[39] ?
						      6'd13 :
						      (getMant64_reswget_BITS_103_TO_52__q35[38] ?
							 6'd14 :
							 (getMant64_reswget_BITS_103_TO_52__q35[37] ?
							    6'd15 :
							    (getMant64_reswget_BITS_103_TO_52__q35[36] ?
							       6'd16 :
							       (getMant64_reswget_BITS_103_TO_52__q35[35] ?
								  6'd17 :
								  (getMant64_reswget_BITS_103_TO_52__q35[34] ?
								     6'd18 :
								     (getMant64_reswget_BITS_103_TO_52__q35[33] ?
									6'd19 :
									(getMant64_reswget_BITS_103_TO_52__q35[32] ?
									   6'd20 :
									   (getMant64_reswget_BITS_103_TO_52__q35[31] ?
									      6'd21 :
									      (getMant64_reswget_BITS_103_TO_52__q35[30] ?
										 6'd22 :
										 (getMant64_reswget_BITS_103_TO_52__q35[29] ?
										    6'd23 :
										    (getMant64_reswget_BITS_103_TO_52__q35[28] ?
										       6'd24 :
										       (getMant64_reswget_BITS_103_TO_52__q35[27] ?
											  6'd25 :
											  (getMant64_reswget_BITS_103_TO_52__q35[26] ?
											     6'd26 :
											     (getMant64_reswget_BITS_103_TO_52__q35[25] ?
												6'd27 :
												(getMant64_reswget_BITS_103_TO_52__q35[24] ?
												   6'd28 :
												   (getMant64_reswget_BITS_103_TO_52__q35[23] ?
												      6'd29 :
												      (getMant64_reswget_BITS_103_TO_52__q35[22] ?
													 6'd30 :
													 (getMant64_reswget_BITS_103_TO_52__q35[21] ?
													    6'd31 :
													    (getMant64_reswget_BITS_103_TO_52__q35[20] ?
													       6'd32 :
													       (getMant64_reswget_BITS_103_TO_52__q35[19] ?
														  6'd33 :
														  (getMant64_reswget_BITS_103_TO_52__q35[18] ?
														     6'd34 :
														     (getMant64_reswget_BITS_103_TO_52__q35[17] ?
															6'd35 :
															(getMant64_reswget_BITS_103_TO_52__q35[16] ?
															   6'd36 :
															   (getMant64_reswget_BITS_103_TO_52__q35[15] ?
															      6'd37 :
															      (getMant64_reswget_BITS_103_TO_52__q35[14] ?
																 6'd38 :
																 (getMant64_reswget_BITS_103_TO_52__q35[13] ?
																    6'd39 :
																    (getMant64_reswget_BITS_103_TO_52__q35[12] ?
																       6'd40 :
																       (getMant64_reswget_BITS_103_TO_52__q35[11] ?
																	  6'd41 :
																	  (getMant64_reswget_BITS_103_TO_52__q35[10] ?
																	     6'd42 :
																	     (getMant64_reswget_BITS_103_TO_52__q35[9] ?
																		6'd43 :
																		(getMant64_reswget_BITS_103_TO_52__q35[8] ?
																		   6'd44 :
																		   (getMant64_reswget_BITS_103_TO_52__q35[7] ?
																		      6'd45 :
																		      (getMant64_reswget_BITS_103_TO_52__q35[6] ?
																			 6'd46 :
																			 (getMant64_reswget_BITS_103_TO_52__q35[5] ?
																			    6'd47 :
																			    (getMant64_reswget_BITS_103_TO_52__q35[4] ?
																			       6'd48 :
																			       (getMant64_reswget_BITS_103_TO_52__q35[3] ?
																				  6'd49 :
																				  (getMant64_reswget_BITS_103_TO_52__q35[2] ?
																				     6'd50 :
																				     (getMant64_reswget_BITS_103_TO_52__q35[1] ?
																					6'd51 :
																					(getMant64_reswget_BITS_103_TO_52__q35[0] ?
																					   6'd52 :
																					   6'd53)))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h25638 =
	     (!inst_spfm_add_sub_ff_input_register_read__60_B_ETC___d465 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) &&
	     (!inst_spfm_add_sub_ff_input_register[2] ||
	      !(x__h25669 ^ inst_spfm_add_sub_ff_input_register[5])) ;
  assign x__h25669 =
	     inst_spfm_add_sub_ff_input_register[49] ^
	     inst_spfm_add_sub_ff_input_register[48] ;
  assign x__h25699 =
	     inst_spfm_add_sub_ff_input_register_read__60_B_ETC___d465 &&
	     (!inst_spfm_add_sub_ff_input_register[107] ||
	      inst_spfm_add_sub_ff_input_register[59:50] != 10'd254) &&
	     (inst_spfm_add_sub_ff_input_register_read__60_B_ETC___d464 ^
	      10'h200) <
	     10'd361 &&
	     (!inst_spfm_add_sub_ff_input_register[2] ||
	      inst_spfm_add_sub_ff_input_register[12] ||
	      inst_spfm_add_sub_ff_input_register[13]) &&
	     !inst_spfm_add_sub_ff_input_register[14] ;
  assign x__h26038 = x__h26050 | y__h26051 ;
  assign x__h26050 = _theResult_____1__h25932 & sign2__h25884 ;
  assign x__h260632 = man1__h245717 << x__h245793 ;
  assign x__h260660 = man2__h245718 << x__h253214 ;
  assign x__h260742 =
	     !IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d3452 &&
	     !lv_op2_Nan__h177823 &&
	     (!condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      !condFlags64_reswget_BITS_9_TO_5__q34[1]) &&
	     (!condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      !condFlags64_reswget_BITS_9_TO_5__q34[3]) &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ;
  assign x__h260756 =
	     !IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d3452 &&
	     !lv_op2_Nan__h177823 &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     condFlags64_reswget_BITS_9_TO_5__q34[3] ;
  assign x__h260761 =
	     !IF_condFlags64_res_whas__446_THEN_condFlags64__ETC___d3452 &&
	     !lv_op2_Nan__h177823 &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     !condFlags64_reswget_BITS_9_TO_5__q34[3] &&
	     (condFlags64_reswget_BITS_9_TO_5__q34[1] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[3]) ;
  assign x__h263052 =
	     condFlags32_reswget_BITS_14_TO_10__q53[4] ?
	       exponent___1__h263081 :
	       exponent__h262438 ;
  assign x__h263083 = { 3'd0, lv_leading_zeros__h262443 } ;
  assign x__h270404 = lv_leading_zeros__h262443 - 6'd1 ;
  assign x__h270430 =
	     { IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58[24:0],
	       1'd0 } ;
  assign x__h270674 = x__h270676 + 9'd63 ;
  assign x__h270676 =
	     { 1'd0,
	       IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d5956[8:1] } ;
  assign x__h272069 =
	     condFlags64_reswget_BITS_14_TO_10__q33[4] ?
	       exponent___1__h272098 :
	       lv_exp__h218052 ;
  assign x__h272100 = { 5'd0, lv_leading_zeros__h271455 } ;
  assign x__h287541 = lv_leading_zeros__h271455 - 7'd1 ;
  assign x__h287567 =
	     { IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q38[53:0],
	       1'd0 } ;
  assign x__h287811 = x__h287813 + 12'd511 ;
  assign x__h287813 =
	     { 1'd0,
	       IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d6080[11:1] } ;
  assign x__h293893 = ff_input_D_OUT[13] ^ ff_input_D_OUT[14] ;
  assign x__h42202 =
	     mantissa_to_shift__h25921[0] ?
	       7'd0 :
	       (mantissa_to_shift__h25921[1] ?
		  7'd1 :
		  (mantissa_to_shift__h25921[2] ?
		     7'd2 :
		     (mantissa_to_shift__h25921[3] ?
			7'd3 :
			(mantissa_to_shift__h25921[4] ?
			   7'd4 :
			   (mantissa_to_shift__h25921[5] ?
			      7'd5 :
			      (mantissa_to_shift__h25921[6] ?
				 7'd6 :
				 (mantissa_to_shift__h25921[7] ?
				    7'd7 :
				    (mantissa_to_shift__h25921[8] ?
				       7'd8 :
				       (mantissa_to_shift__h25921[9] ?
					  7'd9 :
					  (mantissa_to_shift__h25921[10] ?
					     7'd10 :
					     (mantissa_to_shift__h25921[11] ?
						7'd11 :
						(mantissa_to_shift__h25921[12] ?
						   7'd12 :
						   (mantissa_to_shift__h25921[13] ?
						      7'd13 :
						      (mantissa_to_shift__h25921[14] ?
							 7'd14 :
							 (mantissa_to_shift__h25921[15] ?
							    7'd15 :
							    (mantissa_to_shift__h25921[16] ?
							       7'd16 :
							       (mantissa_to_shift__h25921[17] ?
								  7'd17 :
								  (mantissa_to_shift__h25921[18] ?
								     7'd18 :
								     (mantissa_to_shift__h25921[19] ?
									7'd19 :
									(mantissa_to_shift__h25921[20] ?
									   7'd20 :
									   (mantissa_to_shift__h25921[21] ?
									      7'd21 :
									      (mantissa_to_shift__h25921[22] ?
										 7'd22 :
										 (mantissa_to_shift__h25921[23] ?
										    7'd23 :
										    (mantissa_to_shift__h25921[24] ?
										       7'd24 :
										       (mantissa_to_shift__h25921[25] ?
											  7'd25 :
											  (mantissa_to_shift__h25921[26] ?
											     7'd26 :
											     (mantissa_to_shift__h25921[27] ?
												7'd27 :
												(mantissa_to_shift__h25921[28] ?
												   7'd28 :
												   (mantissa_to_shift__h25921[29] ?
												      7'd29 :
												      (mantissa_to_shift__h25921[30] ?
													 7'd30 :
													 (mantissa_to_shift__h25921[31] ?
													    7'd31 :
													    (mantissa_to_shift__h25921[32] ?
													       7'd32 :
													       (mantissa_to_shift__h25921[33] ?
														  7'd33 :
														  (mantissa_to_shift__h25921[34] ?
														     7'd34 :
														     (mantissa_to_shift__h25921[35] ?
															7'd35 :
															(mantissa_to_shift__h25921[36] ?
															   7'd36 :
															   (mantissa_to_shift__h25921[37] ?
															      7'd37 :
															      (mantissa_to_shift__h25921[38] ?
																 7'd38 :
																 (mantissa_to_shift__h25921[39] ?
																    7'd39 :
																    (mantissa_to_shift__h25921[40] ?
																       7'd40 :
																       (mantissa_to_shift__h25921[41] ?
																	  7'd41 :
																	  (mantissa_to_shift__h25921[42] ?
																	     7'd42 :
																	     (mantissa_to_shift__h25921[43] ?
																		7'd43 :
																		(mantissa_to_shift__h25921[44] ?
																		   7'd44 :
																		   (mantissa_to_shift__h25921[45] ?
																		      7'd45 :
																		      (mantissa_to_shift__h25921[46] ?
																			 7'd46 :
																			 (mantissa_to_shift__h25921[47] ?
																			    7'd47 :
																			    (mantissa_to_shift__h25921[48] ?
																			       7'd48 :
																			       (mantissa_to_shift__h25921[49] ?
																				  7'd49 :
																				  (mantissa_to_shift__h25921[50] ?
																				     7'd50 :
																				     (mantissa_to_shift__h25921[51] ?
																					7'd51 :
																					(mantissa_to_shift__h25921[52] ?
																					   7'd52 :
																					   (mantissa_to_shift__h25921[53] ?
																					      7'd53 :
																					      (mantissa_to_shift__h25921[54] ?
																						 7'd54 :
																						 (mantissa_to_shift__h25921[55] ?
																						    7'd55 :
																						    (mantissa_to_shift__h25921[56] ?
																						       7'd56 :
																						       (mantissa_to_shift__h25921[57] ?
																							  7'd57 :
																							  (mantissa_to_shift__h25921[58] ?
																							     7'd58 :
																							     (mantissa_to_shift__h25921[59] ?
																								7'd59 :
																								(mantissa_to_shift__h25921[60] ?
																								   7'd60 :
																								   (mantissa_to_shift__h25921[61] ?
																								      7'd61 :
																								      (mantissa_to_shift__h25921[62] ?
																									 7'd62 :
																									 (mantissa_to_shift__h25921[63] ?
																									    7'd63 :
																									    (mantissa_to_shift__h25921[64] ?
																									       7'd64 :
																									       (mantissa_to_shift__h25921[65] ?
																										  7'd65 :
																										  (mantissa_to_shift__h25921[66] ?
																										     7'd66 :
																										     (mantissa_to_shift__h25921[67] ?
																											7'd67 :
																											(mantissa_to_shift__h25921[68] ?
																											   7'd68 :
																											   (mantissa_to_shift__h25921[69] ?
																											      7'd69 :
																											      (mantissa_to_shift__h25921[70] ?
																												 7'd70 :
																												 (mantissa_to_shift__h25921[71] ?
																												    7'd71 :
																												    (mantissa_to_shift__h25921[72] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h47161 = ~_theResult_____1__h25932 ;
  assign x__h47168 =
	     inst_spfm_add_sub_ff_stage2_read__43_BIT_15_66_ETC___d768 ||
	     inst_spfm_add_sub_ff_stage2[6] ||
	     (!inst_spfm_add_sub_ff_stage2[16] ||
	      !inst_spfm_add_sub_ff_stage2[5]) &&
	     inst_spfm_add_sub_ff_stage2[4] &&
	     inst_spfm_add_sub_ff_stage2[14] &&
	     x__h47276 ;
  assign x__h47276 = sign2__h25884 ^ op_xor_sign3__h25897 ;
  assign x__h47284 =
	     (inst_spfm_add_sub_ff_stage2_read__43_BIT_15_66_ETC___d768 ||
	      inst_spfm_add_sub_ff_stage2[6] ||
	      inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       2'd0 :
	       _theResult_____6_snd_snd__h47241 ;
  assign x__h47316 = x__h47318 & sign2__h25884 ;
  assign x__h47318 = inst_spfm_add_sub_ff_stage2[4] & y__h47319 ;
  assign x__h47320 = x__h47321 & inst_spfm_add_sub_ff_stage2[14] ;
  assign x__h47321 = ~inst_spfm_add_sub_ff_stage2[4] ;
  assign x__h47325 =
	     (inst_spfm_add_sub_ff_stage2_read__43_BIT_15_66_ETC___d768 ||
	      inst_spfm_add_sub_ff_stage2[6]) ?
	       2'd0 :
	       _theResult_____6_snd_snd_snd__h47288 ;
  assign x__h47349 = x__h47361 & y__h47362 ;
  assign x__h47361 =
	     (inst_spfm_add_sub_ff_stage2_read__43_BIT_15_66_ETC___d768 ||
	      inst_spfm_add_sub_ff_stage2[6] ||
	      inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       inst_spfm_add_sub_ff_stage2[1] :
	       _theResult_____6_fst__h47238 ;
  assign x__h47391 =
	     (inst_spfm_add_sub_ff_stage2[1] ||
	      !inst_spfm_add_sub_ff_stage2[6]) &&
	     inst_spfm_add_sub_ff_stage2[15] ;
  assign x__h47575 =
	     (_theResult____h47498 == 73'd0) ?
	       ((inst_spfm_add_sub_ff_stage4[12:10] == 3'b010) ?
		  2'b11 :
		  2'b01) :
	       2'd0 ;
  assign x__h4812 = { _denominator__h4750, 2'b0, _numerator__h4751, 27'd0 } ;
  assign x__h58493 = inst_spfm_add_sub_ff_stage5[6:0] - 7'd1 ;
  assign x__h58514 =
	     IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1221[48] |
	     IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1221[46] ;
  assign x__h58596 =
	     IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1221[47] |
	     IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1221[46] ;
  assign x__h63265 =
	     { _denominator__h63203, 2'b0, _numerator__h63204, 56'd0 } ;
  assign x__h76419 =
	     inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1453 &&
	     inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1454 ;
  assign x__h76424 =
	     (!inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1453 ||
	      inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1454 ||
	      _1_MINUS_inst_dpfpu_divider_rg_stage2_450_BITS__ETC___d1456) ?
	       inst_dpfpu_divider_int_div_wr_final_out_wget[0] :
	       lv_sticky___1__h64628 ;
  assign x__h76646 = _theResult____h76491 | inst_dpfpu_divider_rg_stage3[85] ;
  assign x__h76814 = inst_dpfpu_divider_rg_stage3[84] | _theResult____h76491 ;
  assign x__h76849 = x__h76851 | _theResult____h76491 ;
  assign x__h76851 =
	     inst_dpfpu_divider_rg_stage3[85] |
	     inst_dpfpu_divider_rg_stage3[84] ;
  assign x__h78249 =
	     { inst_dpfpu_sqrt_rg_inter_stage[182:130],
	       !_theResult____h78212[57],
	       1'd0 } ;
  assign x__h78512 =
	     { inst_dpfpu_sqrt_rg_inter_stage[56:3],
	       !_theResult____h78212[57] } ;
  assign x__h78901 =
	     inst_dpfpu_sqrt_rg_inter_stage[131] | !_theResult____h78212[57] ;
  assign x__h78942 =
	     _theResult____h78212[57] ?
	       lv_remainder__h78964 :
	       _theResult____h78212 ;
  assign x__h79016 =
	     inst_dpfpu_sqrt_rg_inter_stage[130] | !_theResult____h78212[57] ;
  assign x__h94590 = msb_zeros__h94524 - 7'd1 ;
  assign x__h94616 = { 6'd0, msb_zeros__h94524 } ;
  assign x_data__h175667 =
	     ff_input_D_OUT[8] ?
	       { 32'hFFFFFFFF, _theResult_____3_snd__h176281 } :
	       { 32'd0, _theResult_____3_snd__h175723 } ;
  assign x_data__h177884 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_snd__h178467 :
	       _theResult_____3_snd__h177915 ;
  assign x_data__h198720 =
	     { 32'hFFFFFFFF, x1_avValue_final_result__h198661 } ;
  assign x_data__h199050 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       64'b0 :
	       _theResult___snd_final_result__h198995 ;
  assign x_data__h213455 =
	     { 32'hFFFFFFFF, x1_avValue_final_result__h213402 } ;
  assign x_data__h213765 =
	     { CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8,
	       ff_input_D_OUT[207:145] } ;
  assign x_data__h215341 =
	     (!condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      NOT_IF_condFlags32_res_whas__361_THEN_condFlag_ETC___d3862) ?
	       _theResult_____3_snd_snd_fst__h215882 :
	       final_result__h215276 ;
  assign x_data__h218128 =
	     (!condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      NOT_IF_condFlags64_res_whas__446_THEN_condFlag_ETC___d4032) ?
	       _theResult_____3_snd_snd_fst__h218672 :
	       final_result__h218063 ;
  assign x_data__h231339 =
	     { 32'hFFFFFFFF,
	       IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4396[31:0] } ;
  assign x_data__h231444 =
	     (ff_input_D_OUT[12:6] == 7'b1110000) ?
	       final_result__h231448 :
	       final_result__h231471 ;
  assign x_data__h296356 =
	     { 32'hFFFFFFFF, inst_spfpu_divider_wr_final_out_wget[36:5] } ;
  assign x_data__h296849 =
	     { 32'hFFFFFFFF, inst_spfpu_sqrt_ff_final_out[36:5] } ;
  assign x_fflags__h175669 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_fst__h176280 :
	       _theResult_____3_fst__h175722 ;
  assign x_fflags__h177886 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_fst__h178466 :
	       _theResult_____3_fst__h177914 ;
  assign x_fflags__h198722 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       5'b0 :
	       x1_avValue_fflags__h198654 ;
  assign x_fflags__h199052 =
	     (ff_input_D_OUT[208:145] == 64'd0 || !ff_input_D_OUT[2]) ?
	       5'b0 :
	       wr_final_out_fflags__h198994 ;
  assign x_lv_exponent__h6041 =
	     (inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127 &&
	      NOT_inst_spfpu_divider_rg_stage2_24_BITS_18_TO_ETC___d241) ?
	       10'd0 :
	       _theResult___snd_fst__h11963 ;
  assign x_lv_exponent__h64494 =
	     (inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1453 &&
	      NOT_inst_dpfpu_divider_rg_stage2_450_BITS_21_T_ETC___d1654) ?
	       13'd0 :
	       _theResult___snd_fst__h76361 ;
  assign x_lv_product_exponent__h15110 =
	     (!inst_spfm_add_sub_ff_input_register_read__60_B_ETC___d465 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) ?
	       inst_spfm_add_sub_ff_input_register[59:50] :
	       _theResult___fst__h22081 ;
  assign x_lv_product_exponent__h79503 =
	     (!inst_dpfm_add_sub_ff_input_register_read__873__ETC___d1878 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) ?
	       inst_dpfm_add_sub_ff_input_register[94:82] :
	       _theResult___fst__h94536 ;
  assign x_lv_product_mantissa__h15111 =
	     (!inst_spfm_add_sub_ff_input_register_read__60_B_ETC___d465 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) ?
	       lv_product_mantissa__h15043 :
	       _theResult___snd_fst__h22166 ;
  assign x_lv_product_mantissa__h79504 =
	     (!inst_dpfm_add_sub_ff_input_register_read__873__ETC___d1878 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) ?
	       lv_product_mantissa__h79436 :
	       _theResult___snd_fst__h94621 ;
  assign x_lv_quotient__h6040 =
	     inst_spfpu_divider_rg_stage2_24_BITS_18_TO_9_2_ETC___d127 ?
	       _theResult___fst__h6138 :
	       inst_spfpu_divider_int_div_wr_final_out_wget[26:0] ;
  assign x_lv_quotient__h64493 =
	     inst_dpfpu_divider_rg_stage2_450_BITS_21_TO_9__ETC___d1453 ?
	       _theResult___fst__h64591 :
	       inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] ;
  assign y__h102392 = x__h148123 & op_xor_sign3__h102238 ;
  assign y__h12415 = x__h12416 | inst_spfpu_divider_rg_stage3[54] ;
  assign y__h12452 = ~inst_spfpu_divider_rg_stage3[12] ;
  assign y__h14225 = x__h14504 | lv_sticky__h14148 ;
  assign y__h14607 = ~inst_spfpu_sqrt_rg_inter_stage[58] ;
  assign y__h148279 = x__h148282 & op_xor_sign3__h102238 ;
  assign y__h148281 = ~inst_dpfm_add_sub_ff_stage2[14] ;
  assign y__h148324 = ~inst_dpfm_add_sub_ff_stage2[13] ;
  assign y__h171516 = x__h171656 | lv_sticky__h171070 ;
  assign y__h171752 = ~inst_dpfm_add_sub_ff_stage5[23] ;
  assign y__h188955 = x__h188956 | _theResult____h184184 ;
  assign y__h188993 =
	     ~(!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23[31]) ;
  assign y__h198494 = x__h198495 | _theResult____h189224 ;
  assign y__h198532 =
	     ~(!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24[63]) ;
  assign y__h212947 = x__h212948 | _theResult____h203753 ;
  assign y__h212984 = ~sign__h203751 ;
  assign y__h215971 = x__h216217 | lv_sticky__h215279 ;
  assign y__h216641 = ~setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign y__h218761 = x__h219007 | lv_sticky__h218066 ;
  assign y__h219429 = ~ff_input_D_OUT[208] ;
  assign y__h22160 = x__h22161 - 10'd1 ;
  assign y__h230747 =
	     x__h230785 |
	     IF_IF_getExp64_res_whas__004_THEN_getExp64_res_ETC___d4328[26] ;
  assign y__h233043 = { 9'd0, lv_op2_subnormal__h232847 } ;
  assign y__h233045 = { 9'd0, lv_op1_subnormal__h232846 } ;
  assign y__h233429 = condFlags32_reswget_BITS_9_TO_5__q54[2] & y__h233475 ;
  assign y__h233431 = ~condFlags32_reswget_BITS_9_TO_5__q54[0] ;
  assign y__h233475 = ~condFlags32_reswget_BITS_14_TO_10__q53[0] ;
  assign y__h234760 = { 12'd0, lv_op2_subnormal__h234564 } ;
  assign y__h234762 = { 12'd0, lv_op1_subnormal__h234563 } ;
  assign y__h235141 = condFlags64_reswget_BITS_9_TO_5__q34[2] & y__h235187 ;
  assign y__h235143 = ~condFlags64_reswget_BITS_9_TO_5__q34[0] ;
  assign y__h235187 = ~condFlags64_reswget_BITS_14_TO_10__q33[0] ;
  assign y__h237449 = x__h237450 - y__h237451 ;
  assign y__h237451 = exp2__h237390 + y__h240846 ;
  assign y__h237452 = { 9'd0, condFlags32_reswget_BITS_14_TO_10__q53[4] } ;
  assign y__h240846 = { 9'd0, condFlags32_reswget_BITS_9_TO_5__q54[4] } ;
  assign y__h245785 = x__h245786 - y__h245787 ;
  assign y__h245787 = exp2__h245726 + y__h253213 ;
  assign y__h245788 = { 12'd0, condFlags64_reswget_BITS_14_TO_10__q33[4] } ;
  assign y__h253213 = { 12'd0, condFlags64_reswget_BITS_9_TO_5__q34[4] } ;
  assign y__h26051 = x__h47161 & op_xor_sign3__h25897 ;
  assign y__h262701 = ff_input_D_OUT[176] & y__h262722 ;
  assign y__h262722 = ~condFlags32_reswget_BITS_14_TO_10__q53[2] ;
  assign y__h263053 = x__h263083 - 9'd1 ;
  assign y__h270675 =
	     { 8'd0,
	       IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d5956[0] } ;
  assign y__h271712 = ff_input_D_OUT[208] & y__h271733 ;
  assign y__h271733 = ~condFlags64_reswget_BITS_14_TO_10__q33[2] ;
  assign y__h272070 = x__h272100 - 12'd1 ;
  assign y__h287812 =
	     { 11'd0,
	       IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d6080[0] } ;
  assign y__h47317 = x__h47320 & op_xor_sign3__h25897 ;
  assign y__h47319 = ~inst_spfm_add_sub_ff_stage2[14] ;
  assign y__h47362 = ~inst_spfm_add_sub_ff_stage2[13] ;
  assign y__h58374 = x__h58514 | lv_sticky__h57928 ;
  assign y__h58610 = ~inst_spfm_add_sub_ff_stage5[22] ;
  assign y__h76813 = x__h76814 | inst_dpfpu_divider_rg_stage3[86] ;
  assign y__h76850 = ~inst_dpfpu_divider_rg_stage3[12] ;
  assign y__h78622 = x__h78901 | lv_sticky__h78545 ;
  assign y__h79004 = ~inst_dpfpu_sqrt_rg_inter_stage[116] ;
  assign y__h94615 = x__h94616 - 13'd1 ;
  assign y_avValue__h230111 =
	     { 5'd5, CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2 } ;
  assign y_avValue__h230260 =
	     { result__h230988, x1_avValue_snd_fst__h231221 } ;
  assign y_avValue_snd_fst__h231218 =
	     IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4318 ?
	       res__h230585 :
	       res___1__h231226 ;
  assign y_avValue_snd_snd_fst__h230773 =
	     IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4320 ?
	       man__h230345 :
	       man__h230444 ;
  assign y_avValue_snd_snd_snd__h230821 =
	     man__h230345[23:0] != 24'd0 || lv_sticky__h230241 ;
  assign y_avValue_snd_snd_snd_snd_snd_snd__h230817 =
	     IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4320 ?
	       y_avValue_snd_snd_snd__h230821 :
	       lv_sticky__h230241 ;
  assign y_data__h297333 =
	     { 32'hFFFFFFFF, inst_spfm_add_sub_ff_final_out_wget[36:5] } ;
  always@(ff_input_D_OUT)
  begin
    case (ff_input_D_OUT[5:3])
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2 =
	      { ff_input_D_OUT[208], 31'h7F7FFFFF };
      3'b010:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2 =
	      ff_input_D_OUT[208] ? 32'hFF800000 : 32'h7F7FFFFF;
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2 =
		   (ff_input_D_OUT[5:3] == 3'b011 && ff_input_D_OUT[208]) ?
		     32'hFF7FFFFF :
		     { ff_input_D_OUT[208], 31'h7F800000 };
    endcase
  end
  always@(inst_spfpu_divider_rg_stage3 or
	  x__h12451 or lv_round_up___1__h12403 or lv_round_up___1__h12439)
  begin
    case (inst_spfpu_divider_rg_stage3[4:2])
      3'b0:
	  IF_inst_spfpu_divider_rg_stage3_67_BITS_4_TO_2_ETC___d309 =
	      lv_round_up___1__h12403;
      3'b011:
	  IF_inst_spfpu_divider_rg_stage3_67_BITS_4_TO_2_ETC___d309 =
	      lv_round_up___1__h12439;
      3'b100:
	  IF_inst_spfpu_divider_rg_stage3_67_BITS_4_TO_2_ETC___d309 =
	      inst_spfpu_divider_rg_stage3[53];
      default: IF_inst_spfpu_divider_rg_stage3_67_BITS_4_TO_2_ETC___d309 =
		   inst_spfpu_divider_rg_stage3[4:2] == 3'b010 &&
		   x__h12451 & inst_spfpu_divider_rg_stage3[12];
    endcase
  end
  always@(inst_spfpu_sqrt_rg_inter_stage or
	  lv_inexact__h14150 or
	  lv_roundup___1__h14213 or lv_roundup___1__h14595)
  begin
    case (inst_spfpu_sqrt_rg_inter_stage[2:0])
      3'b0:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__81_BIT_ETC___d435 =
	      lv_roundup___1__h14213;
      3'b011:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__81_BIT_ETC___d435 =
	      lv_roundup___1__h14595;
      3'b100:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__81_BIT_ETC___d435 =
	      inst_spfpu_sqrt_rg_inter_stage[69];
      default: IF_inst_spfpu_sqrt_rg_inter_stage_read__81_BIT_ETC___d435 =
		   inst_spfpu_sqrt_rg_inter_stage[2:0] == 3'b010 &&
		   lv_inexact__h14150 & inst_spfpu_sqrt_rg_inter_stage[58];
    endcase
  end
  always@(inst_spfm_add_sub_ff_stage5 or
	  lv_inexact__h57930 or
	  y__h58610 or
	  lv_round_up___1__h58362 or
	  lv_round_up___1__h58584 or
	  IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1221)
  begin
    case (inst_spfm_add_sub_ff_stage5[21:19])
      3'b0:
	  IF_inst_spfm_add_sub_ff_stage5_read__178_BITS__ETC___d1242 =
	      lv_round_up___1__h58362;
      3'b010:
	  IF_inst_spfm_add_sub_ff_stage5_read__178_BITS__ETC___d1242 =
	      lv_round_up___1__h58584;
      3'b100:
	  IF_inst_spfm_add_sub_ff_stage5_read__178_BITS__ETC___d1242 =
	      IF_inst_spfm_add_sub_ff_stage5_read__178_BIT_9_ETC___d1221[47];
      default: IF_inst_spfm_add_sub_ff_stage5_read__178_BITS__ETC___d1242 =
		   inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 &&
		   lv_inexact__h57930 & y__h58610;
    endcase
  end
  always@(inst_dpfpu_divider_rg_stage3 or
	  x__h76849 or lv_round_up___1__h76801 or lv_round_up___1__h76837)
  begin
    case (inst_dpfpu_divider_rg_stage3[4:2])
      3'b0:
	  IF_inst_dpfpu_divider_rg_stage3_680_BITS_4_TO__ETC___d1722 =
	      lv_round_up___1__h76801;
      3'b011:
	  IF_inst_dpfpu_divider_rg_stage3_680_BITS_4_TO__ETC___d1722 =
	      lv_round_up___1__h76837;
      3'b100:
	  IF_inst_dpfpu_divider_rg_stage3_680_BITS_4_TO__ETC___d1722 =
	      inst_dpfpu_divider_rg_stage3[85];
      default: IF_inst_dpfpu_divider_rg_stage3_680_BITS_4_TO__ETC___d1722 =
		   inst_dpfpu_divider_rg_stage3[4:2] == 3'b010 &&
		   x__h76849 & inst_dpfpu_divider_rg_stage3[12];
    endcase
  end
  always@(inst_dpfpu_sqrt_rg_inter_stage or
	  lv_inexact__h78547 or
	  lv_roundup___1__h78610 or lv_roundup___1__h78992)
  begin
    case (inst_dpfpu_sqrt_rg_inter_stage[2:0])
      3'b0:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__794_BI_ETC___d1848 =
	      lv_roundup___1__h78610;
      3'b011:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__794_BI_ETC___d1848 =
	      lv_roundup___1__h78992;
      3'b100:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__794_BI_ETC___d1848 =
	      inst_dpfpu_sqrt_rg_inter_stage[130];
      default: IF_inst_dpfpu_sqrt_rg_inter_stage_read__794_BI_ETC___d1848 =
		   inst_dpfpu_sqrt_rg_inter_stage[2:0] == 3'b010 &&
		   lv_inexact__h78547 & inst_dpfpu_sqrt_rg_inter_stage[116];
    endcase
  end
  always@(inst_dpfm_add_sub_ff_stage5 or
	  lv_inexact__h171072 or
	  y__h171752 or
	  lv_round_up___1__h171504 or
	  lv_round_up___1__h171726 or
	  IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3214)
  begin
    case (inst_dpfm_add_sub_ff_stage5[22:20])
      3'b0:
	  IF_inst_dpfm_add_sub_ff_stage5_read__171_BITS__ETC___d3235 =
	      lv_round_up___1__h171504;
      3'b010:
	  IF_inst_dpfm_add_sub_ff_stage5_read__171_BITS__ETC___d3235 =
	      lv_round_up___1__h171726;
      3'b100:
	  IF_inst_dpfm_add_sub_ff_stage5_read__171_BITS__ETC___d3235 =
	      IF_inst_dpfm_add_sub_ff_stage5_read__171_BIT_1_ETC___d3214[105];
      default: IF_inst_dpfm_add_sub_ff_stage5_read__171_BITS__ETC___d3235 =
		   inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 &&
		   lv_inexact__h171072 & y__h171752;
    endcase
  end
  always@(ff_input_D_OUT or
	  inexact__h203754 or
	  sign__h203751 or
	  lv_roundup___1__h212935 or
	  lv_roundup___1__h212971 or
	  IF_NOT_ff_input_first__327_BIT_1_552_566_AND_f_ETC___d3700)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d3720 =
	      lv_roundup___1__h212935;
      3'b011:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d3720 =
	      lv_roundup___1__h212971;
      3'b100:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d3720 =
	      IF_NOT_ff_input_first__327_BIT_1_552_566_AND_f_ETC___d3700[10];
      default: IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d3720 =
		   ff_input_D_OUT[5:3] == 3'b010 &&
		   inexact__h203754 & sign__h203751;
    endcase
  end
  always@(ff_input_D_OUT or
	  ff_input_first__327_BIT_208_465_XOR_ff_input_f_ETC___d3828)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8 =
	      ff_input_D_OUT[144];
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8 =
	      ~ff_input_D_OUT[144];
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8 =
		   ff_input_first__327_BIT_208_465_XOR_ff_input_f_ETC___d3828;
    endcase
  end
  always@(inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget or
	  inexact__h184185 or
	  inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23 or
	  lv_roundup___1__h188943 or
	  lv_roundup___1__h188980 or
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5145)
  begin
    case (inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[2:0])
      3'b0:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5170 =
	      lv_roundup___1__h188943;
      3'b011:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5170 =
	      lv_roundup___1__h188980;
      3'b100:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5170 =
	      IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5145[7];
      default: IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5170 =
		   inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[2:0] == 3'b010 &&
		   inexact__h184185 &
		   (!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
		    inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23[31]);
    endcase
  end
  always@(inst_fpu_int_to_fp_fcvt_s_llu_arg_wget or
	  inexact__h189225 or
	  inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24 or
	  lv_roundup___1__h198482 or
	  lv_roundup___1__h198519 or
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5021)
  begin
    case (inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[2:0])
      3'b0:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5046 =
	      lv_roundup___1__h198482;
      3'b011:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5046 =
	      lv_roundup___1__h198519;
      3'b100:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5046 =
	      IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5021[39];
      default: IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5046 =
		   inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[2:0] == 3'b010 &&
		   inexact__h189225 &
		   (!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
		    inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24[63]);
    endcase
  end
  always@(ff_input_D_OUT or
	  x__h230886 or
	  lv_round_up___1__h230735 or
	  lv_round_up___1__h230874 or
	  IF_IF_getExp64_res_whas__004_THEN_getExp64_res_ETC___d4328)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0: _theResult_____4___1__h230715 = lv_round_up___1__h230735;
      3'b011: _theResult_____4___1__h230715 = lv_round_up___1__h230874;
      3'b100:
	  _theResult_____4___1__h230715 =
	      IF_IF_getExp64_res_whas__004_THEN_getExp64_res_ETC___d4328[25];
      default: _theResult_____4___1__h230715 =
		   ff_input_D_OUT[5:3] == 3'b010 &&
		   x__h230886 & ff_input_D_OUT[208];
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_compare_result__h177827 or
	  condFlags64_reswget_BITS_14_TO_10__q33 or
	  condFlags64_reswget_BITS_9_TO_5__q34)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b10_ETC___d3519 =
	      (lv_compare_result__h177827[0] ||
	       condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q34[3]) ?
		64'd1 :
		64'd0;
      3'b001:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b10_ETC___d3519 =
	      (lv_compare_result__h177827 == 2'b01 &&
	       (!condFlags64_reswget_BITS_14_TO_10__q33[3] ||
		!condFlags64_reswget_BITS_9_TO_5__q34[3])) ?
		64'd1 :
		64'd0;
      3'b010:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b10_ETC___d3519 =
	      (lv_compare_result__h177827 == 2'b11 ||
	       condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q34[3]) ?
		64'd1 :
		64'd0;
      default: IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b10_ETC___d3519 =
		   64'd0;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_inexact1__h218068 or
	  y__h219429 or
	  lv_round_up___1__h218749 or
	  lv_round_up___1__h219404 or
	  IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4058)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d4120 =
	      lv_round_up___1__h218749;
      3'b010:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d4120 =
	      lv_round_up___1__h219404;
      3'b100:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d4120 =
	      IF_IF_condFlags64_res_whas__446_THEN_condFlags_ETC___d4058[51];
      default: IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d4120 =
		   ff_input_D_OUT[5:3] == 3'b011 &&
		   lv_inexact1__h218068 & y__h219429;
    endcase
  end
  always@(ff_input_D_OUT or
	  x__h244292 or setCanonicalNaN_reswget_BITS_63_TO_32__q43)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44 =
	      setCanonicalNaN_reswget_BITS_63_TO_32__q43[31];
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44 =
	      ~setCanonicalNaN_reswget_BITS_63_TO_32__q43[31];
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44 =
		   x__h244292;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_compare_result__h175603 or
	  condFlags32_reswget_BITS_14_TO_10__q53 or
	  condFlags32_reswget_BITS_9_TO_5__q54)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b10_ETC___d3442 =
	      (lv_compare_result__h175603[0] ||
	       condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q54[3]) ?
		32'd1 :
		32'd0;
      3'b001:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b10_ETC___d3442 =
	      (lv_compare_result__h175603 == 2'b01 &&
	       (!condFlags32_reswget_BITS_14_TO_10__q53[3] ||
		!condFlags32_reswget_BITS_9_TO_5__q54[3])) ?
		32'd1 :
		32'd0;
      3'b010:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b10_ETC___d3442 =
	      (lv_compare_result__h175603 == 2'b11 ||
	       condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q54[3]) ?
		32'd1 :
		32'd0;
      default: IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b10_ETC___d3442 =
		   32'd0;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_inexact1__h215281 or
	  y__h216641 or
	  lv_round_up___1__h215959 or
	  lv_round_up___1__h216616 or
	  IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d3889)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d3952 =
	      lv_round_up___1__h215959;
      3'b010:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d3952 =
	      lv_round_up___1__h216616;
      3'b100:
	  IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d3952 =
	      IF_IF_condFlags32_res_whas__361_THEN_condFlags_ETC___d3889[22];
      default: IF_ff_input_first__327_BITS_5_TO_3_336_EQ_0b0__ETC___d3952 =
		   ff_input_D_OUT[5:3] == 3'b011 &&
		   lv_inexact1__h215281 & y__h216641;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inst_dpfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inst_dpfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_dpfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inst_dpfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inst_dpfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	    294'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	inst_dpfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_spfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_spfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	    146'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_multicycle_op <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (inst_dpfm_add_sub_rg_state_handler_EN)
	  inst_dpfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfm_add_sub_rg_state_handler_D_IN;
	if (inst_dpfpu_divider_int_div_rg_state_EN)
	  inst_dpfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_divider_int_div_rg_state_D_IN;
	if (inst_dpfpu_divider_rg_state_handler_EN)
	  inst_dpfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_divider_rg_state_handler_D_IN;
	if (inst_dpfpu_sqrt_ff_final_out_EN)
	  inst_dpfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_ff_final_out_D_IN;
	if (inst_dpfpu_sqrt_rg_inter_stage_EN)
	  inst_dpfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_rg_inter_stage_D_IN;
	if (inst_dpfpu_sqrt_rg_state_EN)
	  inst_dpfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_rg_state_D_IN;
	if (inst_spfm_add_sub_rg_state_handler_EN)
	  inst_spfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_spfm_add_sub_rg_state_handler_D_IN;
	if (inst_spfpu_divider_int_div_rg_state_EN)
	  inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_int_div_rg_state_D_IN;
	if (inst_spfpu_divider_rg_state_handler_EN)
	  inst_spfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_rg_state_handler_D_IN;
	if (inst_spfpu_sqrt_ff_final_out_EN)
	  inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_ff_final_out_D_IN;
	if (inst_spfpu_sqrt_rg_inter_stage_EN)
	  inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_inter_stage_D_IN;
	if (inst_spfpu_sqrt_rg_state_EN)
	  inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_state_D_IN;
	if (rg_multicycle_op_EN)
	  rg_multicycle_op <= `BSV_ASSIGNMENT_DELAY rg_multicycle_op_D_IN;
      end
    if (inst_dpfm_add_sub_ff_input_register_EN)
      inst_dpfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_input_register_D_IN;
    if (inst_dpfm_add_sub_ff_stage2_EN)
      inst_dpfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage2_D_IN;
    if (inst_dpfm_add_sub_ff_stage4_EN)
      inst_dpfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage4_D_IN;
    if (inst_dpfm_add_sub_ff_stage5_EN)
      inst_dpfm_add_sub_ff_stage5 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage5_D_IN;
    if (inst_dpfpu_divider_int_div_rg_inter_stage_EN)
      inst_dpfpu_divider_int_div_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_int_div_rg_inter_stage_D_IN;
    if (inst_dpfpu_divider_rg_stage1_EN)
      inst_dpfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage1_D_IN;
    if (inst_dpfpu_divider_rg_stage2_EN)
      inst_dpfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage2_D_IN;
    if (inst_dpfpu_divider_rg_stage3_EN)
      inst_dpfpu_divider_rg_stage3 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage3_D_IN;
    if (inst_spfm_add_sub_ff_input_register_EN)
      inst_spfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_input_register_D_IN;
    if (inst_spfm_add_sub_ff_stage2_EN)
      inst_spfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage2_D_IN;
    if (inst_spfm_add_sub_ff_stage4_EN)
      inst_spfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage4_D_IN;
    if (inst_spfm_add_sub_ff_stage5_EN)
      inst_spfm_add_sub_ff_stage5 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage5_D_IN;
    if (inst_spfpu_divider_int_div_rg_inter_stage_EN)
      inst_spfpu_divider_int_div_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_int_div_rg_inter_stage_D_IN;
    if (inst_spfpu_divider_rg_stage1_EN)
      inst_spfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage1_D_IN;
    if (inst_spfpu_divider_rg_stage2_EN)
      inst_spfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage2_D_IN;
    if (inst_spfpu_divider_rg_stage3_EN)
      inst_spfpu_divider_rg_stage3 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage3_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inst_dpfm_add_sub_ff_input_register =
	201'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage2 =
	204'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage4 =
	349'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage5 =
	197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_rg_state_handler = 3'h2;
    inst_dpfpu_divider_int_div_rg_inter_stage =
	170'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_int_div_rg_state = 6'h2A;
    inst_dpfpu_divider_rg_stage1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_rg_stage2 = 22'h2AAAAA;
    inst_dpfpu_divider_rg_stage3 = 139'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_rg_state_handler = 2'h2;
    inst_dpfpu_sqrt_ff_final_out = 70'h2AAAAAAAAAAAAAAAAA;
    inst_dpfpu_sqrt_rg_inter_stage =
	294'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_sqrt_rg_state = 6'h2A;
    inst_spfm_add_sub_ff_input_register = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage2 = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage4 =
	172'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage5 = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_rg_state_handler = 3'h2;
    inst_spfpu_divider_int_div_rg_inter_stage = 83'h2AAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_int_div_rg_state = 6'h2A;
    inst_spfpu_divider_rg_stage1 = 67'h2AAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_stage2 = 19'h2AAAA;
    inst_spfpu_divider_rg_stage3 = 78'h2AAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_state_handler = 2'h2;
    inst_spfpu_sqrt_ff_final_out = 38'h2AAAAAAAAA;
    inst_spfpu_sqrt_rg_inter_stage =
	146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_sqrt_rg_state = 6'h2A;
    rg_multicycle_op = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6332 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6333 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6334 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  v__h298102 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6332 ||
	   TASK_testplusargs___d6333 && TASK_testplusargs___d6334))
	$write("[%10d", v__h298102, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6332 ||
	   TASK_testplusargs___d6333 && TASK_testplusargs___d6334))
	$write("FPU: op1:%h op2:%h op3:%h",
	       _start_m[208:145],
	       _start_m[144:81],
	       _start_m[80:17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6332 ||
	   TASK_testplusargs___d6333 && TASK_testplusargs___d6334))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6341 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6342 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6343 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  v__h298248 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6341 ||
	   TASK_testplusargs___d6342 && TASK_testplusargs___d6343))
	$write("[%10d", v__h298248, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6341 ||
	   TASK_testplusargs___d6342 && TASK_testplusargs___d6343))
	$write("FPU: opcode:%b f7:%h f3:%b imm:%h issp:%b",
	       _start_m[16:13],
	       _start_m[12:6],
	       _start_m[5:3],
	       _start_m[2:1],
	       _start_m[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6341 ||
	   TASK_testplusargs___d6342 && TASK_testplusargs___d6343))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	begin
	  TASK_testplusargs___d6269 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	begin
	  TASK_testplusargs___d6270 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	begin
	  TASK_testplusargs___d6271 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	begin
	  v__h296713 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  (TASK_testplusargs___d6269 ||
	   TASK_testplusargs___d6270 && TASK_testplusargs___d6271))
	$write("[%10d", v__h296713, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  (TASK_testplusargs___d6269 ||
	   TASK_testplusargs___d6270 && TASK_testplusargs___d6271))
	$write("FPU:Got output from spfpu sqrt");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  (TASK_testplusargs___d6269 ||
	   TASK_testplusargs___d6270 && TASK_testplusargs___d6271))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	begin
	  TASK_testplusargs___d6283 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	begin
	  TASK_testplusargs___d6284 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	begin
	  TASK_testplusargs___d6285 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	begin
	  v__h296969 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  (TASK_testplusargs___d6283 ||
	   TASK_testplusargs___d6284 && TASK_testplusargs___d6285))
	$write("[%10d", v__h296969, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  (TASK_testplusargs___d6283 ||
	   TASK_testplusargs___d6284 && TASK_testplusargs___d6285))
	$write("FPU:Got output from spfpu sqrt");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  (TASK_testplusargs___d6283 ||
	   TASK_testplusargs___d6284 && TASK_testplusargs___d6285))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider)
	begin
	  TASK_testplusargs___d6241 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider)
	begin
	  TASK_testplusargs___d6242 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider)
	begin
	  TASK_testplusargs___d6243 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider)
	begin
	  v__h296220 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  (TASK_testplusargs___d6241 ||
	   TASK_testplusargs___d6242 && TASK_testplusargs___d6243))
	$write("[%10d", v__h296220, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  (TASK_testplusargs___d6241 ||
	   TASK_testplusargs___d6242 && TASK_testplusargs___d6243))
	$write("FPU:Got output from spfpu divider");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  (TASK_testplusargs___d6241 ||
	   TASK_testplusargs___d6242 && TASK_testplusargs___d6243))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 91, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 91, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 91, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_stage_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 91, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_stage_1] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 91, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_stage_1] and\n  [RL_inst_spfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 91, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_recursive_stage] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_flush]\n  and [RL_inst_spfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_flush]\n  and [RL_inst_spfpu_divider_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_stage2]\n  and [RL_inst_spfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 113, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_stage2]\n  and [RL_inst_spfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 113, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_stage2]\n  and [RL_inst_spfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 113, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_sqrt_rl_inter_stage] and [RL_inst_spfpu_sqrt_rl_final_stage]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	begin
	  TASK_testplusargs___d6295 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	begin
	  TASK_testplusargs___d6296 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	begin
	  TASK_testplusargs___d6297 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	begin
	  v__h297197 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	  (TASK_testplusargs___d6295 ||
	   TASK_testplusargs___d6296 && TASK_testplusargs___d6297))
	$write("[%10d", v__h297197, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	  (TASK_testplusargs___d6295 ||
	   TASK_testplusargs___d6296 && TASK_testplusargs___d6297))
	$write("FPU:Got output from sp fused multiple add conversion Module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	  (TASK_testplusargs___d6295 ||
	   TASK_testplusargs___d6296 && TASK_testplusargs___d6297))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	begin
	  TASK_testplusargs___d6306 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	begin
	  TASK_testplusargs___d6307 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	begin
	  TASK_testplusargs___d6308 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	begin
	  v__h297443 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	  (TASK_testplusargs___d6306 ||
	   TASK_testplusargs___d6307 && TASK_testplusargs___d6308))
	$write("[%10d", v__h297443, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	  (TASK_testplusargs___d6306 ||
	   TASK_testplusargs___d6307 && TASK_testplusargs___d6308))
	$write("FPU:FMA Result : %16h", y_data__h297333);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	  (TASK_testplusargs___d6306 ||
	   TASK_testplusargs___d6307 && TASK_testplusargs___d6308))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider)
	begin
	  TASK_testplusargs___d6255 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider)
	begin
	  TASK_testplusargs___d6256 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider)
	begin
	  TASK_testplusargs___d6257 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider)
	begin
	  v__h296457 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  (TASK_testplusargs___d6255 ||
	   TASK_testplusargs___d6256 && TASK_testplusargs___d6257))
	$write("[%10d", v__h296457, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  (TASK_testplusargs___d6255 ||
	   TASK_testplusargs___d6256 && TASK_testplusargs___d6257))
	$write("FPU:Got output from spfpu divider");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  (TASK_testplusargs___d6255 ||
	   TASK_testplusargs___d6256 && TASK_testplusargs___d6257))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 91, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 91, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 91, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_stage_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 91, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_stage_1] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 91, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_stage_1] and\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 91, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_flush]\n  and [RL_inst_dpfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_flush]\n  and [RL_inst_dpfpu_divider_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_stage2]\n  and [RL_inst_dpfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 113, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 113, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_stage2]\n  and [RL_inst_dpfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 113, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_stage2]\n  and [RL_inst_dpfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 113, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_sqrt_rl_inter_stage] and [RL_inst_dpfpu_sqrt_rl_final_stage]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] == 5'b10100 ||
	   ff_input_D_OUT[12:8] == 5'b00101) &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d4867 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] == 5'b10100 ||
	   ff_input_D_OUT[12:8] == 5'b00101) &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d4868 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] == 5'b10100 ||
	   ff_input_D_OUT[12:8] == 5'b00101) &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d4869 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BITS_12_TO_8_328_EQ_0b1010_ETC___d4872 =
	(ff_input_D_OUT[12:8] == 5'b10100 ||
	 ff_input_D_OUT[12:8] == 5'b00101) &&
	ff_input_D_OUT[16:13] == 4'b0100 &&
	(TASK_testplusargs___d4867 ||
	 TASK_testplusargs___d4868 && TASK_testplusargs___d4869);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] == 5'b10100 ||
	   ff_input_D_OUT[12:8] == 5'b00101) &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  v__h223323 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b1010_ETC___d4872)
	$write("[%10d", v__h223323, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b1010_ETC___d4872)
	$write("FPU:Giving inputs to fpu_compare_min_max %h operand2 %h funct7 : %h",
	       ff_input_D_OUT[208:145],
	       ff_input_D_OUT[144:81],
	       ff_input_D_OUT[12:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b1010_ETC___d4872)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b11010 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d5183 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b11010 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d5184 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b11010 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d5185 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BITS_12_TO_8_328_EQ_0b1101_ETC___d5188 =
	ff_input_D_OUT[12:8] == 5'b11010 &&
	ff_input_D_OUT[16:13] == 4'b0100 &&
	(TASK_testplusargs___d5183 ||
	 TASK_testplusargs___d5184 && TASK_testplusargs___d5185);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b11010 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  v__h223414 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b1101_ETC___d5188)
	$write("[%10d", v__h223414, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b1101_ETC___d5188)
	$write("FPU:Giving inputs to fpu_int_to_fp %h operand2[0] %h operand2[1] : %h",
	       ff_input_D_OUT[208:145],
	       ff_input_D_OUT[81],
	       ff_input_D_OUT[82]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b1101_ETC___d5188)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b00100 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d5192 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b00100 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d5193 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b00100 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d5194 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BITS_12_TO_8_328_EQ_0b100__ETC___d5197 =
	ff_input_D_OUT[12:8] == 5'b00100 &&
	ff_input_D_OUT[16:13] == 4'b0100 &&
	(TASK_testplusargs___d5192 ||
	 TASK_testplusargs___d5193 && TASK_testplusargs___d5194);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b00100 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  v__h223545 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b100__ETC___d5197)
	$write("[%10d", v__h223545, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b100__ETC___d5197)
	$write("FPU:Giving inputs to the fpu sign injection");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b100__ETC___d5197)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b11000 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d5199 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b11000 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d5200 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b11000 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d5201 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BITS_12_TO_8_328_EQ_0b1100_ETC___d5204 =
	ff_input_D_OUT[12:8] == 5'b11000 &&
	ff_input_D_OUT[16:13] == 4'b0100 &&
	(TASK_testplusargs___d5199 ||
	 TASK_testplusargs___d5200 && TASK_testplusargs___d5201);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b11000 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  v__h223636 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b1100_ETC___d5204)
	$write("[%10d", v__h223636, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b1100_ETC___d5204)
	$write("FPU:Giving Inputs to fpu to int Conversion Module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b1100_ETC___d5204)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b11100 &&
	  ff_input_D_OUT[5:3] == 3'b001 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d5206 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b11100 &&
	  ff_input_D_OUT[5:3] == 3'b001 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d5207 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b11100 &&
	  ff_input_D_OUT[5:3] == 3'b001 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  TASK_testplusargs___d5208 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BITS_12_TO_8_328_EQ_0b1110_ETC___d5211 =
	ff_input_D_OUT[12:8] == 5'b11100 && ff_input_D_OUT[5:3] == 3'b001 &&
	ff_input_D_OUT[16:13] == 4'b0100 &&
	(TASK_testplusargs___d5206 ||
	 TASK_testplusargs___d5207 && TASK_testplusargs___d5208);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b11100 &&
	  ff_input_D_OUT[5:3] == 3'b001 &&
	  ff_input_D_OUT[16:13] == 4'b0100)
	begin
	  v__h223727 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b1110_ETC___d5211)
	$write("[%10d", v__h223727, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b1110_ETC___d5211)
	$write("FPU:Giving inputs to floating classify module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  ff_input_first__327_BITS_12_TO_8_328_EQ_0b1110_ETC___d5211)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0])
	begin
	  TASK_testplusargs___d5213 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0])
	begin
	  TASK_testplusargs___d5214 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0])
	begin
	  TASK_testplusargs___d5215 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BIT_0_359_AND_TASK_testplu_ETC___d5218 =
	ff_input_D_OUT[0] &&
	(TASK_testplusargs___d5213 ||
	 TASK_testplusargs___d5214 && TASK_testplusargs___d5215);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0])
	begin
	  v__h222786 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__327_BIT_0_359_AND_TASK_testplu_ETC___d5218)
	$write("[%10d", v__h222786, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__327_BIT_0_359_AND_TASK_testplu_ETC___d5218)
	$write("FPU:Giving inputs to Convert DP to SP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__327_BIT_0_359_AND_TASK_testplu_ETC___d5218)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0])
	$display("sign : %b exponent %b mantissa %b rounding_mode %b flags %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 ff_input_D_OUT[5:3],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0])
	$display("sign : %b exponent : %b mantissa : %b flags : %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__327_BIT_0_359_AND_NOT_IF_condF_ETC___d5223)
	$display("sign : %b exponent %b mantissa %b rounding %b flags %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 ff_input_D_OUT[5:3],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__327_BIT_0_359_AND_NOT_IF_condF_ETC___d5223)
	$display("exponent : %d", getExp64_res_wget[32:22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__446_THEN_condFlag_ETC___d5226)
	$display("Denormal lv_sticky : %b", lv_sticky__h230241);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__446_THEN_condFlag_ETC___d5226)
	$display("lv_guard : %b shiftDist : %d", 1'd0, shiftDist__h230344);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__446_THEN_condFlag_ETC___d5226)
	$display("expo : %b man : %b", 8'd0, man__h230345);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__446_THEN_condFlag_ETC___d5232)
	$display("expo : %b man : %b", x__h230465[7:0], man__h230444);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__327_BIT_0_359_AND_NOT_IF_condF_ETC___d5223)
	$display("lv_roundup : %b", _theResult_____4___1__h230715);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__327_BIT_0_359_AND_NOT_IF_condF_ETC___d5223)
	$display("fman: %b", fman__h230914);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	  !condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	  !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	  !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	  !IF_getExp64_res_whas__004_THEN_getExp64_res_wg_ETC___d4317)
	$display("overflow");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  !ff_input_D_OUT[0])
	begin
	  TASK_testplusargs___d5239 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  !ff_input_D_OUT[0])
	begin
	  TASK_testplusargs___d5240 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  !ff_input_D_OUT[0])
	begin
	  TASK_testplusargs___d5241 = $test$plusargs("l0");
	  #0;
	end
    NOT_ff_input_first__327_BIT_0_359_505_AND_TASK_ETC___d5244 =
	!ff_input_D_OUT[0] &&
	(TASK_testplusargs___d5239 ||
	 TASK_testplusargs___d5240 && TASK_testplusargs___d5241);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  !ff_input_D_OUT[0])
	begin
	  v__h222638 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  NOT_ff_input_first__327_BIT_0_359_505_AND_TASK_ETC___d5244)
	$write("[%10d", v__h222638, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  NOT_ff_input_first__327_BIT_0_359_505_AND_TASK_ETC___d5244)
	$write("FPU:Giving inputs to Convert SP to DP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  NOT_ff_input_first__327_BIT_0_359_505_AND_TASK_ETC___d5244)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  !ff_input_D_OUT[0])
	$display("sign : %b exponent %b mantissa %b rounding_mode %b flags %b",
		 setCanonicalNaN_reswget_BITS_95_TO_64__q42[31],
		 getExp32_res_wget[23:16],
		 getMant32_res_wget[68:46],
		 ff_input_D_OUT[5:3],
		 condFlags32_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  ff_input_D_OUT[12:8] != 5'b00100 &&
	  ff_input_D_OUT[12:8] != 5'b11000 &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5248)
	begin
	  TASK_testplusargs___d5253 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  ff_input_D_OUT[12:8] != 5'b00100 &&
	  ff_input_D_OUT[12:8] != 5'b11000 &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5248)
	begin
	  TASK_testplusargs___d5254 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  ff_input_D_OUT[12:8] != 5'b00100 &&
	  ff_input_D_OUT[12:8] != 5'b11000 &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5248)
	begin
	  TASK_testplusargs___d5255 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BITS_12_TO_6_340_EQ_0b1110_ETC___d5258 =
	(ff_input_D_OUT[12:6] == 7'b1110000 ||
	 ff_input_D_OUT[12:6] == 7'b1111000) &&
	ff_input_D_OUT[5:3] == 3'b0 &&
	ff_input_D_OUT[16:13] == 4'b0100 &&
	(TASK_testplusargs___d5253 ||
	 TASK_testplusargs___d5254 && TASK_testplusargs___d5255);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  ff_input_D_OUT[12:8] != 5'b00100 &&
	  ff_input_D_OUT[12:8] != 5'b11000 &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5248)
	begin
	  v__h222935 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  ff_input_D_OUT[12:8] != 5'b00100 &&
	  ff_input_D_OUT[12:8] != 5'b11000 &&
	  ff_input_D_OUT[12:8] != 5'b01000 &&
	  ff_input_first__327_BITS_12_TO_6_340_EQ_0b1110_ETC___d5258)
	$write("[%10d", v__h222935, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  ff_input_D_OUT[12:8] != 5'b00100 &&
	  ff_input_D_OUT[12:8] != 5'b11000 &&
	  ff_input_D_OUT[12:8] != 5'b01000 &&
	  ff_input_first__327_BITS_12_TO_6_340_EQ_0b1110_ETC___d5258)
	$write("FPU:Giving inputs to FMV");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  ff_input_D_OUT[12:8] != 5'b00100 &&
	  ff_input_D_OUT[12:8] != 5'b11000 &&
	  ff_input_D_OUT[12:8] != 5'b01000 &&
	  ff_input_first__327_BITS_12_TO_6_340_EQ_0b1110_ETC___d5258)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  ff_input_D_OUT[12:8] != 5'b00100 &&
	  ff_input_D_OUT[12:8] != 5'b11000 &&
	  ff_input_D_OUT[12:8] != 5'b01000 &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5267)
	begin
	  TASK_testplusargs___d5273 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  ff_input_D_OUT[12:8] != 5'b00100 &&
	  ff_input_D_OUT[12:8] != 5'b11000 &&
	  ff_input_D_OUT[12:8] != 5'b01000 &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5267)
	begin
	  TASK_testplusargs___d5274 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  ff_input_D_OUT[12:8] != 5'b00100 &&
	  ff_input_D_OUT[12:8] != 5'b11000 &&
	  ff_input_D_OUT[12:8] != 5'b01000 &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5267)
	begin
	  TASK_testplusargs___d5275 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BITS_12_TO_6_340_EQ_0b1110_ETC___d5278 =
	(ff_input_D_OUT[12:6] == 7'b1110001 ||
	 ff_input_D_OUT[12:6] == 7'b1111001) &&
	ff_input_D_OUT[5:3] == 3'b0 &&
	ff_input_D_OUT[16:13] == 4'b0100 &&
	(TASK_testplusargs___d5273 ||
	 TASK_testplusargs___d5274 && TASK_testplusargs___d5275);
    NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5281 =
	ff_input_D_OUT[12:8] != 5'b11000 &&
	ff_input_D_OUT[12:8] != 5'b01000 &&
	ff_input_D_OUT[12:6] != 7'b1110000 &&
	ff_input_D_OUT[12:6] != 7'b1111000 &&
	ff_input_first__327_BITS_12_TO_6_340_EQ_0b1110_ETC___d5278;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  ff_input_D_OUT[12:8] != 5'b00100 &&
	  ff_input_D_OUT[12:8] != 5'b11000 &&
	  ff_input_D_OUT[12:8] != 5'b01000 &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5267)
	begin
	  v__h223083 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  ff_input_D_OUT[12:8] != 5'b00100 &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5281)
	$write("[%10d", v__h223083, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  ff_input_D_OUT[12:8] != 5'b00100 &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5281)
	$write("FPU:Giving inputs to FMV");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  ff_input_D_OUT[12:8] != 5'b00100 &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5281)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5457)
	begin
	  TASK_testplusargs___d5460 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5457)
	begin
	  TASK_testplusargs___d5461 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5457)
	begin
	  TASK_testplusargs___d5462 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_51_ETC___d5465 =
	(ff_input_D_OUT[12:8] == 5'b0 || ff_input_D_OUT[12:8] == 5'b00001) &&
	ff_input_D_OUT[16:13] == 4'b0100 &&
	(TASK_testplusargs___d5460 ||
	 TASK_testplusargs___d5461 && TASK_testplusargs___d5462);
    NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5471 =
	ff_input_D_OUT[12:8] != 5'b00100 &&
	ff_input_D_OUT[12:8] != 5'b11000 &&
	(ff_input_D_OUT[12:8] != 5'b11100 || ff_input_D_OUT[5:3] != 3'b001) &&
	ff_input_D_OUT[12:8] != 5'b01000 &&
	(ff_input_D_OUT[12:6] != 7'b1110000 &&
	 ff_input_D_OUT[12:6] != 7'b1111000 ||
	 ff_input_D_OUT[5:3] != 3'b0) &&
	(ff_input_D_OUT[12:6] != 7'b1110001 &&
	 ff_input_D_OUT[12:6] != 7'b1111001 ||
	 ff_input_D_OUT[5:3] != 3'b0) &&
	ff_input_first__327_BITS_12_TO_8_328_EQ_0b0_51_ETC___d5465;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5457)
	begin
	  v__h235340 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5471)
	$write("[%10d", v__h235340, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5471)
	$write("FPU:Giving inputs to the fpu add_sub");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] != 5'b10100 &&
	  ff_input_D_OUT[12:8] != 5'b00101 &&
	  ff_input_D_OUT[12:8] != 5'b11010 &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d5471)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5475)
	begin
	  TASK_testplusargs___d5477 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5475)
	begin
	  TASK_testplusargs___d5478 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5475)
	begin
	  TASK_testplusargs___d5479 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BIT_0_359_AND_TASK_testplu_ETC___d5482 =
	ff_input_D_OUT[0] &&
	(TASK_testplusargs___d5477 ||
	 TASK_testplusargs___d5478 && TASK_testplusargs___d5479);
    NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5484 =
	ff_input_D_OUT[12:8] == 5'b00011 &&
	ff_input_D_OUT[16:13] == 4'b0100 &&
	ff_input_first__327_BIT_0_359_AND_TASK_testplu_ETC___d5482;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5475)
	begin
	  v__h235445 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5484)
	$write("[%10d", v__h235445, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5484)
	$write("FPU: operand1: %h, operand2: %h",
	       ff_input_D_OUT[208:145],
	       ff_input_D_OUT[144:81]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5484)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5495)
	$display("Divide_by_zero");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5475)
	begin
	  TASK_testplusargs___d5606 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5475)
	begin
	  TASK_testplusargs___d5607 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5475)
	begin
	  TASK_testplusargs___d5608 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BIT_0_359_AND_TASK_testplu_ETC___d5611 =
	ff_input_D_OUT[0] &&
	(TASK_testplusargs___d5606 ||
	 TASK_testplusargs___d5607 && TASK_testplusargs___d5608);
    NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5613 =
	ff_input_D_OUT[12:8] == 5'b00011 &&
	ff_input_D_OUT[16:13] == 4'b0100 &&
	ff_input_first__327_BIT_0_359_AND_TASK_testplu_ETC___d5611;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5475)
	begin
	  v__h244570 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5613)
	$write("[%10d", v__h244570, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5613)
	$write("FPU:Giving inputs to the spfpu divider in1: %h, in2: %h",
	       setCanonicalNaN_res_wget[95:64],
	       setCanonicalNaN_res_wget[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5613)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5624)
	$display("Divide_by_zero");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5626)
	begin
	  TASK_testplusargs___d5876 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5626)
	begin
	  TASK_testplusargs___d5877 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5626)
	begin
	  TASK_testplusargs___d5878 = $test$plusargs("l0");
	  #0;
	end
    NOT_ff_input_first__327_BIT_0_359_505_AND_TASK_ETC___d5881 =
	!ff_input_D_OUT[0] &&
	(TASK_testplusargs___d5876 ||
	 TASK_testplusargs___d5877 && TASK_testplusargs___d5878);
    NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5883 =
	ff_input_D_OUT[12:8] == 5'b00011 &&
	ff_input_D_OUT[16:13] == 4'b0100 &&
	NOT_ff_input_first__327_BIT_0_359_505_AND_TASK_ETC___d5881;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5626)
	begin
	  v__h260956 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5883)
	$write("[%10d", v__h260956, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5883)
	$write("FPU:Giving inputs to the dpfpu divider");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d5883)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6017)
	begin
	  TASK_testplusargs___d6107 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6017)
	begin
	  TASK_testplusargs___d6108 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6017)
	begin
	  TASK_testplusargs___d6109 = $test$plusargs("l0");
	  #0;
	end
    NOT_ff_input_first__327_BIT_0_359_505_AND_TASK_ETC___d6112 =
	!ff_input_D_OUT[0] &&
	(TASK_testplusargs___d6107 ||
	 TASK_testplusargs___d6108 && TASK_testplusargs___d6109);
    NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6114 =
	ff_input_D_OUT[12:8] == 5'b01011 &&
	ff_input_D_OUT[16:13] == 4'b0100 &&
	NOT_ff_input_first__327_BIT_0_359_505_AND_TASK_ETC___d6112;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6017)
	begin
	  v__h287912 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6114)
	$write("[%10d", v__h287912, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6114)
	$write("FPU:Giving inputs to the spfpu sqrt");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6114)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6117)
	begin
	  TASK_testplusargs___d6119 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6117)
	begin
	  TASK_testplusargs___d6120 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6117)
	begin
	  TASK_testplusargs___d6121 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BITS_12_TO_8_328_EQ_0b10_5_ETC___d6124 =
	ff_input_D_OUT[12:8] == 5'b00010 &&
	ff_input_D_OUT[16:13] == 4'b0100 &&
	(TASK_testplusargs___d6119 ||
	 TASK_testplusargs___d6120 && TASK_testplusargs___d6121);
    NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6126 =
	(ff_input_D_OUT[12:6] != 7'b1110000 &&
	 ff_input_D_OUT[12:6] != 7'b1111000 ||
	 ff_input_D_OUT[5:3] != 3'b0) &&
	(ff_input_D_OUT[12:6] != 7'b1110001 &&
	 ff_input_D_OUT[12:6] != 7'b1111001 ||
	 ff_input_D_OUT[5:3] != 3'b0) &&
	ff_input_first__327_BITS_12_TO_8_328_EQ_0b10_5_ETC___d6124;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6117)
	begin
	  v__h288013 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6126)
	$write("[%10d", v__h288013, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6126)
	$write("FPU:funct3 : %h", ff_input_D_OUT[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6126)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6117)
	begin
	  TASK_testplusargs___d6128 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6117)
	begin
	  TASK_testplusargs___d6129 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6117)
	begin
	  TASK_testplusargs___d6130 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BITS_12_TO_8_328_EQ_0b10_5_ETC___d6133 =
	ff_input_D_OUT[12:8] == 5'b00010 &&
	ff_input_D_OUT[16:13] == 4'b0100 &&
	(TASK_testplusargs___d6128 ||
	 TASK_testplusargs___d6129 && TASK_testplusargs___d6130);
    NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6135 =
	(ff_input_D_OUT[12:6] != 7'b1110000 &&
	 ff_input_D_OUT[12:6] != 7'b1111000 ||
	 ff_input_D_OUT[5:3] != 3'b0) &&
	(ff_input_D_OUT[12:6] != 7'b1110001 &&
	 ff_input_D_OUT[12:6] != 7'b1111001 ||
	 ff_input_D_OUT[5:3] != 3'b0) &&
	ff_input_first__327_BITS_12_TO_8_328_EQ_0b10_5_ETC___d6133;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6117)
	begin
	  v__h291843 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6135)
	$write("[%10d", v__h291843, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6135)
	$write("FPU:Giving inputs to the spfloating multiplier module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  NOT_ff_input_first__327_BITS_12_TO_6_340_EQ_0b_ETC___d6135)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6146)
	begin
	  TASK_testplusargs___d6148 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6146)
	begin
	  TASK_testplusargs___d6149 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6146)
	begin
	  TASK_testplusargs___d6150 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BIT_0_359_AND_TASK_testplu_ETC___d6153 =
	ff_input_D_OUT[0] &&
	(TASK_testplusargs___d6148 ||
	 TASK_testplusargs___d6149 && TASK_testplusargs___d6150);
    NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6165 =
	(ff_input_D_OUT[16:13] == 4'b0 || ff_input_D_OUT[16:13] == 4'b0001 ||
	 ff_input_D_OUT[16:13] == 4'b0010 ||
	 ff_input_D_OUT[16:13] == 4'b0011) &&
	ff_input_first__327_BIT_0_359_AND_TASK_testplu_ETC___d6153;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6146)
	begin
	  v__h291969 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6165)
	$write("[%10d", v__h291969, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6165)
	$write("FPU:Giving Inputs to sp fused multiply add Conversion Module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6165)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6177)
	begin
	  TASK_testplusargs___d6179 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6177)
	begin
	  TASK_testplusargs___d6180 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6177)
	begin
	  TASK_testplusargs___d6181 = $test$plusargs("l0");
	  #0;
	end
    NOT_ff_input_first__327_BIT_0_359_505_AND_TASK_ETC___d6184 =
	!ff_input_D_OUT[0] &&
	(TASK_testplusargs___d6179 ||
	 TASK_testplusargs___d6180 && TASK_testplusargs___d6181);
    NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6196 =
	(ff_input_D_OUT[16:13] == 4'b0 || ff_input_D_OUT[16:13] == 4'b0001 ||
	 ff_input_D_OUT[16:13] == 4'b0010 ||
	 ff_input_D_OUT[16:13] == 4'b0011) &&
	NOT_ff_input_first__327_BIT_0_359_505_AND_TASK_ETC___d6184;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6177)
	begin
	  v__h294159 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6196)
	$write("[%10d", v__h294159, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6196)
	$write("FPU:Giving Inputs to dp fused multiply add Conversion Module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6196)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6209)
	begin
	  TASK_testplusargs___d6211 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6209)
	begin
	  TASK_testplusargs___d6212 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6209)
	begin
	  TASK_testplusargs___d6213 = $test$plusargs("l0");
	  #0;
	end
    ff_input_first__327_BITS_16_TO_13_356_EQ_0b0_5_ETC___d6216 =
	(ff_input_D_OUT[16:13] == 4'b0 || ff_input_D_OUT[16:13] == 4'b0001 ||
	 ff_input_D_OUT[16:13] == 4'b0010 ||
	 ff_input_D_OUT[16:13] == 4'b0011) &&
	(TASK_testplusargs___d6211 ||
	 TASK_testplusargs___d6212 && TASK_testplusargs___d6213);
    NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6227 =
	(ff_input_D_OUT[12:8] != 5'b11010 ||
	 ff_input_D_OUT[16:13] != 4'b0100) &&
	(ff_input_D_OUT[12:8] != 5'b00100 ||
	 ff_input_D_OUT[16:13] != 4'b0100) &&
	(ff_input_D_OUT[12:8] != 5'b11000 ||
	 ff_input_D_OUT[16:13] != 4'b0100) &&
	(ff_input_D_OUT[12:8] != 5'b11100 || ff_input_D_OUT[5:3] != 3'b001 ||
	 ff_input_D_OUT[16:13] != 4'b0100) &&
	(ff_input_D_OUT[12:8] != 5'b01000 ||
	 ff_input_D_OUT[16:13] != 4'b0100) &&
	(ff_input_D_OUT[12:6] != 7'b1110000 &&
	 ff_input_D_OUT[12:6] != 7'b1111000 ||
	 ff_input_D_OUT[5:3] != 3'b0 ||
	 ff_input_D_OUT[16:13] != 4'b0100) &&
	(ff_input_D_OUT[12:6] != 7'b1110001 &&
	 ff_input_D_OUT[12:6] != 7'b1111001 ||
	 ff_input_D_OUT[5:3] != 3'b0 ||
	 ff_input_D_OUT[16:13] != 4'b0100) &&
	(ff_input_D_OUT[12:8] != 5'b0 && ff_input_D_OUT[12:8] != 5'b00001 ||
	 ff_input_D_OUT[16:13] != 4'b0100) &&
	(ff_input_D_OUT[12:8] != 5'b00011 ||
	 ff_input_D_OUT[16:13] != 4'b0100) &&
	(ff_input_D_OUT[12:8] != 5'b01011 ||
	 ff_input_D_OUT[16:13] != 4'b0100) &&
	(ff_input_D_OUT[12:8] != 5'b00010 ||
	 ff_input_D_OUT[16:13] != 4'b0100) &&
	ff_input_first__327_BITS_16_TO_13_356_EQ_0b0_5_ETC___d6216;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6209)
	begin
	  v__h296082 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6227)
	$write("[%10d", v__h296082, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6227)
	$write("FPU:Operand 1: %h Operand 2: %h Operand 3: %h",
	       ff_input_D_OUT[208:145],
	       ff_input_D_OUT[144:81],
	       ff_input_D_OUT[80:17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:8] != 5'b10100 &&
	   ff_input_D_OUT[12:8] != 5'b00101 ||
	   ff_input_D_OUT[16:13] != 4'b0100) &&
	  NOT_ff_input_first__327_BITS_12_TO_8_328_EQ_0b_ETC___d6227)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	begin
	  TASK_testplusargs___d6315 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	begin
	  TASK_testplusargs___d6316 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	begin
	  TASK_testplusargs___d6317 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	begin
	  v__h297609 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub &&
	  (TASK_testplusargs___d6315 ||
	   TASK_testplusargs___d6316 && TASK_testplusargs___d6317))
	$write("[%10d", v__h297609, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub &&
	  (TASK_testplusargs___d6315 ||
	   TASK_testplusargs___d6316 && TASK_testplusargs___d6317))
	$write("FPU:Got output from sp fused multiple add conversion Module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub &&
	  (TASK_testplusargs___d6315 ||
	   TASK_testplusargs___d6316 && TASK_testplusargs___d6317))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	begin
	  TASK_testplusargs___d6325 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	begin
	  TASK_testplusargs___d6326 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	begin
	  TASK_testplusargs___d6327 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	begin
	  v__h297830 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub &&
	  (TASK_testplusargs___d6325 ||
	   TASK_testplusargs___d6326 && TASK_testplusargs___d6327))
	$write("[%10d", v__h297830, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub &&
	  (TASK_testplusargs___d6325 ||
	   TASK_testplusargs___d6326 && TASK_testplusargs___d6327))
	$write("FPU:FMA Result : %16h",
	       inst_dpfm_add_sub_ff_final_out_wget[68:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub &&
	  (TASK_testplusargs___d6325 ||
	   TASK_testplusargs___d6326 && TASK_testplusargs___d6327))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and\n  [RL_rl_get_output_from_dpfm_add_sub] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_fm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_dpfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_spfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and\n  [RL_rl_get_output_from_dpfpu_divider] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and\n  [RL_rl_get_output_from_dpfm_add_sub] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_fm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_dpfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_spfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_fm_add_sub] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_dpfpu_sqrt] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 122: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_sqrt] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 122: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_sqrt] and [RL_rl_get_output_from_fm_add_sub] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 207, column 152: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_fm_add_sub] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkfpu

